GİTHUB LİNKİ : https://github.com/musttoprak/Besgun-Turizm										

                                                         Mobil Kısmı
package com.muhammetcakir.turizmacentasi.Database
import com.google.gson.Gson
import com.muhammetcakir.turizmacentasi.Models.*
import kotlinx.coroutines.*
import okhttp3.OkHttpClient


var hizmetListesi=ArrayList<Hizmet>()
var musteriListesi=ArrayList<Musteri>()
var rezervasyonListesi=ArrayList<Rezervasyon>()
var benimrezervasyonlarimlistesi=ArrayList<Rezervasyon>()

class DbServices {

    private  val url="http://192.168.1.113/turizmacentasi/v1/?op="


    suspend fun getOtelView(): List<OtelView> = withContext(Dispatchers.IO) {
        val geturl = url + "getOtelView"
        val request = okhttp3.Request.Builder()
            .url(geturl)
            .get()
            .build()
        val client = OkHttpClient()
        val response = client.newCall(request).execute()

        if (response.isSuccessful) {
            val json = response.body?.string()
            // JSON verisini işleyin
            val gson = Gson()
            val responseJson = gson.fromJson(json, ApiResponseOtelView::class.java)
            responseJson?.otel ?: emptyList()
        } else {
            emptyList()
        }
    }

    suspend fun getYurtdisiturView(): List<YurtDisiTurView> = withContext(Dispatchers.IO) {
        val geturl = url + "getYurtdisiTurView"
        val request = okhttp3.Request.Builder()
            .url(geturl)
            .get()
            .build()
        val client = OkHttpClient()
        val response = client.newCall(request).execute()
        if (response.isSuccessful) {
            val json = response.body?.string()
            // JSON verisini işleyin
            val gson = Gson()
            val responseJson = gson.fromJson(json, ApiResponseYurtDisiTurView::class.java)
            responseJson?.yurtdisitur ?: emptyList()
        } else {
            emptyList()
        }
    }

    suspend fun getTekneturView(): List<TekneTurView> = withContext(Dispatchers.IO){
        val geturl = url + "getTekneTurView"
        val request = okhttp3.Request.Builder()
            .url(geturl)
            .get()
            .build()
        val client = OkHttpClient()
        val response = client.newCall(request).execute()

        if (response.isSuccessful) {
            val json = response.body?.string()
            // JSON verisini işleyin
            val gson = Gson()
            val responseJson = gson.fromJson(json, ApiResponseTekneTurView::class.java)
            responseJson?.teknetur ?: emptyList()
        } else {
            emptyList()
        }
    }

    suspend fun getHizmet(id:String): List<Hizmet> = withContext(Dispatchers.IO) {
        val geturl = url+"getHizmet&id=${id}"
        val request = okhttp3.Request.Builder()
            .url(geturl)
            .get()
            .build()
        val client = OkHttpClient()
        val response = client.newCall(request).execute()

        if (response.isSuccessful) {
            val json = response.body?.string()
            // JSON verisini işleyin
            val gson = Gson()
            val responseJson = gson.fromJson(json, ApiResponseHizmet::class.java)
            responseJson?.hizmet ?: emptyList()
        } else {
            emptyList()
        }
    }

    suspend fun getRezervasyon(): List<Rezervasyon> = withContext(Dispatchers.IO) {
        val geturl = url+"getRezervasyon"
        val request = okhttp3.Request.Builder()
            .url(geturl)
            .get()
            .build()
        val client = OkHttpClient()
        val response = client.newCall(request).execute()

        if (response.isSuccessful) {
            val json = response.body?.string()
            // JSON verisini işleyin
            val gson = Gson()
            val responseJson = gson.fromJson(json, ApiResponseRezervasyon::class.java)
            responseJson?.rezervasyon ?: emptyList()
        } else {
            emptyList()
        }
    }
    suspend fun getMusteri(): List<Musteri> = withContext(Dispatchers.IO) {
        val geturl = url + "getMusteri"
        val request = okhttp3.Request.Builder()
            .url(geturl)
            .get()
            .build()
        val client = OkHttpClient()
        val response = client.newCall(request).execute()

        if (response.isSuccessful) {
            val json = response.body?.string()
            // JSON verisini işleyin
            val gson = Gson()
            val responseJson = gson.fromJson(json, ApiResponseMusteri::class.java)
            responseJson?.musteri ?: emptyList()
        } else {
            emptyList()
        }
    }

    /* suspend fun getOtel(): List<Otel> = withContext(Dispatchers.IO) {
       val geturl = url + "getOtel"
       val request = okhttp3.Request.Builder()
           .url(geturl)
           .get()
           .build()
       val client = OkHttpClient()
       val response = client.newCall(request).execute()

       if (response.isSuccessful) {
           val json = response.body?.string()
           // JSON verisini işleyin
           val gson = Gson()
           val responseJson = gson.fromJson(json, ApiResponseOtel::class.java)
           responseJson?.otel ?: emptyList()
       } else {
           emptyList()
       }
   }*/
    /* suspend fun getYurtDisiTur(): List<YurtdisiTur> = withContext(Dispatchers.IO) {
     val geturl = url + "getYurtdisiTur"
     val request = okhttp3.Request.Builder()
         .url(geturl)
         .get()
         .build()
     val client = OkHttpClient()
     val response = client.newCall(request).execute()

     if (response.isSuccessful) {
         val json = response.body?.string()
         // JSON verisini işleyin
         val gson = Gson()
         val responseJson = gson.fromJson(json, ApiResponseYurtD::class.java)
         responseJson?.yurtdisitur ?: emptyList()
     } else {
         emptyList()
     }
 }*/
    /* suspend fun getTekneTur(): List<TekneTur> = withContext(Dispatchers.IO) {
         val geturl = url + "getTekneTur"
         val request = okhttp3.Request.Builder()
             .url(geturl)
             .get()
             .build()
         val client = OkHttpClient()
         val response = client.newCall(request).execute()

         if (response.isSuccessful) {
             val json = response.body?.string()
             // JSON verisini işleyin
             val gson = Gson()
             val responseJson = gson.fromJson(json, ApiResponseTekneT::class.java)
             responseJson?.teknetur ?: emptyList()
         } else {
             emptyList()
         }
     }*/
    /* suspend fun getbyHizmetBilgisi(id:Int): List<HizmetBilgisi> = withContext(Dispatchers.IO) {
     val geturl = url+"getHizmetBilgisi&id=${id}"
     val request = okhttp3.Request.Builder()
         .url(geturl)
         .get()
         .build()
     val client = OkHttpClient()
     val response = client.newCall(request).execute()
     if (response.isSuccessful) {
         val json = response.body?.string()
         // JSON verisini işleyin
         val gson = Gson()
         val responseJson = gson.fromJson(json, ApiResponseHizmetBilgisi::class.java)
         responseJson?.hizmetbilgisi ?: emptyList()
     } else {
         emptyList()
     }
 }*/
    /* suspend fun getbyturprogrami(id:String): List<TurProgrami> = withContext(Dispatchers.IO) {
     val geturl = url+"getTurProgrami&id=${id}"
     val request = okhttp3.Request.Builder()
         .url(geturl)
         .get()
         .build()
     val client = OkHttpClient()
     val response = client.newCall(request).execute()
     if (response.isSuccessful) {
         val json = response.body?.string()
         // JSON verisini işleyin
         val gson = Gson()
         val responseJson = gson.fromJson(json, ApiResponseTurProgrami::class.java)
         responseJson?.turprogrami ?: emptyList()
     } else {
         emptyList()
     }
 }*/



}package com.muhammetcakir.turizmacentasi


import android.app.DatePickerDialog
import android.app.Dialog
import android.content.Intent
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.os.Bundle
import android.transition.AutoTransition
import android.transition.TransitionManager
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.cardview.widget.CardView

import androidx.recyclerview.widget.LinearLayoutManager

import com.muhammetcakir.turizmacentasi.Adapters.PopulerBolgeAdapters
import com.muhammetcakir.turizmacentasi.Adapters.TatilTemalariAdapters
import com.muhammetcakir.turizmacentasi.ClickListener.Clickpopulerbolgeler
import com.muhammetcakir.turizmacentasi.ClickListener.Clicktema
import com.muhammetcakir.turizmacentasi.Database.DbServices
import com.muhammetcakir.turizmacentasi.Database.musteriListesi

import com.muhammetcakir.turizmacentasi.Models.*
import com.muhammetcakir.turizmacentasi.Views.*
import com.muhammetcakir.turizmacentasi.databinding.ActivityMainBinding
import id.ionbit.ionalert.IonAlert
import kotlinx.coroutines.*

import java.text.SimpleDateFormat
import java.util.*
import kotlin.collections.ArrayList


var otelviewListesi=ArrayList<OtelView>()

var popotelviewListesi=ArrayList<OtelView>()
var yurtdisiviewListesi=ArrayList<YurtDisiTurView>()
var tekneturviewListesi=ArrayList<TekneTurView>()
var kullanankisi=ArrayList<Musteri>()
val populerBolgelerArrayList: ArrayList<PopulerBolgeler> = ArrayList()
val tatiltemalariArrayList: ArrayList<TatilTemalari> = ArrayList()


val YDT_ID_EXTRA = "ydtextra"
val TT_ID_EXTRA = "ttextra"
val TP_ID_EXTRA = "turprogramiextra"
val OTEL_ID_EXTRA = "otelextra"
val ODA_EXTRA = "odaextra"
val REZ_ID_EXRTRA="rezextra"
val POP_ID_EXRTRA="popextra"
val TEMA_ID_EXRTRA="temaextra"

var suankullanicivarmi = false

class MainActivity : AppCompatActivity(),Clickpopulerbolgeler,Clicktema {

    private lateinit var binding: ActivityMainBinding
    var yetiskinsayi2 = 1
    var cocuksayi2 = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()

        runBlocking {

            val db=DbServices()

            yurtdisiviewListesi.clear()
            val deferred4 = async {
                db.getYurtdisiturView()
            }
            val yeniyurtdisiviewListesi = deferred4.await()
            yurtdisiviewListesi.addAll(yeniyurtdisiviewListesi)

            tekneturviewListesi.clear()
            val deferred5 = async {
                db.getTekneturView()
            }
            val yenitekneturviewListesi = deferred5.await()
            tekneturviewListesi.addAll(yenitekneturviewListesi)

            otelviewListesi.clear()
            val deferred6 = async {
                db.getOtelView()
            }
            val yeniotelviewListesi = deferred6.await()
            otelviewListesi.addAll(yeniotelviewListesi)

        }
        if (populerBolgelerArrayList.isEmpty())
        {
            populerbolgeekle()
        }
        if (tatiltemalariArrayList.isEmpty())
        {
            tatiltemasiekle()
        }
        binding.rcpopulerbolgeler.apply {
            layoutManager = LinearLayoutManager(this@MainActivity, LinearLayoutManager.HORIZONTAL,false)
            adapter = PopulerBolgeAdapters(populerBolgelerArrayList,this@MainActivity)
            binding.rcpopulerbolgeler.adapter = adapter
            binding.rcpopulerbolgeler.layoutManager=layoutManager
        }

        binding.rctatiltemalari.apply {
            layoutManager = LinearLayoutManager(this@MainActivity, LinearLayoutManager.HORIZONTAL,false)
            adapter = TatilTemalariAdapters(tatiltemalariArrayList,this@MainActivity)
            binding.rctatiltemalari.adapter = adapter
            binding.rctatiltemalari.layoutManager=layoutManager
        }
        runBlocking {
            musteriListesi.clear()
            val db= DbServices()
            val deferred = async {
                db.getMusteri()
            }
            val yenimusteriListesi = deferred.await()
            musteriListesi.addAll(yenimusteriListesi)
        }
        if (suankullanicivarmi==true)
        {
            if(suankikullanicieposta=="1")
            {

            }
            else{
                kullanankisi.clear()
                for(musteri in musteriListesi)
                {
                    if (musteri.epostaAdresi.toString()== suankikullanicieposta.toString())
                    {
                        kullanankisi.add(musteri)
                    }
                }

            }
        }

        val mycalender = Calendar.getInstance()
        val datePicker = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
            mycalender.set(Calendar.YEAR, year)
            mycalender.set(Calendar.MONTH, month)
            mycalender.set(Calendar.DAY_OF_MONTH, dayOfMonth)
            updateLable(mycalender)
        }
        binding.giristarihisec.setOnClickListener {
            DatePickerDialog(
                this, datePicker, mycalender.get(Calendar.YEAR), mycalender.get(Calendar.MONTH),
                mycalender.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
        val mycalender2 = Calendar.getInstance()
        val datePicker2 = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
            mycalender2.set(Calendar.YEAR, year)
            mycalender2.set(Calendar.MONTH, month)
            mycalender2.set(Calendar.DAY_OF_MONTH, dayOfMonth)
            updateLable2(mycalender2)
        }
        binding.cikistarihisec.setOnClickListener {
            DatePickerDialog(
                this, datePicker2, mycalender2.get(Calendar.YEAR), mycalender2.get(Calendar.MONTH),
                mycalender2.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
        binding.hizmetlerimizbtn.setOnClickListener {
            if (binding.layout.visibility == View.GONE) {
                TransitionManager.beginDelayedTransition(binding.cardview, AutoTransition())
                binding.layout.visibility = View.VISIBLE
            } else {
                TransitionManager.beginDelayedTransition(binding.cardview, AutoTransition())
                binding.layout.visibility = View.GONE
            }
        }
        binding.populerbolgelerbtn.setOnClickListener {
            if (binding.layout2.visibility == View.GONE) {
                TransitionManager.beginDelayedTransition(binding.cardview2, AutoTransition())
                binding.layout2.visibility = View.VISIBLE
            } else {
                TransitionManager.beginDelayedTransition(binding.cardview2, AutoTransition())
                binding.layout2.visibility = View.GONE
            }
        }
        binding.tatiltemalaribtn.setOnClickListener {
            if (binding.layout3.visibility == View.GONE) {
                TransitionManager.beginDelayedTransition(binding.cardview3, AutoTransition())
                binding.layout3.visibility = View.VISIBLE
            } else {
                TransitionManager.beginDelayedTransition(binding.cardview3, AutoTransition())
                binding.layout3.visibility = View.GONE
            }
        }

        binding.otelarabtn.setOnClickListener {
            val intent = Intent(this, OtellerActivity::class.java)
            intent.putExtra("Name","Otel")
            startActivity(intent)
            finish()
        }

        binding.yurtdisilayout.setOnClickListener {
            val intent = Intent(this, OtellerActivity::class.java)
            intent.putExtra("Name","YurtDisi")
            startActivity(intent)
            finish()
        }
        binding.gemilayout.setOnClickListener {
            val intent = Intent(this, OtellerActivity::class.java)
            intent.putExtra("Name","Tekne")
            startActivity(intent)
            finish()
        }
        binding.otellayout.setOnClickListener {
            val intent = Intent(this, OtellerActivity::class.java)
            intent.putExtra("Name","Otel")
            startActivity(intent)
            finish()
        }


        binding.kisisayisisec.setOnClickListener {
            val dialogbinding = layoutInflater.inflate(R.layout.kisisecimdialog, null)
            val mydialog = Dialog(this)
            mydialog.setContentView(dialogbinding)
            mydialog.setCancelable(true)
            mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
            mydialog.show()
            val yetiskinarti = dialogbinding.findViewById<ImageView>(R.id.yetiskinekle)
            val yetiskineksi = dialogbinding.findViewById<ImageView>(R.id.yetiskincikar)
            val yetiskinsayi = dialogbinding.findViewById<TextView>(R.id.yetiskinsayi)
            val cocukarti = dialogbinding.findViewById<ImageView>(R.id.cocukekle)
            val cocukeksi = dialogbinding.findViewById<ImageView>(R.id.cocukcikar)
            val cocuksayi = dialogbinding.findViewById<TextView>(R.id.cocuksayi)
            val onayla = dialogbinding.findViewById<CardView>(R.id.onaylaa)

            yetiskinarti.setOnClickListener {
                yetiskinsayi2 = (yetiskinsayi.text.toString()).toInt()
                do {
                    if (yetiskinsayi2 < 5) {
                        yetiskinsayi2 = yetiskinsayi2 + 1
                        if (yetiskinsayi2 == 4) {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Dikkat!")
                                .setContentText("Bir Rezervasyonda en fazla 4 Yetişkin Seçebilirsin.")
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                    }
                } while (yetiskinsayi2 == 5)
                yetiskinsayi.setText(yetiskinsayi2.toString())
            }
            yetiskineksi.setOnClickListener {

                yetiskinsayi2 = (yetiskinsayi.text.toString()).toInt()
                yetiskinsayi2 = yetiskinsayi2 - 1
                yetiskinsayi.text = (yetiskinsayi2.toString())
            }
            cocukeksi.setOnClickListener {

                cocuksayi2 = (cocuksayi.text.toString()).toInt()
                cocuksayi2 = cocuksayi2 - 1
                cocuksayi.text = (cocuksayi2.toString())
            }
            cocukarti.setOnClickListener {

                cocuksayi2 = (cocuksayi.text.toString()).toInt()

                do {
                    if (cocuksayi2 < 5) {
                        cocuksayi2 = cocuksayi2 + 1
                        if (cocuksayi2 == 4) {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Dikkat!")
                                .setContentText("Bir Rezervasyonda en fazla 4 Çocuk Seçebilirsin.")
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                    }
                } while (cocuksayi2 == 5)

                cocuksayi.setText(cocuksayi2.toString())

            }
            onayla.setOnClickListener {
                mydialog.dismiss()
                binding.kisisayisi.text=(yetiskinsayi.text.toString() +" Yetişkin,"+cocuksayi.text.toString()+" Çocuk")
                binding.kisisayisi.visibility=View.VISIBLE
            }

        }
        binding.bottomNavigation.setSelectedItemId(R.id.anasayfa)
        binding.bottomNavigation.setOnItemSelectedListener { item ->
            when (item.getItemId()) {
                R.id.anasayfa-> return@setOnItemSelectedListener true
                R.id.reserve -> {
                    startActivity(Intent(applicationContext, OtellerActivity::class.java))
                    overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
                    finish()
                    return@setOnItemSelectedListener true
                }
                R.id.profil -> {
                    startActivity(Intent(applicationContext, ProfileActivity::class.java))
                    overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
                    finish()
                    return@setOnItemSelectedListener true
                }
            }
            false
        }
    }

    fun populerbolgeekle()
    {
        val alanya=PopulerBolgeler(
            "Alanya",
            R.drawable.alanya
        )
        populerBolgelerArrayList.add(alanya)
        val alacati=PopulerBolgeler(
            "Alaçatı",
            R.drawable.alacati
        )
        populerBolgelerArrayList.add(alacati)
        val bodrum=PopulerBolgeler(
            "Bodrum",
            R.drawable.bodrum
        )
        populerBolgelerArrayList.add(bodrum)
        val canakkale=PopulerBolgeler(
            "Çanakkale",
            R.drawable.canakkale
        )
        populerBolgelerArrayList.add(canakkale)
        val didim=PopulerBolgeler(
            "Didim",
            R.drawable.didim
        )
        populerBolgelerArrayList.add(didim)
        val fethiye=PopulerBolgeler(
            "Fethiye",
            R.drawable.fethiye
        )
        populerBolgelerArrayList.add(fethiye)
        val kapadokya=PopulerBolgeler(
            "Kapadokya",
            R.drawable.kapodokya
        )
        populerBolgelerArrayList.add(kapadokya)
        val kusadasi=PopulerBolgeler(
            "Kuşadası",
            R.drawable.kusadasi
        )
        populerBolgelerArrayList.add(kusadasi)
        val pamukkale=PopulerBolgeler(
            "Pamukkale",
            R.drawable.pamukkale
        )
        populerBolgelerArrayList.add(pamukkale)
    }

    fun tatiltemasiekle()
    {
        var besyildizlioteller=TatilTemalari(
            "Termal Otel",
            R.drawable.besyildizlioteller
        )
        tatiltemalariArrayList.add(besyildizlioteller)

        var balayi=TatilTemalari(
            "Balayı Otel",
            R.drawable.balayiotelleri
        )
        tatiltemalariArrayList.add(balayi)

        var denizli=TatilTemalari(
            "Butik Otel",
            R.drawable.denizli
        )
        tatiltemalariArrayList.add(denizli)

        var tarihi=TatilTemalari(
            "Şehir Otel",
            R.drawable.tarihi
        )
        tatiltemalariArrayList.add(tarihi)

        var tekne=TatilTemalari(
            "Tatil Köyü",
            R.drawable.tekneturu
        )
        tatiltemalariArrayList.add(tekne)

    }
    private fun updateLable(mycalender: Calendar) {
        val sdf = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        binding.giristarihi.text = sdf.format(mycalender.time)
        binding.giristarihi.visibility=View.VISIBLE
    }
    private fun updateLable2(mycalender2: Calendar) {
        val sdf2 = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        binding.cikistarihi.text = sdf2.format(mycalender2.time)
        binding.cikistarihi.visibility=View.VISIBLE
    }

    override fun onclickpopuler(populerBolgeler: PopulerBolgeler) {
        val intent = Intent(applicationContext, OtellerActivity::class.java)
        intent.putExtra(POP_ID_EXRTRA, populerBolgeler.sehiradi)
        startActivity(intent)
    }

    override fun onclicktema(tatilTemalari: TatilTemalari) {
        val intent = Intent(applicationContext, OtellerActivity::class.java)
        intent.putExtra(TEMA_ID_EXRTRA, tatilTemalari.temaadi)
        startActivity(intent)
    }
}
data class ApiResponse(
    val error: Boolean,
    val otel: List<Otel>
)

data class Otel(
    val idOtel: Int,
    val adi: String,
    val adres: String,
    val resim: String
)
package com.muhammetcakir.turizmacentasi.Views

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.View
import com.muhammetcakir.turizmacentasi.Database.musteriListesi
import com.muhammetcakir.turizmacentasi.MainActivity
import com.muhammetcakir.turizmacentasi.databinding.ActivityGirisYapBinding
import com.muhammetcakir.turizmacentasi.suankullanicivarmi

class GirisYapActivity : AppCompatActivity() {
    private lateinit var binding: ActivityGirisYapBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding= ActivityGirisYapBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()
        binding.btnkayitol.setOnClickListener {
            startActivity(Intent(this,KayitOlActivity::class.java))
        }

        binding.btngirisyap.setOnClickListener {

            for (musteri in musteriListesi) {
                if (musteri.epostaAdresi.toString() == binding.girisyapeposta.text.toString() && musteri.sifre.toString() == binding.girisyapsifre.text.toString()) {
                    suankullanicivarmi = true
                    suankikullanicieposta = binding.girisyapeposta.text.toString()
                    break
                }
            }

            if (suankullanicivarmi) {
                startActivity(Intent(this, MainActivity::class.java))
            } else {
                binding.idgirisdurum.visibility = View.VISIBLE
            }
        }
    }
}
package com.muhammetcakir.turizmacentasi.Views

import android.app.DatePickerDialog
import android.content.Intent
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.annotation.RequiresApi
import com.muhammetcakir.turizmacentasi.Database.DbServices
import com.muhammetcakir.turizmacentasi.Database.musteriListesi
import com.muhammetcakir.turizmacentasi.Database.rezervasyonListesi
import com.muhammetcakir.turizmacentasi.MainActivity
import com.muhammetcakir.turizmacentasi.Models.Musteri
import com.muhammetcakir.turizmacentasi.Models.TurProgrami
import com.muhammetcakir.turizmacentasi.R
import com.muhammetcakir.turizmacentasi.databinding.ActivityKayitOlBinding
import com.muhammetcakir.turizmacentasi.kullanankisi
import com.muhammetcakir.turizmacentasi.suankullanicivarmi
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.async
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request
import java.text.SimpleDateFormat
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.*

var suankikullanicieposta="1"
class KayitOlActivity : AppCompatActivity() {
    private lateinit var binding:ActivityKayitOlBinding
    private val url = "http://192.168.1.122/turizmacentasi/v1/?op="
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding= ActivityKayitOlBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()
        runBlocking {
            musteriListesi.clear()
            val db= DbServices()
            val deferred = async {
                db.getMusteri()
            }
            val yenimusteriListesi = deferred.await()
            musteriListesi.addAll(yenimusteriListesi)
            println("AAAAAAAMUSTERİ"+ musteriListesi.count().toString())
        }
        binding.btngirisyap.setOnClickListener {
            startActivity(Intent(this,GirisYapActivity::class.java))
        }
        val mycalender = Calendar.getInstance()
        val datePicker = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
            mycalender.set(Calendar.YEAR, year)
            mycalender.set(Calendar.MONTH, month)
            mycalender.set(Calendar.DAY_OF_MONTH, dayOfMonth)
            updateLable(mycalender)
        }
        binding.dogumtarihibtn.setOnClickListener {
            DatePickerDialog(
                this, datePicker, mycalender.get(Calendar.YEAR), mycalender.get(Calendar.MONTH),
                mycalender.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
        binding.btnkayitol.setOnClickListener {
            val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale("tr"))
            val formattedDateTime = sdf.format(mycalender.time)
            var epostaVarMi = false

            for (musteri in musteriListesi) {
                if (musteri.epostaAdresi.toString() == binding.kayitoleposta.text.toString()) {
                    epostaVarMi = true
                    break
                }
            }
            if (epostaVarMi==true)
            {
                binding.kayitoldurum.visibility = View.VISIBLE
            }
            else
            {
                postkayitol(
                    binding.kayitolisim.text.toString(),
                    binding.kayitolsoyisim.text.toString(),
                    binding.kayitoleposta.text.toString(),
                    formattedDateTime.toString(),
                    binding.kayitoltelno.text.toString(),
                    binding.kayitolsifre.text.toString()
                )
                suankikullanicieposta= binding.kayitoleposta.text.toString()
                suankullanicivarmi=true
                startActivity(Intent(this,MainActivity::class.java))

            }
        }
    }
    private fun postkayitol(
        adi: String,
        soyadi: String,
        eposta: String,
        dogumt: String,
        telno: String,
        sifre: String
    ) {
        GlobalScope.launch {
            val client = OkHttpClient()
            val formBody = FormBody.Builder()
                .add("adi",adi )
                .add("soyadi",soyadi)
                .add("epostaAdresi", eposta)
                .add("dogumTarihi",dogumt)
                .add("telefonNumarasi",telno)
                .add("sifre", sifre)
                .build()
            val request = Request.Builder()
                .url(url + "createMusteri")
                .post(formBody)
                .build()
            val response = client.newCall(request).execute()
            Log.d("response", response.toString())
        }
    }
    private fun updateLable(mycalender: Calendar) {
        val sdf = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        binding.kayitoldogumtarihi.setText(sdf.format(mycalender.time))

    }
}


package com.muhammetcakir.turizmacentasi.Views

import android.app.DatePickerDialog
import android.content.Intent
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log

import androidx.annotation.RequiresApi

import com.muhammetcakir.turizmacentasi.databinding.ActivityMyAccountBinding
import com.muhammetcakir.turizmacentasi.kullanankisi

import kotlinx.coroutines.*
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request
import java.io.BufferedReader
import java.io.InputStreamReader
import java.net.HttpURLConnection
import java.net.URL
import java.net.URLEncoder
import java.text.SimpleDateFormat
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.*

class MyAccountActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMyAccountBinding
    private val url = "http://192.168.1.122/turizmacentasi/v1/?op="

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMyAccountBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()



            binding.kullaniciisim.setText(kullanankisi[0].adi.toString())
            binding.kullanicisoyisim.setText(kullanankisi[0].soyadi.toString())
            binding.kullanicieposta.setText(kullanankisi[0].epostaAdresi.toString())
            binding.kullanicisifre.setText(kullanankisi[0].sifre.toString())
        val formatter =
            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
        val dtarihi = LocalDate.parse(kullanankisi[0].dogumTarihi.toString(), formatter)
        val cikistarihiFormatter =
            DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
        val cikistarihi = dtarihi.format(cikistarihiFormatter)

            binding.kullanicidogumtarihi.setText(cikistarihi.toString())
            binding.kullanicitelno.setText(kullanankisi[0].telefonNumarasi.toString())

            val mycalender = Calendar.getInstance()
            val datePicker = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
                mycalender.set(Calendar.YEAR, year)
                mycalender.set(Calendar.MONTH, month)
                mycalender.set(Calendar.DAY_OF_MONTH, dayOfMonth)
                updateLable(mycalender)
            }
            binding.dogumtbtn.setOnClickListener {
                DatePickerDialog(
                    this, datePicker, mycalender.get(Calendar.YEAR), mycalender.get(Calendar.MONTH),
                    mycalender.get(Calendar.DAY_OF_MONTH)
                ).show()
            }
            binding.guncellebtn.setOnClickListener {
                val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                val dogumt = sdf.format(mycalender.time)

                UpdateMy(
                    kullanankisi[0].idMusteri,
                    binding.kullaniciisim.text.toString(),
                    binding.kullanicisoyisim.text.toString(),
                    binding.kullanicisifre.text.toString(),
                    binding.kullanicitelno.text.toString(),
                    binding.kullanicieposta.text.toString(),
                    dogumt.toString()

                )
                postt()
                println("XXXXXXXX"+dogumt.toString())
            }

    }

    private fun UpdateMy(
        id: String,
        adi: String,
        soyadi: String,
        sifre: String,
        telno: String,
        eposta: String,
        dogumtarihi: String
    ) {
        GlobalScope.launch {
            val client = OkHttpClient()
            val formBody = FormBody.Builder()
                .add("id", id.toString())
                .add("adi", adi.toString())
                .add("soyadi", soyadi.toString())
                .add("sifre", sifre.toString())
                .add("telefonNumarasi", telno.toString())
                .add("epostaAdresi", eposta.toString())
                .add("dogumTarihi", dogumtarihi.toString())
                .build()
            val request = Request.Builder()
                .url(url+"updateMusteri")
                .post(formBody)
                .build()
            val response = client.newCall(request).execute()

            Log.d("response", response.toString())
        }

    }

    private  fun postt() {
        GlobalScope.launch {
        try {
            val urlHizmet = URL(url + "updateMusteri")
            val conn = withContext(Dispatchers.IO) {
                urlHizmet.openConnection() as HttpURLConnection
            }
            conn.readTimeout = 10000
            conn.connectTimeout = 15000
            conn.requestMethod = "POST"
            conn.doInput = true
            conn.doOutput = true

            val postData = StringBuilder().apply {
                append(URLEncoder.encode("id", "UTF-8"))
                    .append("=")
                    .append(URLEncoder.encode("4", "UTF-8"))
                append(URLEncoder.encode("adi", "UTF-8"))
                    .append("=")
                    .append(URLEncoder.encode("Mustafa", "UTF-8"))
                append("&")
                append(URLEncoder.encode("soyadi", "UTF-8"))
                    .append("=")
                    .append(URLEncoder.encode("Çakır", "UTF-8"))
                append("&")
                append(URLEncoder.encode("sifre", "UTF-8"))
                    .append("=")
                    .append(URLEncoder.encode("musti123456", "UTF-8"))
                append("&")
                append(URLEncoder.encode("telefonNumarasi", "UTF-8"))
                    .append("=")
                    .append(URLEncoder.encode("123456789", "UTF-8"))
                append("&")
                append(URLEncoder.encode("epostaAdresi", "UTF-8"))
                    .append("=")
                    .append(URLEncoder.encode("mustafa@gmail.com", "UTF-8"))
                append(URLEncoder.encode("dogumTarihi", "UTF-8"))
                    .append("=")
                    .append(URLEncoder.encode("2023-10-10 21:17:09", "UTF-8"))
            }

            val postDataBytes = postData.toString().toByteArray(Charsets.UTF_8)
            conn.setRequestProperty("Content-Length", postDataBytes.size.toString())
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")
            withContext(Dispatchers.IO) {
                conn.connect()
                conn.outputStream.use { outputStream ->
                    outputStream.write(postDataBytes)
                    outputStream.flush()
                }

                val responseCode = conn.responseCode
                if (responseCode == HttpURLConnection.HTTP_OK) {
                    val inputStream = conn.inputStream
                    val bufferedReader = BufferedReader(InputStreamReader(inputStream))
                    val response = StringBuilder()
                    var line: String?
                    while (bufferedReader.readLine().also { line = it } != null) {
                        response.append(line)
                    }
                    Log.d("response", response.toString())
                }
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }
        }
    }




    private fun updateLable(mycalender: Calendar) {
        val sdf = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        binding.kullanicidogumtarihi.text = sdf.format(mycalender.time)
    }

}
package com.muhammetcakir.turizmacentasi.Views

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import com.muhammetcakir.turizmacentasi.*

import com.muhammetcakir.turizmacentasi.Models.OtelView

import com.muhammetcakir.turizmacentasi.databinding.ActivityOteldetayBinding
import com.squareup.picasso.Picasso
import id.ionbit.ionalert.IonAlert

class OteldetayActivity : AppCompatActivity() {
    private lateinit var binding: ActivityOteldetayBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityOteldetayBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()

        val otelId = intent.getStringExtra(OTEL_ID_EXTRA)
        val otel = otelID(otelId.toString())
        if (otel != null) {

                    binding.standartbtn.setOnClickListener {
                        if(kullanankisi.isEmpty())
                        {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                                .setConfirmText("Giriş Yap")
                                .setCancelText("Kapat")
                                .setConfirmClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {

                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                        else
                        {
                            val intent = Intent(this, RezervasyonActivity::class.java)
                            intent.putExtra(TP_ID_EXTRA, "Otel")
                            intent.putExtra(OTEL_ID_EXTRA, otel.idOtel.toString())
                            intent.putExtra(ODA_EXTRA, "1")
                            startActivity(intent)
                            finish()
                        }

                    }
                    binding.denizbtn.setOnClickListener {
                        if(kullanankisi.isEmpty())
                        {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                                .setConfirmText("Giriş Yap")
                                .setCancelText("Kapat")
                                .setConfirmClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {

                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                        else
                        {
                            if(kullanankisi.isEmpty())
                            {
                                IonAlert(this, IonAlert.WARNING_TYPE)
                                    .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                                    .setConfirmText("Giriş Yap")
                                    .setCancelText("Kapat")
                                    .setConfirmClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .setCancelClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {

                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .show()
                            }
                            else{
                                val intent = Intent(this, RezervasyonActivity::class.java)
                                intent.putExtra(TP_ID_EXTRA, "Otel")
                                intent.putExtra(OTEL_ID_EXTRA, otel.idOtel.toString())
                                intent.putExtra(ODA_EXTRA, "2")
                                startActivity(intent)
                                finish()
                            }

                        }

                    }
                    binding.suiteodabtn.setOnClickListener {
                        if(kullanankisi.isEmpty())
                        {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                                .setConfirmText("Giriş Yap")
                                .setCancelText("Kapat")
                                .setConfirmClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {

                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                        else{
                            val intent = Intent(this, RezervasyonActivity::class.java)
                            intent.putExtra(TP_ID_EXTRA, "Otel")
                            intent.putExtra(OTEL_ID_EXTRA, otel.idOtel.toString())
                            intent.putExtra(ODA_EXTRA, "3")
                            startActivity(intent)
                            finish()
                        }
                    }
                    Picasso.get().load(otel.resimUrl).into(binding.cover)
                    binding.otelad.text = otel.adi.toString()
                    binding.otelkonum.text = otel.adres.toString()
                    binding.oteltema.text = otel.tema.toString()
                    binding.otelpuan.text = otel.puan.toString()
                    binding.standartodafiyat.text = otel.fiyat.toString() + " TL"
                    binding.suiteodafiyat.text = ((otel.fiyat) * 2).toString() + " TL"
                    binding.ManzaralOdafiyat.text = ((otel.fiyat) * 1.5).toString() + " TL"
        }
    }
    private fun otelID(otelId: String): OtelView? {
        for (otel in otelviewListesi) {
            if (otel.idOtel.toString() == otelId.toString())
                return otel
        }
        return null
    }
}
package com.muhammetcakir.turizmacentasi.Views

import android.app.Dialog
import android.content.Intent
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.transition.AutoTransition
import android.transition.TransitionManager
import android.view.View
import android.widget.*
import androidx.cardview.widget.CardView
import androidx.recyclerview.widget.LinearLayoutManager
import com.muhammetcakir.turizmacentasi.*
import com.muhammetcakir.turizmacentasi.Adapters.OtellerAdapter
import com.muhammetcakir.turizmacentasi.Adapters.TekneTurAdapter
import com.muhammetcakir.turizmacentasi.Adapters.YurtDisiTurAdapter
import com.muhammetcakir.turizmacentasi.ClickListener.ClicktekneTur
import com.muhammetcakir.turizmacentasi.ClickListener.Clicktotel
import com.muhammetcakir.turizmacentasi.ClickListener.ClickyurtDisiTurView

import com.muhammetcakir.turizmacentasi.Models.*

import com.muhammetcakir.turizmacentasi.databinding.ActivityOtellerBinding

class OtellerActivity: AppCompatActivity(),ClickyurtDisiTurView,ClicktekneTur,Clicktotel{

    private lateinit var binding: ActivityOtellerBinding

    override fun onCreate(savedInstanceState: Bundle?)
    {
        super.onCreate(savedInstanceState)
        binding= ActivityOtellerBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()

        binding.bottomNavigation.setSelectedItemId(R.id.reserve)
        binding.bottomNavigation.setOnItemSelectedListener { item ->
            when (item.getItemId()) {
                R.id.anasayfa -> {
                    startActivity(Intent(applicationContext, MainActivity::class.java))
                    overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
                    finish()
                    return@setOnItemSelectedListener true
                }
                R.id.reserve -> {

                    return@setOnItemSelectedListener true
                }
                R.id.profil -> {
                    startActivity(Intent(applicationContext, ProfileActivity::class.java))
                    overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
                    finish()
                    return@setOnItemSelectedListener true
                }
            }
            false
        }
        val popId = intent.getStringExtra(POP_ID_EXRTRA)
        val pop = POPID(popId.toString())
        val temaId = intent.getStringExtra(TEMA_ID_EXRTRA)
        val tema = temaID(temaId.toString())
        val name = intent.getStringExtra("Name")
        if (name=="Otel")
        {
            binding.turadi.text="Oteller"
            binding.toplamtesis.text="Toplam ${otelviewListesi.count()} Otel Tesisi Bulduk!"

            binding.rchizmetler.apply {
                layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                adapter = OtellerAdapter(
                    otelviewListesi,
                    context,this@OtellerActivity)
                binding.rchizmetler.adapter = adapter
                binding.rchizmetler.layoutManager=layoutManager
            }

            var arananotel=ArrayList<OtelView>()
            var genelliste=ArrayList<OtelView>()
            binding.filtrelebtn.setOnClickListener {
                arananotel.clear()
                genelliste.addAll(otelviewListesi)
                val dialogbinding=layoutInflater.inflate(R.layout.filtrele_otel_dialog,null)
                val mydialog= Dialog(this)
                mydialog.setContentView(dialogbinding)
                mydialog.setCancelable(true)
                mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
                mydialog.show()

                val checkaltiustu=dialogbinding.findViewById<CheckBox>(R.id.altiveustu)
                val checkyediustu=dialogbinding.findViewById<CheckBox>(R.id.yediveustu)
                val checksekizustu=dialogbinding.findViewById<CheckBox>(R.id.sekizveustu)
                val checkdokuzustu=dialogbinding.findViewById<CheckBox>(R.id.dokuzveustu)
                val balayiotelleri=dialogbinding.findViewById<CheckBox>(R.id.balayioteller)
                val butikoteller=dialogbinding.findViewById<CheckBox>(R.id.butikoteller)
                val termaloteller=dialogbinding.findViewById<CheckBox>(R.id.termaloteller)
                val sehiroteller=dialogbinding.findViewById<CheckBox>(R.id.sehirotel)
                val tatilkoyleri=dialogbinding.findViewById<CheckBox>(R.id.tatilkoyleri)
                val minfiyat=dialogbinding.findViewById<EditText>(R.id.minfiyat)
                val maxfiyat=dialogbinding.findViewById<EditText>(R.id.maxfiyat)


                val cikisbtn=dialogbinding.findViewById<ImageView>(R.id.cikisfiltrele)
                val onaylabtn=dialogbinding.findViewById<CardView>(R.id.filtreleonaylabtn)

                val puanrlayoutbtn=dialogbinding.findViewById<RelativeLayout>(R.id.puanagorefiltbtn)
                val fiyatrlayoutbtn=dialogbinding.findViewById<RelativeLayout>(R.id.fiyatagorefiltbtn)
                val tatiltemarlayoutbtn=dialogbinding.findViewById<RelativeLayout>(R.id.tatiltemasinafiltrebtn)


                val layoutpuan=dialogbinding.findViewById<LinearLayout>(R.id.layoutpuanagore)
                val layoutfiyat=dialogbinding.findViewById<LinearLayout>(R.id.layoutfiyataralıgınagore)
                val layouttatiltema=dialogbinding.findViewById<LinearLayout>(R.id.layouttatiltemasi)


                val cardpuan=dialogbinding.findViewById<CardView>(R.id.cardviewpuanagore)
                val cardfiyat=dialogbinding.findViewById<CardView>(R.id.cardviewfiyataralıgı)
                val cardtatiltema=dialogbinding.findViewById<CardView>(R.id.cardviewtatiltemasi)

                onaylabtn.setOnClickListener {
                    var minFiyattext = minfiyat.text.toString().toIntOrNull()
                    var maxFiyattext = maxfiyat.text.toString().toIntOrNull()
                    val otelcheckboxList = listOf(checkaltiustu, checkyediustu, checksekizustu,checkdokuzustu,balayiotelleri,butikoteller,termaloteller,sehiroteller,tatilkoyleri)
                    val seciliCheckboxListesi = otelcheckboxList.filter { checkbox -> checkbox.isChecked }

                    if (seciliCheckboxListesi.isNotEmpty())
                    {
                        genelliste.filter { veri ->

                            if (checkaltiustu.isChecked && veri.puan>6)
                            {
                                 if (balayiotelleri.isChecked && veri.tema=="Balayı Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (termaloteller.isChecked && veri.tema=="Termal Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (butikoteller.isChecked && veri.tema=="Butik Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (sehiroteller.isChecked && veri.tema=="Şehir Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }

                                else{
                                    if (seciliCheckboxListesi.contains(checkyediustu) ||seciliCheckboxListesi.contains(checksekizustu)||seciliCheckboxListesi.contains(checkdokuzustu) ||seciliCheckboxListesi.contains(balayiotelleri)
                                        ||seciliCheckboxListesi.contains(tatilkoyleri)||seciliCheckboxListesi.contains(sehiroteller)||seciliCheckboxListesi.contains(butikoteller)||seciliCheckboxListesi.contains(termaloteller)
                                    )
                                    {

                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }

                                true
                            }
                             if (checkyediustu.isChecked && veri.puan>7)
                            {
                                 if (balayiotelleri.isChecked && veri.tema=="Balayı Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (termaloteller.isChecked && veri.tema=="Termal Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }
                                }
                                else if (butikoteller.isChecked && veri.tema=="Butik Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }
                                }
                                else if (sehiroteller.isChecked && veri.tema=="Şehir Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else{
                                    if (seciliCheckboxListesi.contains(checkaltiustu) ||seciliCheckboxListesi.contains(checksekizustu)||seciliCheckboxListesi.contains(checkdokuzustu) ||seciliCheckboxListesi.contains(balayiotelleri)
                                        ||seciliCheckboxListesi.contains(tatilkoyleri)||seciliCheckboxListesi.contains(sehiroteller)||seciliCheckboxListesi.contains(butikoteller)||seciliCheckboxListesi.contains(termaloteller)
                                    )
                                    {

                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }
                             if (checksekizustu.isChecked && veri.puan>8)
                            {
                                 if(balayiotelleri.isChecked && veri.tema=="Balayı Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (termaloteller.isChecked && veri.tema=="Termal Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }
                                }
                                else if (butikoteller.isChecked && veri.tema=="Butik Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }
                                }
                                else if (sehiroteller.isChecked && veri.tema=="Şehir Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else{
                                    if (seciliCheckboxListesi.contains(checkaltiustu) ||seciliCheckboxListesi.contains(checkyediustu)||seciliCheckboxListesi.contains(checkdokuzustu) ||seciliCheckboxListesi.contains(balayiotelleri)
                                        ||seciliCheckboxListesi.contains(tatilkoyleri)||seciliCheckboxListesi.contains(sehiroteller)||seciliCheckboxListesi.contains(butikoteller)||seciliCheckboxListesi.contains(termaloteller)
                                    )
                                    {

                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }
                             if (checkdokuzustu.isChecked && veri.puan>9)
                            {
                                if (balayiotelleri.isChecked && veri.tema=="Balayı Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (termaloteller.isChecked && veri.tema=="Termal Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }
                                }
                                else if (butikoteller.isChecked && veri.tema=="Butik Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }
                                }
                                else if (sehiroteller.isChecked && veri.tema=="Şehir Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else{
                                    if (seciliCheckboxListesi.contains(checkaltiustu) ||seciliCheckboxListesi.contains(checkyediustu)||seciliCheckboxListesi.contains(checksekizustu) ||seciliCheckboxListesi.contains(balayiotelleri)
                                        ||seciliCheckboxListesi.contains(tatilkoyleri)||seciliCheckboxListesi.contains(sehiroteller)||seciliCheckboxListesi.contains(butikoteller)||seciliCheckboxListesi.contains(termaloteller)
                                    )
                                    {

                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }

                            if(balayiotelleri.isChecked && veri.tema == "Balayı Otel")
                            {
                                if (checkyediustu.isChecked && veri.puan>7)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checksekizustu.isChecked && veri.puan>8)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkdokuzustu.isChecked && veri.puan>9)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkaltiustu.isChecked && veri.puan>6)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                 /*  else if (termaloteller.isChecked && veri.tema=="Termal Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (butikoteller.isChecked && veri.tema=="Butik Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (sehiroteller.isChecked && veri.tema=="Şehir Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                */
                                else{
                                    if (seciliCheckboxListesi.contains(checkaltiustu) ||seciliCheckboxListesi.contains(checkyediustu)||seciliCheckboxListesi.contains(checksekizustu) ||seciliCheckboxListesi.contains(checkdokuzustu)
                                        ||seciliCheckboxListesi.contains(tatilkoyleri)||seciliCheckboxListesi.contains(sehiroteller)||seciliCheckboxListesi.contains(butikoteller)||seciliCheckboxListesi.contains(termaloteller)
                                    )
                                    {
                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }
                            if(termaloteller.isChecked && veri.tema=="Termal Otel")
                            {
                                if (checkyediustu.isChecked && veri.puan>7)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checksekizustu.isChecked && veri.puan>8)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkdokuzustu.isChecked && veri.puan>9)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkaltiustu.isChecked && veri.puan>6)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                              /*  else if (balayiotelleri.isChecked && veri.tema == "Balayı Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (butikoteller.isChecked && veri.tema=="Butik Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (sehiroteller.isChecked && veri.tema=="Şehir Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }*/
                                else{
                                    if (seciliCheckboxListesi.contains(checkaltiustu) ||seciliCheckboxListesi.contains(checkyediustu)||seciliCheckboxListesi.contains(checksekizustu) ||seciliCheckboxListesi.contains(checkdokuzustu)
                                        ||seciliCheckboxListesi.contains(tatilkoyleri)||seciliCheckboxListesi.contains(sehiroteller)||seciliCheckboxListesi.contains(butikoteller)||seciliCheckboxListesi.contains(balayiotelleri)
                                    )
                                    {
                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }
                            if(butikoteller.isChecked && veri.tema=="Butik Otel")
                            {
                                if (checkyediustu.isChecked && veri.puan>7)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checksekizustu.isChecked && veri.puan>8)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkdokuzustu.isChecked && veri.puan>9)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkaltiustu.isChecked && veri.puan>6)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                               /* else if (balayiotelleri.isChecked && veri.tema == "Balayı Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (termaloteller.isChecked && veri.tema=="Termal Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (sehiroteller.isChecked && veri.tema=="Şehir Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }*/
                                else{
                                    if (seciliCheckboxListesi.contains(checkaltiustu) ||seciliCheckboxListesi.contains(checkyediustu)||seciliCheckboxListesi.contains(checksekizustu) ||seciliCheckboxListesi.contains(checkdokuzustu)
                                        ||seciliCheckboxListesi.contains(tatilkoyleri)||seciliCheckboxListesi.contains(sehiroteller)||seciliCheckboxListesi.contains(termaloteller)||seciliCheckboxListesi.contains(balayiotelleri)
                                    )
                                    {
                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }
                            if(sehiroteller.isChecked && veri.tema=="Şehir Otel")
                            {
                                if (checkyediustu.isChecked && veri.puan>7)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checksekizustu.isChecked && veri.puan>8)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkdokuzustu.isChecked && veri.puan>9)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkaltiustu.isChecked && veri.puan>6)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                               /* else if (balayiotelleri.isChecked && veri.tema == "Balayı Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (termaloteller.isChecked && veri.tema=="Termal Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (butikoteller.isChecked && veri.tema=="Butik Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }*/
                                else{
                                    if (seciliCheckboxListesi.contains(checkaltiustu) ||seciliCheckboxListesi.contains(checkyediustu)||seciliCheckboxListesi.contains(checksekizustu) ||seciliCheckboxListesi.contains(checkdokuzustu)
                                        ||seciliCheckboxListesi.contains(tatilkoyleri)||seciliCheckboxListesi.contains(butikoteller)||seciliCheckboxListesi.contains(termaloteller)||seciliCheckboxListesi.contains(balayiotelleri)
                                    )
                                    {
                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }
                            if(tatilkoyleri.isChecked && veri.tema=="Tatil Köyü")
                            {
                                if (checkyediustu.isChecked && veri.puan>7)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checksekizustu.isChecked && veri.puan>8)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkdokuzustu.isChecked && veri.puan>9)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (checkaltiustu.isChecked && veri.puan>6)
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                              /*  else if (balayiotelleri.isChecked && veri.tema == "Balayı Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (termaloteller.isChecked && veri.tema=="Termal Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (butikoteller.isChecked && veri.tema=="Butik Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }
                                else if (butikoteller.isChecked && veri.tema=="Şehir Otel")
                                {
                                    if (!arananotel.contains(veri))
                                    {
                                        arananotel.add(veri)
                                        true
                                    }

                                }*/
                                else{
                                    if (seciliCheckboxListesi.contains(checkaltiustu) ||seciliCheckboxListesi.contains(checkyediustu)||seciliCheckboxListesi.contains(checksekizustu) ||seciliCheckboxListesi.contains(checkdokuzustu)
                                        ||seciliCheckboxListesi.contains(sehiroteller)||seciliCheckboxListesi.contains(butikoteller)||seciliCheckboxListesi.contains(termaloteller)||seciliCheckboxListesi.contains(balayiotelleri)
                                    )
                                    {
                                    }
                                    else{
                                        if (!arananotel.contains(veri))
                                        {
                                            arananotel.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }

                            false
                        }
                    }
                    if(minFiyattext!=null && maxFiyattext!=null)
                    {
                        if (arananotel.isNotEmpty())
                        {
                            val iterator = arananotel.iterator()
                            while (iterator.hasNext()) {
                                val yurtdisiTur = iterator.next()

                                if (minFiyattext != null && maxFiyattext != null) {
                                    if (yurtdisiTur.fiyat >= minFiyattext && yurtdisiTur.fiyat <= maxFiyattext) {
                                        if (!arananotel.contains(yurtdisiTur)) {
                                            arananotel.add(yurtdisiTur)
                                        }
                                    } else {
                                        if (arananotel.contains(yurtdisiTur)) {
                                            iterator.remove()
                                        }
                                    }
                                } else {
                                    println("BOOOOŞŞŞŞŞŞŞŞŞ")
                                }

                            }
                        }
                        else {
                            val iterator = genelliste.iterator()
                            while (iterator.hasNext()) {
                                val yurtdisiTur = iterator.next()

                                if (yurtdisiTur.fiyat >= minFiyattext && yurtdisiTur.fiyat <= maxFiyattext) {
                                    if (!arananotel.contains(yurtdisiTur)) {
                                        arananotel.add(yurtdisiTur)
                                    }
                                }
                                else
                                {
                                    if (arananotel.contains(yurtdisiTur)) {
                                        iterator.remove()

                                    }
                                }

                            }
                        }

                    }
                    else if(minFiyattext!=null || maxFiyattext!=null)
                    {
                        if(minFiyattext!=null)
                        {
                            if (arananotel.isEmpty())
                            {
                                val iterator = genelliste.iterator()

                                while (iterator.hasNext())
                                {
                                    val yurtdisiTur = iterator.next()

                                    if (yurtdisiTur.fiyat <= minFiyattext.toInt()) {
                                        iterator.remove()
                                    }
                                    else {
                                        if (!arananotel.contains(yurtdisiTur)) {
                                            arananotel.add(yurtdisiTur)
                                        }
                                    }
                                }
                            }
                            else{
                                val iterator = arananotel.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                    if (yurtdisiTur.fiyat <= minFiyattext.toInt()) {
                                        iterator.remove()

                                    }
                                    else {
                                        if (!arananotel.contains(yurtdisiTur)) {
                                            arananotel.add(yurtdisiTur)
                                        }
                                    }


                                }
                            }
                        }
                        else
                        {
                            if (arananotel.isEmpty())
                            {
                                val iterator = genelliste.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                    if (maxFiyattext != null) {
                                        if (yurtdisiTur.fiyat > maxFiyattext) {
                                            iterator.remove()
                                            // İteratörü güncelledikten sonra iç döngüyü sonlandırın.
                                        }
                                        else {
                                            if (!arananotel.contains(yurtdisiTur)) {
                                                arananotel.add(yurtdisiTur)
                                            }
                                        }
                                    }

                                }
                            }
                            else
                            {
                                val iterator = arananotel.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                    if (maxFiyattext != null) {
                                        if (yurtdisiTur.fiyat > maxFiyattext) {
                                            iterator.remove()
                                            // İteratörü güncelledikten sonra iç döngüyü sonlandırın.
                                        }
                                        else {
                                            if (!arananotel.contains(yurtdisiTur)) {
                                                arananotel.add(yurtdisiTur)
                                            }
                                        }
                                    }

                                }
                            }
                        }
                    }
                    binding.toplamtesis.text="Toplam ${arananotel.count()} Otel Tesisi Bulduk!"
                    binding.rchizmetler.apply {
                        layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                        adapter = OtellerAdapter(
                            arananotel ,context,this@OtellerActivity)
                        binding.rchizmetler.adapter = adapter
                        binding.rchizmetler.layoutManager=layoutManager
                    }
                    mydialog.dismiss()

                }

                puanrlayoutbtn.setOnClickListener {
                    if (layoutpuan.visibility == View.GONE) {
                        TransitionManager.beginDelayedTransition(cardpuan, AutoTransition())
                        layoutpuan.visibility = View.VISIBLE
                    } else {
                        TransitionManager.beginDelayedTransition(cardpuan, AutoTransition())
                        layoutpuan.visibility = View.GONE
                    }
                }
                fiyatrlayoutbtn.setOnClickListener {
                    if (layoutfiyat.visibility == View.GONE) {
                        TransitionManager.beginDelayedTransition(cardfiyat, AutoTransition())
                        layoutfiyat.visibility = View.VISIBLE
                    } else {
                        TransitionManager.beginDelayedTransition(cardfiyat, AutoTransition())
                        layoutfiyat.visibility = View.GONE
                    }
                }
                tatiltemarlayoutbtn.setOnClickListener {
                    if (layouttatiltema.visibility == View.GONE) {
                        TransitionManager.beginDelayedTransition(cardtatiltema, AutoTransition())
                        layouttatiltema.visibility = View.VISIBLE
                    } else {
                        TransitionManager.beginDelayedTransition(cardtatiltema, AutoTransition())
                        layouttatiltema.visibility = View.GONE
                    }
                }


                cikisbtn.setOnClickListener {
                    mydialog.dismiss()

                }

            }
            binding.siralabtn.setOnClickListener {
                val dialogbinding=layoutInflater.inflate(R.layout.sirala_otel_dialog,null)
                val mydialog= Dialog(this)
                mydialog.setContentView(dialogbinding)
                mydialog.setCancelable(true)
                mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
                mydialog.show()
                val checkboxfiyatazcok=dialogbinding.findViewById<CheckBox>(R.id.fiyatazcok)
                val checkboxfiyatcokaz=dialogbinding.findViewById<CheckBox>(R.id.fiyatcokaz)
                val checkboxpuanazcok=dialogbinding.findViewById<CheckBox>(R.id.puanazcok)
                val checkboxpuancokaz=dialogbinding.findViewById<CheckBox>(R.id.puancokaz)

                val cikisbtn=dialogbinding.findViewById<ImageView>(R.id.cikis)
                val onaylabtn=dialogbinding.findViewById<CardView>(R.id.siralaonaylabtn)
                cikisbtn.setOnClickListener {
                    mydialog.dismiss()

                }
                onaylabtn.setOnClickListener {
                    val siralachechkboxList = listOf(checkboxfiyatazcok, checkboxfiyatcokaz, checkboxpuanazcok,checkboxpuancokaz)
                    val seciliCheckboxListesisirala = siralachechkboxList.filter { checkbox -> checkbox.isChecked }

                    if (arananotel.isEmpty())
                    {
                        if (seciliCheckboxListesisirala.isNotEmpty())
                        {
                            if (checkboxfiyatcokaz.isChecked)
                            {
                                otelviewListesi.sortByDescending { it.fiyat }

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = OtellerAdapter(
                                        otelviewListesi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxfiyatazcok.isChecked)
                            {
                                otelviewListesi.sortBy{ it.fiyat}
                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = OtellerAdapter(
                                        otelviewListesi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxpuanazcok.isChecked)
                            {
                                otelviewListesi.sortBy{ it.puan}
                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = OtellerAdapter(
                                        otelviewListesi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxpuancokaz.isChecked)
                            {
                                otelviewListesi.sortByDescending{ it.puan}
                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = OtellerAdapter(
                                        otelviewListesi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                        }
                    }
                    else{
                        if (seciliCheckboxListesisirala.isNotEmpty())
                        {
                            if (checkboxfiyatcokaz.isChecked)
                            {
                                arananotel.sortByDescending { it.fiyat }

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = OtellerAdapter(
                                        arananotel,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxfiyatazcok.isChecked)
                            {
                                arananotel.sortBy{ it.fiyat}
                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = OtellerAdapter(
                                        arananotel,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxpuanazcok.isChecked)
                            {
                                arananotel.sortBy{ it.puan}
                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = OtellerAdapter(
                                        arananotel,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxpuancokaz.isChecked)
                            {
                                arananotel.sortByDescending{ it.puan}
                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = OtellerAdapter(
                                        arananotel,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                        }
                    }

                    mydialog.dismiss()
                }
            }
        }
        else if(name=="Tekne")
        {
            binding.turadi.text="Tekne Turları"
            binding.toplamtesis.text="Toplam ${tekneturviewListesi.count()} Tekne turu Bulduk!"

            binding.rchizmetler.apply {
                layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                adapter = TekneTurAdapter(
                    tekneturviewListesi,
                    context,this@OtellerActivity)
                binding.rchizmetler.adapter = adapter
                binding.rchizmetler.layoutManager=layoutManager
            }
            var aranantekne=ArrayList<TekneTurView>()
            var genelliste=ArrayList<TekneTurView>()

            binding.filtrelebtn.setOnClickListener {
                aranantekne.clear()
                genelliste.addAll(tekneturviewListesi)
                val dialogbinding=layoutInflater.inflate(R.layout.filtrele_tekne_turlari,null)
                val mydialog= Dialog(this)
                mydialog.setContentView(dialogbinding)
                mydialog.setCancelable(true)
                mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
                mydialog.show()
                val checkboxvizeli=dialogbinding.findViewById<CheckBox>(R.id.checkboxVizeli)
                val checkboxvizesiz=dialogbinding.findViewById<CheckBox>(R.id.checkboxVizesiz)
                val kalkisistanbul=dialogbinding.findViewById<CheckBox>(R.id.istanbulkalkis)
                val kalkisankara=dialogbinding.findViewById<CheckBox>(R.id.Ankarakalkis)
                val kalkisizmir=dialogbinding.findViewById<CheckBox>(R.id.izmirkalkis)
                val minfiyat=dialogbinding.findViewById<EditText>(R.id.minfiyat)
                val maxfiyat=dialogbinding.findViewById<EditText>(R.id.maxfiyat)
                val cikisbtn=dialogbinding.findViewById<ImageView>(R.id.cikisfiltrele)
                val onaylabtn=dialogbinding.findViewById<CardView>(R.id.filtreleonaylabtn)

                val fiyatrlayoutbtn=dialogbinding.findViewById<RelativeLayout>(R.id.fiyatagorefiltbtn)
                val bolgerlayoutbtn=dialogbinding.findViewById<RelativeLayout>(R.id.bolgefiltrebtn)


                val layoutfiyat=dialogbinding.findViewById<LinearLayout>(R.id.layoutfiyataralıgınagore)
                val layoutbolge=dialogbinding.findViewById<LinearLayout>(R.id.layoutbolge)


                val cardfiyat=dialogbinding.findViewById<CardView>(R.id.cardviewfiyataralıgı)
                val cardbolge=dialogbinding.findViewById<CardView>(R.id.cardviewbolge)

                onaylabtn.setOnClickListener {

                    var minFiyattext = minfiyat.text.toString().toIntOrNull()
                    var maxFiyattext = maxfiyat.text.toString().toIntOrNull()

                    val yurtdisicheckboxList = listOf(checkboxvizeli, checkboxvizesiz, kalkisistanbul,kalkisankara,kalkisizmir)
                    val seciliCheckboxListesi = yurtdisicheckboxList.filter { checkbox -> checkbox.isChecked }
                    if(seciliCheckboxListesi.isNotEmpty() )
                    {
                        genelliste.filter { veri ->

                            if (checkboxvizeli.isChecked && veri.vizeDurumu == "Evet")
                            {
                                if (kalkisistanbul.isChecked && veri.baslangicKonumu == "İstanbul")
                                {
                                    if (!aranantekne.contains(veri))
                                    {
                                        aranantekne.add(veri)
                                        true
                                    }

                                }
                                else if (kalkisankara.isChecked && veri.baslangicKonumu == "Ankara")
                                {
                                    if (!aranantekne.contains(veri))
                                    {
                                        aranantekne.add(veri)
                                        true
                                    }

                                }
                                else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir")
                                {
                                    if (!aranantekne.contains(veri))
                                    {
                                        aranantekne.add(veri)
                                        true
                                    }

                                }

                                else{
                                    if (seciliCheckboxListesi.contains(kalkisistanbul) ||seciliCheckboxListesi.contains(kalkisankara)||seciliCheckboxListesi.contains(kalkisizmir) ||seciliCheckboxListesi.contains(checkboxvizesiz))
                                    {

                                    }
                                    else{
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }
                                    }

                                }

                                true
                            }
                            else if (checkboxvizesiz.isChecked && veri.vizeDurumu == "Hayır")
                            {
                                if(kalkisistanbul.isChecked && veri.baslangicKonumu == "İstanbul")
                                {
                                    if (!aranantekne.contains(veri))
                                    {
                                        aranantekne.add(veri)
                                        true
                                    }


                                }
                                else if (kalkisankara.isChecked && veri.baslangicKonumu == "Ankara")
                                {
                                    if (!aranantekne.contains(veri))
                                    {
                                        aranantekne.add(veri)
                                        true
                                    }


                                }
                                else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir") {
                                    if (!aranantekne.contains(veri))
                                    {
                                        aranantekne.add(veri)
                                        true
                                    }

                                }
                                else{
                                    if (seciliCheckboxListesi.contains(kalkisistanbul) ||seciliCheckboxListesi.contains(kalkisankara)||seciliCheckboxListesi.contains(kalkisizmir) ||seciliCheckboxListesi.contains(checkboxvizeli))
                                    {

                                    }
                                    else{
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }
                            else {
                                if (kalkisistanbul.isChecked && veri.baslangicKonumu == "İstanbul")
                                {
                                    if(checkboxvizeli.isChecked && veri.vizeDurumu == "Evet")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }
                                    }
                                    else if (checkboxvizesiz.isChecked && veri.vizeDurumu == "Hayır")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }
                                    else if (kalkisankara.isChecked && veri.baslangicKonumu == "Ankara")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }
                                    else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir") {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }

                                    else{
                                        if (seciliCheckboxListesi.contains(checkboxvizeli) ||seciliCheckboxListesi.contains(checkboxvizesiz) ||seciliCheckboxListesi.contains(kalkisankara)||seciliCheckboxListesi.contains(kalkisizmir))
                                        {

                                        }
                                        else{
                                            if (!aranantekne.contains(veri))
                                            {
                                                aranantekne.add(veri)
                                                true
                                            }
                                        }

                                    }
                                    true
                                }
                                else if (kalkisankara.isChecked && veri.baslangicKonumu == "Ankara")
                                {
                                    if(checkboxvizeli.isChecked && veri.vizeDurumu == "Evet")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }
                                    }
                                    else if (checkboxvizesiz.isChecked && veri.vizeDurumu == "Hayır")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }
                                    else if (kalkisankara.isChecked && veri.baslangicKonumu == "İstanbul")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }
                                    else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir") {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }
                                    else{
                                        if (seciliCheckboxListesi.contains(checkboxvizeli) ||seciliCheckboxListesi.contains(checkboxvizesiz) ||seciliCheckboxListesi.contains(kalkisistanbul)||seciliCheckboxListesi.contains(kalkisizmir))
                                        {

                                        }
                                        else{
                                            if (!aranantekne.contains(veri))
                                            {
                                                aranantekne.add(veri)
                                                true
                                            }
                                        }

                                    }
                                    true
                                }
                                else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir")
                                {
                                    if(checkboxvizeli.isChecked && veri.vizeDurumu == "Evet")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }
                                    }
                                    else if (checkboxvizesiz.isChecked && veri.vizeDurumu == "Hayır")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }
                                    else if (kalkisankara.isChecked && veri.baslangicKonumu == "İstanbul")
                                    {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }
                                    else if (kalkisizmir.isChecked && veri.baslangicKonumu == "Ankara") {
                                        if (!aranantekne.contains(veri))
                                        {
                                            aranantekne.add(veri)
                                            true
                                        }

                                    }
                                    else{
                                        if (seciliCheckboxListesi.contains(checkboxvizeli) ||seciliCheckboxListesi.contains(checkboxvizesiz) ||seciliCheckboxListesi.contains(kalkisistanbul)||seciliCheckboxListesi.contains(kalkisankara))
                                        {

                                        }
                                        else{
                                            if (!aranantekne.contains(veri))
                                            {
                                                aranantekne.add(veri)
                                                true
                                            }
                                        }

                                    }
                                    true
                                }
                                false
                            }
                        }
                    }

                    if(minFiyattext!=null && maxFiyattext!=null)
                    {
                        if (aranantekne.isNotEmpty())
                        {
                            val iterator = aranantekne.iterator()
                            while (iterator.hasNext()) {
                                val yurtdisiTur = iterator.next()

                                if (minFiyattext != null && maxFiyattext != null) {
                                    if (yurtdisiTur.fiyat >= minFiyattext && yurtdisiTur.fiyat <= maxFiyattext) {
                                        if (!aranantekne.contains(yurtdisiTur)) {
                                            aranantekne.add(yurtdisiTur)
                                        }
                                    } else {
                                        if (aranantekne.contains(yurtdisiTur)) {
                                            iterator.remove()
                                        }
                                    }
                                } else {
                                    println("BOOOOŞŞŞŞŞŞŞŞŞ")
                                }

                            }
                        }
                        else {
                            val iterator = genelliste.iterator()
                            while (iterator.hasNext()) {
                                val yurtdisiTur = iterator.next()

                                    if (yurtdisiTur.fiyat >= minFiyattext && yurtdisiTur.fiyat <= maxFiyattext) {
                                        if (!aranantekne.contains(yurtdisiTur)) {
                                            aranantekne.add(yurtdisiTur)
                                        }
                                    }
                                    else
                                    {
                                        if (aranantekne.contains(yurtdisiTur)) {
                                            iterator.remove()

                                        }
                                    }

                            }
                        }

                    }
                    else if(minFiyattext!=null || maxFiyattext!=null)
                    {
                        if(minFiyattext!=null)
                        {
                            if (aranantekne.isEmpty())
                            {
                                val iterator = genelliste.iterator()

                                while (iterator.hasNext())
                                {
                                    val yurtdisiTur = iterator.next()

                                        if (yurtdisiTur.fiyat <= minFiyattext.toInt()) {
                                            iterator.remove()
                                        }
                                        else {
                                            if (!aranantekne.contains(yurtdisiTur)) {
                                                aranantekne.add(yurtdisiTur)
                                            }
                                        }
                                }
                            }
                            else{
                                val iterator = aranantekne.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                        if (yurtdisiTur.fiyat <= minFiyattext.toInt()) {
                                            iterator.remove()

                                        }
                                        else {
                                            if (!aranantekne.contains(yurtdisiTur)) {
                                                aranantekne.add(yurtdisiTur)
                                            }
                                        }


                                }
                            }
                        }
                        else
                        {
                            if (aranantekne.isEmpty())
                            {
                                val iterator = genelliste.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                    if (maxFiyattext != null) {
                                        if (yurtdisiTur.fiyat > maxFiyattext) {
                                            iterator.remove()
                                            break // İteratörü güncelledikten sonra iç döngüyü sonlandırın.
                                        }
                                        else {
                                            if (!aranantekne.contains(yurtdisiTur)) {
                                                aranantekne.add(yurtdisiTur)
                                            }
                                        }
                                    }

                                }
                            }
                            else
                            {
                                val iterator = aranantekne.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                    if (maxFiyattext != null) {
                                        if (yurtdisiTur.fiyat > maxFiyattext) {
                                            iterator.remove()
                                            // İteratörü güncelledikten sonra iç döngüyü sonlandırın.
                                        }
                                        else {
                                            if (!aranantekne.contains(yurtdisiTur)) {
                                                aranantekne.add(yurtdisiTur)
                                            }
                                        }
                                    }

                                }
                            }
                        }
                    }
                    binding.toplamtesis.text="Toplam ${aranantekne.count()} Tekne turu Bulduk!"
                    binding.rchizmetler.apply {
                        layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                        adapter = TekneTurAdapter(
                            aranantekne ,context,this@OtellerActivity)
                        binding.rchizmetler.adapter = adapter
                        binding.rchizmetler.layoutManager=layoutManager
                    }
                    mydialog.dismiss()

                }

                fiyatrlayoutbtn.setOnClickListener {
                    if (layoutfiyat.visibility == View.GONE) {
                        TransitionManager.beginDelayedTransition(cardfiyat, AutoTransition())
                        layoutfiyat.visibility = View.VISIBLE
                    } else {
                        TransitionManager.beginDelayedTransition(cardfiyat, AutoTransition())
                        layoutfiyat.visibility = View.GONE
                    }
                }
                bolgerlayoutbtn.setOnClickListener {
                    if (layoutbolge.visibility == View.GONE) {
                        TransitionManager.beginDelayedTransition(cardbolge, AutoTransition())
                        layoutbolge.visibility = View.VISIBLE
                    } else {
                        TransitionManager.beginDelayedTransition(cardbolge, AutoTransition())
                        layoutbolge.visibility = View.GONE
                    }
                }

                cikisbtn.setOnClickListener {
                    mydialog.dismiss()

                }

            }
            binding.siralabtn.setOnClickListener {
                val dialogbinding=layoutInflater.inflate(R.layout.sirala_otel_dialog,null)
                val mydialog= Dialog(this)
                mydialog.setContentView(dialogbinding)
                mydialog.setCancelable(true)
                mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
                mydialog.show()
                val checkboxfiyatazcok=dialogbinding.findViewById<CheckBox>(R.id.fiyatazcok)
                val checkboxfiyatcokaz=dialogbinding.findViewById<CheckBox>(R.id.fiyatcokaz)
                val cardpuancokaz=dialogbinding.findViewById<CardView>(R.id.cardpuancokaz)
                val cardpuanazcok=dialogbinding.findViewById<CardView>(R.id.cardpuanazcok)
                cardpuancokaz.visibility=View.GONE
                cardpuanazcok.visibility=View.GONE
                val cikisbtn=dialogbinding.findViewById<ImageView>(R.id.cikis)
                val onaylabtn=dialogbinding.findViewById<CardView>(R.id.siralaonaylabtn)
                cikisbtn.setOnClickListener {
                    mydialog.dismiss()
                }
                onaylabtn.setOnClickListener {
                    val siralachechkboxList = listOf(checkboxfiyatazcok, checkboxfiyatcokaz)
                    val seciliCheckboxListesisirala = siralachechkboxList.filter { checkbox -> checkbox.isChecked }

                    if (aranantekne.isEmpty())
                    {
                        if (seciliCheckboxListesisirala.isNotEmpty())
                        {
                            if (checkboxfiyatcokaz.isChecked)
                            {

                                tekneturviewListesi.sortByDescending { it.fiyat }

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = TekneTurAdapter(
                                        tekneturviewListesi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxfiyatazcok.isChecked)
                            {
                                tekneturviewListesi.sortBy { it.fiyat }

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = TekneTurAdapter(
                                        tekneturviewListesi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                        }
                    }
                    else{
                        if (seciliCheckboxListesisirala.isNotEmpty())
                        {
                            if (checkboxfiyatcokaz.isChecked)
                            {
                                aranantekne.sortByDescending { it.fiyat }

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = TekneTurAdapter(
                                        aranantekne,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxfiyatazcok.isChecked)
                            {
                                aranantekne.sortBy { it.fiyat }

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = TekneTurAdapter(
                                        aranantekne,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                        }
                    }

                    mydialog.dismiss()

                }
            }
        }
        else if(name=="YurtDisi")
        {
            binding.turadi.text="Yurt dışı Turları"
            binding.toplamtesis.text="Toplam ${yurtdisiviewListesi.count()} Yurt dışı turu Bulduk!"
            binding.rchizmetler.apply {
                layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                adapter = YurtDisiTurAdapter(yurtdisiviewListesi,context,this@OtellerActivity)
                binding.rchizmetler.adapter = adapter
                binding.rchizmetler.layoutManager=layoutManager
            }
            var arananyurtdisi=ArrayList<YurtDisiTurView>()
            var genelliste=ArrayList<YurtDisiTurView>()
            binding.filtrelebtn.setOnClickListener {
                genelliste.addAll(yurtdisiviewListesi)
                val dialogbinding=layoutInflater.inflate(R.layout.filtrele_yurt_disi_dialog,null)
                val mydialog= Dialog(this)
                mydialog.setContentView(dialogbinding)
                mydialog.setCancelable(true)
                mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
                mydialog.show()
                val checkboxvizeli=dialogbinding.findViewById<CheckBox>(R.id.checkboxVizeli)
                val checkboxvizesiz=dialogbinding.findViewById<CheckBox>(R.id.checkboxVizesiz)
                val kalkisistanbul=dialogbinding.findViewById<CheckBox>(R.id.istanbulkalkis)
                val kalkisankara=dialogbinding.findViewById<CheckBox>(R.id.Ankarakalkis)
                val kalkisizmir=dialogbinding.findViewById<CheckBox>(R.id.izmirkalkis)
                val minfiyat=dialogbinding.findViewById<EditText>(R.id.minfiyat)
                val maxfiyat=dialogbinding.findViewById<EditText>(R.id.maxfiyat)

                val cikisbtn=dialogbinding.findViewById<ImageView>(R.id.cikisfiltrele)
                val onaylabtn=dialogbinding.findViewById<CardView>(R.id.filtreleonaylabtn)
                val fiyatrlayoutbtn=dialogbinding.findViewById<RelativeLayout>(R.id.fiyatagorefiltbtn)
                val bolgerlayoutbtn=dialogbinding.findViewById<RelativeLayout>(R.id.bolgefiltrebtn)
                val kalkisrlayoutbtn=dialogbinding.findViewById<RelativeLayout>(R.id.kalkisnoktasifiltrebtn)
                val layoutfiyat=dialogbinding.findViewById<LinearLayout>(R.id.layoutfiyataralıgınagore)
                val layoutbolge=dialogbinding.findViewById<LinearLayout>(R.id.layoutbolge)
                val layoutkalkisnoktasi=dialogbinding.findViewById<LinearLayout>(R.id.layoutkalkisnoktasi)
                val cardfiyat=dialogbinding.findViewById<CardView>(R.id.cardviewfiyataralıgı)
                val cardbolge=dialogbinding.findViewById<CardView>(R.id.cardviewbolge)
                val cardkalkisnoktasi=dialogbinding.findViewById<CardView>(R.id.cardviewkalkisnoktasi)


                onaylabtn.setOnClickListener {

                    val minFiyattext = minfiyat.text.toString().toIntOrNull()
                    val maxFiyattext = maxfiyat.text.toString().toIntOrNull()

                    val yurtdisicheckboxList = listOf(checkboxvizeli, checkboxvizesiz, kalkisistanbul,kalkisankara,kalkisizmir)
                    val seciliCheckboxListesi = yurtdisicheckboxList.filter { checkbox -> checkbox.isChecked }
                    if(seciliCheckboxListesi.isNotEmpty() )
                    {
                        genelliste.filter { veri ->

                            if (checkboxvizeli.isChecked && veri.vizeDurumu == "Evet")
                            {
                                if (kalkisistanbul.isChecked && veri.baslangicKonumu == "İstanbul")
                                {
                                    if (!arananyurtdisi.contains(veri))
                                    {
                                        arananyurtdisi.add(veri)
                                        true
                                    }

                                }
                                else if (kalkisankara.isChecked && veri.baslangicKonumu == "Ankara")
                                {
                                    if (!arananyurtdisi.contains(veri))
                                    {
                                        arananyurtdisi.add(veri)
                                        true
                                    }

                                }
                                else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir")
                                {
                                    if (!arananyurtdisi.contains(veri))
                                    {
                                        arananyurtdisi.add(veri)
                                        true
                                    }

                                }

                                else{
                                    if (seciliCheckboxListesi.contains(kalkisistanbul) ||seciliCheckboxListesi.contains(kalkisankara)||seciliCheckboxListesi.contains(kalkisizmir) ||seciliCheckboxListesi.contains(checkboxvizesiz))
                                    {

                                    }
                                    else{
                                        if (!arananyurtdisi.contains(veri))
                                        {
                                            arananyurtdisi.add(veri)
                                            true
                                        }
                                    }

                                }

                                true
                            }
                            else if (checkboxvizesiz.isChecked && veri.vizeDurumu == "Hayır")
                             {
                                if(kalkisistanbul.isChecked && veri.baslangicKonumu == "İstanbul")
                                {
                                    if (!arananyurtdisi.contains(veri))
                                    {
                                        arananyurtdisi.add(veri)
                                        true
                                    }

                                }
                                else if (kalkisankara.isChecked && veri.baslangicKonumu == "Ankara")
                                {
                                    if (!arananyurtdisi.contains(veri))
                                    {
                                        arananyurtdisi.add(veri)
                                        true
                                    }
                                }
                                else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir") {
                                    if (!arananyurtdisi.contains(veri))
                                    {
                                        arananyurtdisi.add(veri)
                                        true
                                    }
                                }
                                else{
                                    if (seciliCheckboxListesi.contains(kalkisistanbul) ||seciliCheckboxListesi.contains(kalkisankara)||seciliCheckboxListesi.contains(kalkisizmir) ||seciliCheckboxListesi.contains(checkboxvizeli))
                                    {

                                    }
                                    else{
                                        if (!arananyurtdisi.contains(veri))
                                        {
                                            arananyurtdisi.add(veri)
                                            true
                                        }
                                    }

                                }
                                true
                            }
                            else {
                                 if (kalkisistanbul.isChecked && veri.baslangicKonumu == "İstanbul")
                                 {
                                    if(checkboxvizeli.isChecked && veri.vizeDurumu == "Evet")
                                    {
                                        if (!arananyurtdisi.contains(veri))
                                        {
                                            arananyurtdisi.add(veri)
                                            true
                                        }
                                    }
                                    else if (checkboxvizesiz.isChecked && veri.vizeDurumu == "Hayır")
                                    {
                                        if (!arananyurtdisi.contains(veri))
                                        {
                                            arananyurtdisi.add(veri)
                                            true
                                        }

                                    }
                                    else if (kalkisankara.isChecked && veri.baslangicKonumu == "Ankara")
                                    {
                                        if (!arananyurtdisi.contains(veri))
                                        {
                                            arananyurtdisi.add(veri)
                                            true
                                        }
                                    }

                                    }
                                    else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir") {
                                        if (!arananyurtdisi.contains(veri))
                                        {
                                        arananyurtdisi.add(veri)
                                        true
                                        }
                                    }
                                 else if (kalkisankara.isChecked && veri.baslangicKonumu == "Ankara")
                                 {
                                     if(checkboxvizeli.isChecked && veri.vizeDurumu == "Evet")
                                     {
                                         if (!arananyurtdisi.contains(veri))
                                         {
                                             arananyurtdisi.add(veri)
                                             true
                                         }
                                     }
                                     else if (checkboxvizesiz.isChecked && veri.vizeDurumu == "Hayır")
                                     {
                                         if (!arananyurtdisi.contains(veri))
                                         {
                                             arananyurtdisi.add(veri)
                                             true
                                         }

                                     }
                                     else if (kalkisankara.isChecked && veri.baslangicKonumu == "İstanbul")
                                     {
                                         if (!arananyurtdisi.contains(veri))
                                         {
                                             arananyurtdisi.add(veri)
                                             true
                                         }

                                     }
                                     else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir") {
                                         if (!arananyurtdisi.contains(veri))
                                         {
                                             arananyurtdisi.add(veri)
                                             true
                                         }

                                     }
                                     else{
                                         if (seciliCheckboxListesi.contains(checkboxvizeli) ||seciliCheckboxListesi.contains(checkboxvizesiz) ||seciliCheckboxListesi.contains(kalkisistanbul)||seciliCheckboxListesi.contains(kalkisizmir))
                                         {

                                         }
                                         else{
                                             if (!arananyurtdisi.contains(veri))
                                             {
                                                 arananyurtdisi.add(veri)
                                                 true
                                             }
                                         }

                                     }
                                     true
                                 }
                                 else if (kalkisizmir.isChecked && veri.baslangicKonumu == "İzmir")
                                 {
                                     if(checkboxvizeli.isChecked && veri.vizeDurumu == "Evet")
                                     {
                                         if (!arananyurtdisi.contains(veri))
                                         {
                                             arananyurtdisi.add(veri)
                                             true
                                         }
                                     }
                                     else if (checkboxvizesiz.isChecked && veri.vizeDurumu == "Hayır")
                                     {
                                         if (!arananyurtdisi.contains(veri))
                                         {
                                             arananyurtdisi.add(veri)
                                             true
                                         }

                                     }
                                     else if (kalkisankara.isChecked && veri.baslangicKonumu == "İstanbul")
                                     {
                                         if (!arananyurtdisi.contains(veri))
                                         {
                                             arananyurtdisi.add(veri)
                                             true
                                         }

                                     }
                                     else if (kalkisizmir.isChecked && veri.baslangicKonumu == "Ankara") {
                                         if (!arananyurtdisi.contains(veri))
                                         {
                                             arananyurtdisi.add(veri)
                                             true
                                         }

                                     }
                                     else{
                                         if (seciliCheckboxListesi.contains(checkboxvizeli) ||seciliCheckboxListesi.contains(checkboxvizesiz) ||seciliCheckboxListesi.contains(kalkisistanbul)||seciliCheckboxListesi.contains(kalkisankara))
                                         {

                                         }
                                         else{
                                             if (!arananyurtdisi.contains(veri))
                                             {
                                                 arananyurtdisi.add(veri)
                                                 true
                                             }
                                         }

                                     }
                                     true
                                 }
                                    else{
                                        if (seciliCheckboxListesi.contains(checkboxvizeli) ||seciliCheckboxListesi.contains(checkboxvizesiz) ||seciliCheckboxListesi.contains(kalkisankara)||seciliCheckboxListesi.contains(kalkisizmir))
                                        {

                                        }
                                        else{
                                            if (!arananyurtdisi.contains(veri))
                                            {
                                                arananyurtdisi.add(veri)
                                                true
                                            }
                                        }

                                    }
                                    true
                                }

                                false
                            }
                        }
                    if(minFiyattext!=null && maxFiyattext!=null)
                    {
                        if (arananyurtdisi.isNotEmpty())
                        {
                            val iterator = arananyurtdisi.iterator()

                            while (iterator.hasNext()) {
                                val yurtdisiTur = iterator.next()

                                if (minFiyattext != null && maxFiyattext != null) {
                                    if (yurtdisiTur.fiyat >= minFiyattext && yurtdisiTur.fiyat <= maxFiyattext) {
                                        if (!arananyurtdisi.contains(yurtdisiTur)) {
                                            arananyurtdisi.add(yurtdisiTur)
                                        }
                                    } else {
                                        if (arananyurtdisi.contains(yurtdisiTur)) {
                                            iterator.remove()
                                        }
                                    }
                                } else {
                                    println("BOOOOŞŞŞŞŞŞŞŞŞ")
                                }

                            }
                        }
                        else {
                            val iterator = genelliste.iterator()
                            while (iterator.hasNext()) {
                                val yurtdisiTur = iterator.next()

                                if (minFiyattext != null && maxFiyattext != null)
                                {
                                    if (yurtdisiTur.fiyat >= minFiyattext && yurtdisiTur.fiyat <= maxFiyattext) {
                                        if (!arananyurtdisi.contains(yurtdisiTur)) {
                                            arananyurtdisi.add(yurtdisiTur)
                                        }
                                    }
                                    else
                                    {
                                        if (arananyurtdisi.contains(yurtdisiTur)) {
                                            iterator.remove()

                                        }
                                    }
                                } else {
                                    println("BOOOOŞŞŞŞŞŞŞŞŞ")
                                }

                            }
                        }

                    }
                    else if(minFiyattext!=null || maxFiyattext!=null)
                    {
                        if(minFiyattext!=null)
                        {
                            if (arananyurtdisi.isEmpty())
                            {
                                val iterator = genelliste.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                        if (yurtdisiTur.fiyat <= minFiyattext) {
                                            iterator.remove()

                                        }
                                        else {
                                            if (!arananyurtdisi.contains(yurtdisiTur)) {
                                                arananyurtdisi.add(yurtdisiTur)
                                            }
                                        }

                                }
                            }
                            else{
                                val iterator = arananyurtdisi.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()


                                        if (yurtdisiTur.fiyat <= minFiyattext) {
                                            iterator.remove()
                                            // İteratörü güncelledikten sonra iç döngüyü sonlandırın.
                                        }
                                        else {
                                            if (!arananyurtdisi.contains(yurtdisiTur)) {
                                                arananyurtdisi.add(yurtdisiTur)
                                            }
                                        }


                                }
                            }
                        }
                        else
                        {
                            if (arananyurtdisi.isEmpty())
                            {
                                val iterator = genelliste.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                    if (maxFiyattext != null) {
                                        if (yurtdisiTur.fiyat > maxFiyattext) {
                                            iterator.remove()

                                        }
                                        else {
                                            if (!arananyurtdisi.contains(yurtdisiTur)) {
                                                arananyurtdisi.add(yurtdisiTur)
                                            }
                                        }
                                    }

                                }
                            }
                            else
                            {
                                val iterator = arananyurtdisi.iterator()
                                while (iterator.hasNext()) {
                                    val yurtdisiTur = iterator.next()

                                    if (maxFiyattext != null) {
                                        if (yurtdisiTur.fiyat > maxFiyattext) {
                                            iterator.remove()

                                        }
                                        else {
                                            if (!arananyurtdisi.contains(yurtdisiTur)) {
                                                arananyurtdisi.add(yurtdisiTur)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    binding.toplamtesis.text="Toplam ${arananyurtdisi.count()} Yurt dışı turu Bulduk!"
                    binding.rchizmetler.apply {
                        layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                        adapter = YurtDisiTurAdapter(
                            arananyurtdisi ,context,this@OtellerActivity)
                        binding.rchizmetler.adapter = adapter
                        binding.rchizmetler.layoutManager=layoutManager
                    }
                    mydialog.dismiss()
                    }


                kalkisrlayoutbtn.setOnClickListener {
                    if (layoutkalkisnoktasi.visibility == View.GONE) {
                        TransitionManager.beginDelayedTransition(cardkalkisnoktasi, AutoTransition())
                        layoutkalkisnoktasi.visibility = View.VISIBLE
                    } else {
                        TransitionManager.beginDelayedTransition(cardkalkisnoktasi, AutoTransition())
                        layoutkalkisnoktasi.visibility = View.GONE
                    }
                }

                fiyatrlayoutbtn.setOnClickListener {
                    if (layoutfiyat.visibility == View.GONE) {
                        TransitionManager.beginDelayedTransition(cardfiyat, AutoTransition())
                        layoutfiyat.visibility = View.VISIBLE
                    } else {
                        TransitionManager.beginDelayedTransition(cardfiyat, AutoTransition())
                        layoutfiyat.visibility = View.GONE
                    }
                }
                bolgerlayoutbtn.setOnClickListener {
                    if (layoutbolge.visibility == View.GONE) {
                        TransitionManager.beginDelayedTransition(cardbolge, AutoTransition())
                        layoutbolge.visibility = View.VISIBLE
                    } else {
                        TransitionManager.beginDelayedTransition(cardbolge, AutoTransition())
                        layoutbolge.visibility = View.GONE
                    }
                }
                cikisbtn.setOnClickListener {
                    mydialog.dismiss()
                }
                }
            binding.siralabtn.setOnClickListener {
                val dialogbinding=layoutInflater.inflate(R.layout.sirala_otel_dialog,null)
                val mydialog= Dialog(this)
                mydialog.setContentView(dialogbinding)
                mydialog.setCancelable(true)
                mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
                mydialog.show()
                val checkboxfiyatazcok=dialogbinding.findViewById<CheckBox>(R.id.fiyatazcok)
                val checkboxfiyatcokaz=dialogbinding.findViewById<CheckBox>(R.id.fiyatcokaz)
                val cardpuancokaz=dialogbinding.findViewById<CardView>(R.id.cardpuancokaz)
                val cardpuanazcok=dialogbinding.findViewById<CardView>(R.id.cardpuanazcok)
                cardpuancokaz.visibility=View.GONE
                cardpuanazcok.visibility=View.GONE
                val cikisbtn=dialogbinding.findViewById<ImageView>(R.id.cikis)
                val onaylabtn=dialogbinding.findViewById<CardView>(R.id.siralaonaylabtn)
                cikisbtn.setOnClickListener {
                    mydialog.dismiss()

                }
                onaylabtn.setOnClickListener {
                    val siralachechkboxList = listOf(checkboxfiyatazcok, checkboxfiyatcokaz)
                    val seciliCheckboxListesisirala = siralachechkboxList.filter { checkbox -> checkbox.isChecked }
                    if (arananyurtdisi.isEmpty())
                    {
                        if (seciliCheckboxListesisirala.isNotEmpty())
                        {
                            if (checkboxfiyatcokaz.isChecked)
                            {

                                yurtdisiviewListesi.sortByDescending { it.fiyat }

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = YurtDisiTurAdapter(
                                        yurtdisiviewListesi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxfiyatazcok.isChecked)
                            {

                                yurtdisiviewListesi.sortBy{ it.fiyat}

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = YurtDisiTurAdapter(
                                        yurtdisiviewListesi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                        }
                    }
                    else{
                        if (seciliCheckboxListesisirala.isNotEmpty())
                        {
                            if (checkboxfiyatcokaz.isChecked)
                            {
                                arananyurtdisi.sortByDescending { it.fiyat }
                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = YurtDisiTurAdapter(
                                        arananyurtdisi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                            else if(checkboxfiyatazcok.isChecked)
                            {

                                arananyurtdisi.sortBy{ it.fiyat}

                                binding.rchizmetler.apply {
                                    layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                                    adapter = YurtDisiTurAdapter(
                                        arananyurtdisi,
                                        context,this@OtellerActivity)
                                    binding.rchizmetler.adapter = adapter
                                    binding.rchizmetler.layoutManager=layoutManager
                                }
                            }
                        }
                    }
                    mydialog.dismiss()
                }
            }


            }

        if (pop!=null)
        {
            popotelviewListesi.clear()
            for (otel in otelviewListesi)
            {
                if(otel.adres.contains(pop.sehiradi))
                {
                    popotelviewListesi.add(otel)
                }
            }
            binding.turadi.text="Oteller"
            binding.toplamtesis.text="Toplam ${popotelviewListesi.count()} Otel Tesisi Bulduk!"

            binding.rchizmetler.apply {
                layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                adapter = OtellerAdapter(
                    popotelviewListesi,
                    context,this@OtellerActivity)
                binding.rchizmetler.adapter = adapter
                binding.rchizmetler.layoutManager=layoutManager
            }
        }

        if (tema!=null)
        {
            popotelviewListesi.clear()
            for (otel in otelviewListesi)
            {
                if(otel.tema.contains(tema.temaadi))
                {
                    popotelviewListesi.add(otel)
                }
            }
            binding.turadi.text="Oteller"
            binding.toplamtesis.text="Toplam ${popotelviewListesi.count()} Otel Tesisi Bulduk!"

            binding.rchizmetler.apply {
                layoutManager = LinearLayoutManager(this@OtellerActivity, LinearLayoutManager.VERTICAL,false)
                adapter = OtellerAdapter(
                    popotelviewListesi,
                    context,this@OtellerActivity)
                binding.rchizmetler.adapter = adapter
                binding.rchizmetler.layoutManager=layoutManager
            }
        }

        }


    override fun onclickydt(ydt: YurtDisiTurView) {
        val intent = Intent(applicationContext, YurtdisidetayActivity::class.java)
        intent.putExtra(YDT_ID_EXTRA, ydt.idYurtdisiTur)
        startActivity(intent)
    }

    override fun onclickteknetur(ttur: TekneTurView) {
        val intent = Intent(applicationContext, TekneTurlariActivity::class.java)
        intent.putExtra(TT_ID_EXTRA, ttur.idTekneTur)
        startActivity(intent)
    }

    override fun onclickotel(otel: OtelView) {
        val intent = Intent(applicationContext, OteldetayActivity::class.java)
        intent.putExtra(OTEL_ID_EXTRA, otel.idOtel.toString())
        startActivity(intent)
    }

    private fun POPID(popId: String): PopulerBolgeler? {
        for (pop in populerBolgelerArrayList) {
            if (pop.sehiradi == popId)
                return pop
        }
        return null
    }
    private fun temaID(temaId: String): TatilTemalari? {
        for (tema in tatiltemalariArrayList) {
            if (tema.temaadi == temaId)
                return tema
        }
        return null
    }
}




package com.muhammetcakir.turizmacentasi.Views

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.view.View
import com.muhammetcakir.turizmacentasi.*
import com.muhammetcakir.turizmacentasi.databinding.ActivityProfileBinding
import id.ionbit.ionalert.IonAlert
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request

class ProfileActivity : AppCompatActivity() {
    private lateinit var binding:ActivityProfileBinding
    private val url = "http://192.168.1.122/turizmacentasi/v1/?op="
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding=ActivityProfileBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()
        if (kullanankisi.isEmpty())
        {
            binding.kullaniciadsoyad.visibility= View.GONE
            binding.kullanicimail.visibility= View.GONE
        }
        else
        {
            binding.kullaniciadsoyad.text= kullanankisi[0].adi.toString()
            binding.kullanicimail.text= kullanankisi[0].epostaAdresi.toString()
        }

        binding.btnhesabim.setOnClickListener {
            if(kullanankisi.isEmpty())
            {
                IonAlert(this, IonAlert.WARNING_TYPE)
                    .setTitleText("Lütfen Giriş Yapın.")
                    .setConfirmText("Ok")
                    .setConfirmClickListener(object : IonAlert.ClickListener {
                        override fun onClick(sDialog: IonAlert) {
                            startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                            sDialog.dismissWithAnimation()
                        }
                    })
                    .show()
            }
            else
            {
                startActivity(Intent(applicationContext, MyAccountActivity::class.java))
            }

        }
        binding.btnrezervasyonlarim.setOnClickListener {
            if(kullanankisi.isEmpty())
            {
                IonAlert(this, IonAlert.WARNING_TYPE)
                    .setTitleText("Lütfen Giriş Yapın.")
                    .setConfirmText("Ok")
                    .setConfirmClickListener(object : IonAlert.ClickListener {
                        override fun onClick(sDialog: IonAlert) {
                            startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                            sDialog.dismissWithAnimation()
                        }
                    })
                    .show()
            }
            else
            {
                startActivity(Intent(applicationContext, RezervasyonlarimActivity::class.java))
            }
        }
        binding.cikisyapbtn.setOnClickListener {
            IonAlert(this, IonAlert.ERROR_TYPE)
                .setTitleText("Çıkış yapmak istediğine emin misin?")
                .setConfirmText("Çıkış")
                .setCancelText("İptal")
                .setCancelClickListener(object : IonAlert.ClickListener {
                    override fun onClick(sDialog: IonAlert) {
                        sDialog.dismissWithAnimation()
                    }
                })
                .setConfirmClickListener(object : IonAlert.ClickListener {
                    override fun onClick(sDialog: IonAlert) {
                        kullanankisi.clear()
                        suankullanicivarmi=false
                        startActivity(Intent(applicationContext,MainActivity::class.java))
                        sDialog.dismissWithAnimation()
                    }
                })
                .show()
        }

        binding.hesabimisilbtn.setOnClickListener {
            IonAlert(this, IonAlert.ERROR_TYPE)
                .setTitleText("Hesabını Silmek istediğine emin misin?")
                .setConfirmText("Hesabımı Sil")
                .setCancelText("Kapat")
                .setCancelClickListener(object : IonAlert.ClickListener {
                    override fun onClick(sDialog: IonAlert) {
                        sDialog.dismissWithAnimation()
                    }
                })
                .setConfirmClickListener(object : IonAlert.ClickListener {
                    override fun onClick(sDialog: IonAlert) {
                        deletemy(kullanankisi[0].idMusteri)
                        suankullanicivarmi=false
                        kullanankisi.clear()
                        sDialog.dismissWithAnimation()
                        startActivity(Intent(applicationContext,MainActivity::class.java))
                    }
                })
                .show()
        }
        binding.bottomNavigation.setSelectedItemId(R.id.profil)
        binding.bottomNavigation.setOnItemSelectedListener { item ->
            when (item.getItemId()) {

                R.id.anasayfa -> {
                    startActivity(Intent(applicationContext, MainActivity::class.java))
                    overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
                    finish()
                    return@setOnItemSelectedListener true
                }
                R.id.reserve -> {
                    startActivity(Intent(applicationContext, OtellerActivity::class.java))
                    overridePendingTransition(R.anim.slide_in_right, R.anim.slide_out_left)
                    finish()
                    return@setOnItemSelectedListener true
                }
                R.id.profil -> {
                     true
                }
            }
            false
        }
    }
    private fun deletemy(
        id: String
    ) {
        GlobalScope.launch {
            val client = OkHttpClient()
            val formBody = FormBody.Builder()
                .add("id", id.toString())
                .build()
            val request = Request.Builder()
                .url(url + "deleteMusteri")
                .post(formBody)
                .build()
            val response = client.newCall(request).execute()
            Log.d("response", response.toString())
        }
    }
}
package com.muhammetcakir.turizmacentasi.Views

import android.app.DatePickerDialog
import android.app.Dialog
import android.content.Intent
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.provider.ContactsContract
import android.transition.AutoTransition
import android.transition.TransitionManager
import android.util.Log
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import androidx.annotation.RequiresApi
import androidx.cardview.widget.CardView
import com.muhammetcakir.turizmacentasi.*

import com.muhammetcakir.turizmacentasi.Models.*
import com.muhammetcakir.turizmacentasi.Models.Otel
import com.muhammetcakir.turizmacentasi.databinding.ActivityRezervasyonBinding
import com.squareup.picasso.Picasso
import id.ionbit.ionalert.IonAlert
import kotlinx.coroutines.*
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request



import java.text.SimpleDateFormat
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.*


class RezervasyonActivity : AppCompatActivity() {
    private lateinit var binding: ActivityRezervasyonBinding
    private val url = "http://192.168.1.122/turizmacentasi/v1/?op="
    var yetiskinsayi2 = 1
    var cocuksayi2 = 0

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityRezervasyonBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()
        val mycalender = Calendar.getInstance()
        val datePicker = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
            mycalender.set(Calendar.YEAR, year)
            mycalender.set(Calendar.MONTH, month)
            mycalender.set(Calendar.DAY_OF_MONTH, dayOfMonth)
            updateLable(mycalender)
        }
        binding.giristarihisec.setOnClickListener {
            DatePickerDialog(
                this, datePicker, mycalender.get(Calendar.YEAR), mycalender.get(Calendar.MONTH),
                mycalender.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
        val mycalender2 = Calendar.getInstance()
        val datePicker2 = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
            mycalender2.set(Calendar.YEAR, year)
            mycalender2.set(Calendar.MONTH, month)
            mycalender2.set(Calendar.DAY_OF_MONTH, dayOfMonth)
            updateLable2(mycalender2)

        }
        binding.cikistarihisec.setOnClickListener {
            DatePickerDialog(
                this, datePicker2, mycalender2.get(Calendar.YEAR), mycalender2.get(Calendar.MONTH),
                mycalender2.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
        var gelendeger = intent.getStringExtra(TP_ID_EXTRA)

        if (gelendeger.toString() == "YurtDisi") {
            binding.turpuanlayout.visibility=View.GONE
            val ydtId = intent.getStringExtra(YDT_ID_EXTRA)
            val ydt = ydtFromID(ydtId.toString())
            if (ydt != null)
            {
                        binding.rezTuradi.text = ydt.adi.toString()
                        Picasso.get().load(ydt.resimUrl).into(binding.rezfoto)
                        binding.rezguzergah.text =
                            ydt.baslangicKonumu.toString() + " -->" + ydt.guzergah.toString()
                val formatter =
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                val giristarihi = LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)

                val gelecekTarih = giristarihi.plusDays(5)
                val cikistarihiFormatter =
                    DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
                val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

                val dateFormatter =
                    DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))

                val giristarihi2 =
                    LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)
                val giristring = giristarihi2.format(dateFormatter)

                        binding.reztarih2.text = giristring.toString()+" - "+cikistarihi.toString()
                        binding.rezfiyat.text = "Kişi Başı " + ydt.fiyat.toString() + " TL"
                        binding.rezervasyonolusturbtn.setOnClickListener {
                            val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                            val currentDate = dateFormat.parse(ydt.baslangicTarihi.toString())
                            val calendar = Calendar.getInstance()
                            calendar.time = currentDate
                            calendar.add(Calendar.DAY_OF_MONTH, 5)
                            val futureDate = calendar.time
                            val futureDateString = dateFormat.format(futureDate)
                            val dateTime = LocalDateTime.now()
                            val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                            val formattedDateTime = dateTime.format(formatter)
                            if(kullanankisi.isEmpty())
                            {
                                IonAlert(this, IonAlert.WARNING_TYPE)
                                    .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                                    .setConfirmText("Giriş Yap")
                                    .setCancelText("Kapat")
                                    .setConfirmClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .setCancelClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {

                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .show()
                            }
                            else
                            {
                                postrez(
                                    formattedDateTime.toString(),
                                    yetiskinsayi2.toString(),
                                    cocuksayi2.toString(),
                                    ydt.idYurtdisiTur.toString(),
                                    "yurtdisitur",
                                    ydt.baslangicTarihi.toString(),
                                    futureDateString.toString()
                                )
                                IonAlert(this, IonAlert.WARNING_TYPE)
                                    .setTitleText("Rezervasyon Başarılı bir şekilde yapıldı.Rezervasyonunuzu Rezervasyonlarım kısmından görebilirsiniz.")
                                    .setConfirmText("Rezervasyonlarım'a Git")
                                    .setCancelText("Anasayfa'ya Dön")
                                    .setConfirmClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, ProfileActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .setCancelClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, MainActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .show()

                            }

                        }

            }
        }
        else if (gelendeger.toString() == "Tekne")
        {
            binding.turpuanlayout.visibility=View.GONE
            val ttId = intent.getStringExtra(TT_ID_EXTRA)
            val teknetur = ttFromID(ttId.toString())
            if (teknetur != null) {
                        binding.rezTuradi.text = teknetur.adi.toString()
                        Picasso.get().load(teknetur.resimUrl).into(binding.rezfoto)
                        binding.rezguzergah.text =
                            teknetur.baslangicKonumu.toString() + " -->" + teknetur.guzergah.toString()

                val formatter =
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                val giristarihi = LocalDate.parse(teknetur.baslangicTarihi.toString(), formatter)

                val gelecekTarih = giristarihi.plusDays(5)
                val cikistarihiFormatter =
                    DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
                val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

                val dateFormatter =
                    DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))

                val giristarihi2 =
                    LocalDate.parse(teknetur.baslangicTarihi.toString(), formatter)
                val giristring = giristarihi2.format(dateFormatter)
                        binding.reztarih2.text = giristring.toString()+" - "+cikistarihi.toString()
                        binding.rezfiyat.text = "Kişi Başı " + teknetur.fiyat.toString() + " TL"

                        binding.rezervasyonolusturbtn.setOnClickListener {
                            val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
                            val currentDate = dateFormat.parse(teknetur.baslangicTarihi.toString())
                            val calendar = Calendar.getInstance()
                            calendar.time = currentDate
                            calendar.add(Calendar.DAY_OF_MONTH, 5)
                            val futureDate = calendar.time
                            val futureDateString = dateFormat.format(futureDate)
                            val dateTime = LocalDateTime.now()
                            val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                            val formattedDateTime = dateTime.format(formatter)
                            if(kullanankisi.isEmpty())
                            {
                                IonAlert(this, IonAlert.WARNING_TYPE)
                                    .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                                    .setConfirmText("Giriş Yap")
                                    .setCancelText("Kapat")
                                    .setConfirmClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .setCancelClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {

                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .show()
                            }
                            else
                            {
                                postrez(
                                    formattedDateTime.toString(),
                                    yetiskinsayi2.toString(),
                                    cocuksayi2.toString(),
                                    teknetur.idTekneTur.toString(),
                                    "teknetur",
                                    teknetur.baslangicTarihi.toString(),
                                    futureDateString.toString()
                                )
                                IonAlert(this, IonAlert.WARNING_TYPE)
                                    .setTitleText("Rezervasyon Başarılı bir şekilde yapıldı.Rezervasyonunuzu Rezervasyonlarım kısmından görebilirsiniz.")
                                    .setConfirmText("Rezervasyonlarım'a Git")
                                    .setCancelText("Anasayfa'ya Dön")
                                    .setConfirmClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, ProfileActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .setCancelClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, MainActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .show()
                            }

                        }

            }
        }
        else if (gelendeger.toString() == "Otel")
        {
            binding.turtarihrelative.visibility=View.GONE
            binding.cardcikistarihi.visibility=View.VISIBLE
            binding.cardgiristarihi.visibility=View.VISIBLE
            val otelId = intent.getStringExtra(OTEL_ID_EXTRA)
            val otel = otelID(otelId.toString())
            if (otel != null) {

                        var hangioda = intent.getStringExtra(ODA_EXTRA)
                        binding.rezTuradi.text = otel.adi.toString()
                        Picasso.get().load(otel.resimUrl).into(binding.rezfoto)
                        binding.rezguzergah.text = otel.adres.toString()
                        binding.turtarihtext.text = "Otel Puanı: "
                        binding.reztarih.text = otel.puan.toString()
                        binding.rezfiyat.text = otel.tema.toString()
                        binding.odaturu.text = "Oda Türü: "
                        if (hangioda == "1") {
                            binding.rezturkod.text = "Standart Oda"
                        } else if (hangioda == "2") {
                            binding.rezturkod.text = "Manzaralı Oda"
                        } else if (hangioda == "3") {
                            binding.rezturkod.text = "Suite Oda"
                        }
                        binding.rezervasyonolusturbtn.setOnClickListener {
                            val dateTime = LocalDateTime.now()
                            val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
                            val formattedDateTime = dateTime.format(formatter)
                            val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                            val giristarihi = sdf.format(mycalender.time)
                            val cikstarihi = sdf.format(mycalender2.time)
                            if(kullanankisi.isEmpty())
                            {
                                IonAlert(this, IonAlert.WARNING_TYPE)
                                    .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                                    .setConfirmText("Giriş Yap")
                                    .setCancelText("Kapat")
                                    .setConfirmClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .setCancelClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {

                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .show()
                            }
                            else
                            {
                                postrez(
                                    formattedDateTime.toString(),
                                    yetiskinsayi2.toString(),
                                    cocuksayi2.toString(),
                                    otel.idOtel.toString(),
                                    "otel",
                                    giristarihi.toString(),
                                    cikstarihi.toString()
                                )
                                IonAlert(this, IonAlert.WARNING_TYPE)
                                    .setTitleText("Rezervasyon Başarılı bir şekilde yapıldı.Rezervasyonunuzu Rezervasyonlarım kısmından görebilirsiniz.")
                                    .setConfirmText("Rezervasyonlarım'a Git")
                                    .setCancelText("Anasayfa'ya Dön")
                                    .setConfirmClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, ProfileActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .setCancelClickListener(object : IonAlert.ClickListener {
                                        override fun onClick(sDialog: IonAlert) {
                                            startActivity(Intent(applicationContext, MainActivity::class.java))
                                            sDialog.dismissWithAnimation()
                                        }
                                    })
                                    .show()
                            }

                        }
            }
        }
        binding.kisisayisisec.setOnClickListener {
            val dialogbinding = layoutInflater.inflate(R.layout.kisisecimdialog, null)
            val mydialog = Dialog(this)
            mydialog.setContentView(dialogbinding)
            mydialog.setCancelable(true)
            mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
            mydialog.show()
            val yetiskinarti = dialogbinding.findViewById<ImageView>(R.id.yetiskinekle)
            val yetiskineksi = dialogbinding.findViewById<ImageView>(R.id.yetiskincikar)
            val yetiskinsayi = dialogbinding.findViewById<TextView>(R.id.yetiskinsayi)
            val cocukarti = dialogbinding.findViewById<ImageView>(R.id.cocukekle)
            val cocukeksi = dialogbinding.findViewById<ImageView>(R.id.cocukcikar)
            val cocuksayi = dialogbinding.findViewById<TextView>(R.id.cocuksayi)
            val onayla = dialogbinding.findViewById<CardView>(R.id.onaylaa)

            yetiskinarti.setOnClickListener {
                yetiskinsayi2 = (yetiskinsayi.text.toString()).toInt()
                do {
                    if (yetiskinsayi2 < 5) {
                        yetiskinsayi2 = yetiskinsayi2 + 1
                        if (yetiskinsayi2 == 4) {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Dikkat!")
                                .setContentText("Bir Rezervasyonda en fazla 4 Yetişkin Seçebilirsin.")
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                    }
                } while (yetiskinsayi2 == 5)
                yetiskinsayi.setText(yetiskinsayi2.toString())
            }
            yetiskineksi.setOnClickListener {

                yetiskinsayi2 = (yetiskinsayi.text.toString()).toInt()
                yetiskinsayi2 = yetiskinsayi2 - 1
                yetiskinsayi.text = (yetiskinsayi2.toString())
            }
            cocukeksi.setOnClickListener {

                cocuksayi2 = (cocuksayi.text.toString()).toInt()
                cocuksayi2 = cocuksayi2 - 1
                cocuksayi.text = (cocuksayi2.toString())
            }
            cocukarti.setOnClickListener {

                cocuksayi2 = (cocuksayi.text.toString()).toInt()

                do {
                    if (cocuksayi2 < 5) {
                        cocuksayi2 = cocuksayi2 + 1
                        if (cocuksayi2 == 4) {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Dikkat!")
                                .setContentText("Bir Rezervasyonda en fazla 4 Çocuk Seçebilirsin.")
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                    }
                } while (cocuksayi2 == 5)

                cocuksayi.setText(cocuksayi2.toString())

            }
            onayla.setOnClickListener {
                mydialog.dismiss()
                binding.kisisayisi.text =
                    (yetiskinsayi.text.toString() + " Yetişkin," + cocuksayi.text.toString() + " Çocuk")
                binding.kisisayisi.visibility = View.VISIBLE

                if (yetiskinsayi2 == 2) {
                    binding.birincikisi.visibility = View.VISIBLE
                    binding.ikinciyetiskinkisi.visibility = View.VISIBLE
                    binding.ucuncyetiskinkisi.visibility = View.GONE
                    binding.dorduncuyetiskinkisi.visibility = View.GONE
                } else if (yetiskinsayi2 == 1) {
                    binding.birincikisi.visibility = View.VISIBLE
                    binding.ikinciyetiskinkisi.visibility = View.GONE
                    binding.ucuncyetiskinkisi.visibility = View.GONE
                    binding.dorduncuyetiskinkisi.visibility = View.GONE
                } else if (yetiskinsayi2 == 0) {
                    binding.birincikisi.visibility = View.GONE
                    binding.ikinciyetiskinkisi.visibility = View.GONE
                    binding.ucuncyetiskinkisi.visibility = View.GONE
                    binding.dorduncuyetiskinkisi.visibility = View.GONE
                } else if (yetiskinsayi2 == 3) {
                    binding.birincikisi.visibility = View.VISIBLE
                    binding.ikinciyetiskinkisi.visibility = View.VISIBLE
                    binding.ucuncyetiskinkisi.visibility = View.VISIBLE

                    binding.dorduncuyetiskinkisi.visibility = View.GONE
                } else if (yetiskinsayi2 == 4) {
                    binding.birincikisi.visibility = View.VISIBLE
                    binding.ikinciyetiskinkisi.visibility = View.VISIBLE
                    binding.ucuncyetiskinkisi.visibility = View.VISIBLE
                    binding.dorduncuyetiskinkisi.visibility = View.VISIBLE
                }


                if (cocuksayi2 == 1) {
                    binding.birincicocuk.visibility = View.VISIBLE
                    binding.ikincicocuk.visibility = View.GONE
                    binding.ucuncucocuk.visibility = View.GONE
                    binding.dorduncucocuk.visibility = View.GONE
                } else if (cocuksayi2 == 0) {
                    binding.birincicocuk.visibility = View.GONE
                    binding.ikincicocuk.visibility = View.GONE
                    binding.ucuncucocuk.visibility = View.GONE
                    binding.dorduncucocuk.visibility = View.GONE
                } else if (cocuksayi2 == 2) {
                    binding.birincicocuk.visibility = View.VISIBLE
                    binding.ikincicocuk.visibility = View.VISIBLE

                    binding.ucuncucocuk.visibility = View.GONE
                    binding.dorduncucocuk.visibility = View.GONE

                } else if (cocuksayi2 == 3) {
                    binding.birincicocuk.visibility = View.VISIBLE
                    binding.ikincicocuk.visibility = View.VISIBLE
                    binding.ucuncucocuk.visibility = View.VISIBLE
                    binding.dorduncucocuk.visibility = View.GONE
                } else if (cocuksayi2 == 4) {
                    binding.birincicocuk.visibility = View.VISIBLE
                    binding.ikincicocuk.visibility = View.VISIBLE
                    binding.ucuncucocuk.visibility = View.VISIBLE
                    binding.dorduncucocuk.visibility = View.VISIBLE
                }
            }

        }
        binding.kisibilgileribtn.setOnClickListener {
            if (binding.layoutkisibilgileri.visibility == View.GONE) {
                TransitionManager.beginDelayedTransition(
                    binding.kisilergenellayout,
                    AutoTransition()
                )
                binding.layoutkisibilgileri.visibility = View.VISIBLE
            } else {
                TransitionManager.beginDelayedTransition(
                    binding.kisilergenellayout,
                    AutoTransition()
                )
                binding.layoutkisibilgileri.visibility = View.GONE
            }
        }
        binding.bilgilerimikullan.setOnClickListener {
            binding.rezkullaniciisim.setText(kullanankisi[0].adi)
            binding.rezkullanicisoyisim.setText(kullanankisi[0].soyadi)
            binding.rezkullanicitelno.setText(kullanankisi[0].telefonNumarasi)
            binding.rezkullaniciemail.setText(kullanankisi[0].epostaAdresi)
            val formatter =
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
            val dtarihi = LocalDate.parse(kullanankisi[0].dogumTarihi.toString(), formatter)
            val cikistarihiFormatter =
                DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
            val cikistarihi = dtarihi.format(cikistarihiFormatter)
            binding.rezkullanidtarih.setText(cikistarihi.toString())
        }
    }

    private fun updateLable(mycalender: Calendar) {
        val sdf = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        binding.giristarihi.text = sdf.format(mycalender.time)
        binding.giristarihi.visibility = View.VISIBLE
    }

    private fun updateLable2(mycalender2: Calendar) {
        val sdf2 = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        binding.cikistarihi.text = sdf2.format(mycalender2.time)
        binding.cikistarihi.visibility = View.VISIBLE
    }

    private fun ydtFromID(ydtId: String): YurtDisiTurView? {
        for (ydt in yurtdisiviewListesi) {
            if (ydt.idYurtdisiTur == ydtId)
                return ydt
        }
        return null
    }

    private fun ttFromID(ttId: String): TekneTurView? {
        for (tt in tekneturviewListesi) {
            if (tt.idTekneTur == ttId)
                return tt
        }
        return null
    }

    private fun otelID(otelId: String): OtelView? {
        for (otel in otelviewListesi) {
            if (otel.idOtel.toString() == otelId.toString())
                return otel
        }
        return null
    }

    private fun postrez(
        tarihi: String,
        yetiskinsayisi: String,
        cocuksayisi: String,
        otelid: String,
        hizmettabloadi: String,
        giris:String,
        cikis:String
    ) {
        GlobalScope.launch {
            val client = OkHttpClient()
            val formBody = FormBody.Builder()
                .add("tarihi", tarihi.toString())
                .add("yetiskinSayisi", yetiskinsayisi.toString())
                .add("cocukSayisi", cocuksayisi.toString())
                .add("Musteri_idMusteri", kullanankisi[0].idMusteri.toString())
                .add("hizmetTabloId", otelid.toString())
                .add("hizmetTabloAdi", hizmettabloadi.toString())
                .add("girisTarihi", giris.toString())
                .add("cikisTarihi", cikis.toString())
                .build()
            val request = Request.Builder()
                .url(url + "createRezervasyon")
                .post(formBody)
                .build()
            val response = client.newCall(request).execute()
            Log.d("response", response.toString())
        }
    }
}
package com.muhammetcakir.turizmacentasi.Views

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle

import androidx.recyclerview.widget.LinearLayoutManager

import com.muhammetcakir.turizmacentasi.*

import com.muhammetcakir.turizmacentasi.Adapters.RezervasyonlarimAdapter
import com.muhammetcakir.turizmacentasi.ClickListener.Clickrezervasyon
import com.muhammetcakir.turizmacentasi.Database.DbServices
import com.muhammetcakir.turizmacentasi.Database.benimrezervasyonlarimlistesi

import com.muhammetcakir.turizmacentasi.Database.rezervasyonListesi

import com.muhammetcakir.turizmacentasi.Models.Rezervasyon
import com.muhammetcakir.turizmacentasi.databinding.ActivityRezervasyonlarimBinding
import kotlinx.coroutines.*


class RezervasyonlarimActivity : AppCompatActivity(),Clickrezervasyon {
private lateinit var binding:ActivityRezervasyonlarimBinding
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding= ActivityRezervasyonlarimBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()
        runBlocking {
            rezervasyonListesi.clear()
            val db=DbServices()
            val deferred = async {
                db.getRezervasyon()
            }
            val yenirezervasyonListesi = deferred.await()
            rezervasyonListesi.addAll(yenirezervasyonListesi)
        }
        benimrezervasyonlarimlistesi.clear()
        for (rez in rezervasyonListesi)
        {
           if(rez.Musteri_idMusteri.toString()== kullanankisi[0].idMusteri.toString())
           {
               benimrezervasyonlarimlistesi.add(rez)
           }
        }
        binding.rcrezervasyonlarim.apply {
            layoutManager = LinearLayoutManager(this@RezervasyonlarimActivity, LinearLayoutManager.VERTICAL,false)
            adapter = RezervasyonlarimAdapter(benimrezervasyonlarimlistesi, this@RezervasyonlarimActivity)
            binding.rcrezervasyonlarim.adapter = adapter
            binding.rcrezervasyonlarim.layoutManager=layoutManager
        }

    }

    override fun onclickrezervasyon(rezervasyon: Rezervasyon) {
        val intent = Intent(applicationContext, RezGuncelleActivity::class.java)
        intent.putExtra(REZ_ID_EXRTRA, rezervasyon.idRezervasyon.toString())
        startActivity(intent)
    }

}

package com.muhammetcakir.turizmacentasi.Views

import android.app.DatePickerDialog
import android.app.Dialog
import android.content.Intent
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import androidx.annotation.RequiresApi
import androidx.cardview.widget.CardView
import com.muhammetcakir.turizmacentasi.*
import com.muhammetcakir.turizmacentasi.Database.*
import com.muhammetcakir.turizmacentasi.Models.Otel
import com.muhammetcakir.turizmacentasi.Models.Rezervasyon
import com.muhammetcakir.turizmacentasi.databinding.ActivityRezGuncelleBinding

import com.squareup.picasso.Picasso
import id.ionbit.ionalert.IonAlert
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.async
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import okhttp3.FormBody
import okhttp3.OkHttpClient
import okhttp3.Request
import java.text.SimpleDateFormat
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import java.util.*

class RezGuncelleActivity : AppCompatActivity() {
    private lateinit var binding: ActivityRezGuncelleBinding
    private val url = "http://192.168.1.122/turizmacentasi/v1/?op="
    var yetiskinsayi2 = 1
    var cocuksayi2 = 0
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding= ActivityRezGuncelleBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.kisisayisisec.setOnClickListener {
            val dialogbinding = layoutInflater.inflate(R.layout.kisisecimdialog, null)
            val mydialog = Dialog(this)
            mydialog.setContentView(dialogbinding)
            mydialog.setCancelable(true)
            mydialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
            mydialog.show()
            val yetiskinarti = dialogbinding.findViewById<ImageView>(R.id.yetiskinekle)
            val yetiskineksi = dialogbinding.findViewById<ImageView>(R.id.yetiskincikar)
            val yetiskinsayi = dialogbinding.findViewById<TextView>(R.id.yetiskinsayi)
            val cocukarti = dialogbinding.findViewById<ImageView>(R.id.cocukekle)
            val cocukeksi = dialogbinding.findViewById<ImageView>(R.id.cocukcikar)
            val cocuksayi = dialogbinding.findViewById<TextView>(R.id.cocuksayi)
            val onayla = dialogbinding.findViewById<CardView>(R.id.onaylaa)

            yetiskinarti.setOnClickListener {
                yetiskinsayi2 = (yetiskinsayi.text.toString()).toInt()
                do {
                    if (yetiskinsayi2 < 5) {
                        yetiskinsayi2 = yetiskinsayi2 + 1
                        if (yetiskinsayi2 == 4) {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Dikkat!")
                                .setContentText("Bir Rezervasyonda en fazla 4 Yetişkin Seçebilirsin.")
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                    }
                } while (yetiskinsayi2 == 5)
                yetiskinsayi.setText(yetiskinsayi2.toString())
            }
            yetiskineksi.setOnClickListener {

                yetiskinsayi2 = (yetiskinsayi.text.toString()).toInt()
                yetiskinsayi2 = yetiskinsayi2 - 1
                yetiskinsayi.text = (yetiskinsayi2.toString())
            }
            cocukeksi.setOnClickListener {

                cocuksayi2 = (cocuksayi.text.toString()).toInt()
                cocuksayi2 = cocuksayi2 - 1
                cocuksayi.text = (cocuksayi2.toString())
            }
            cocukarti.setOnClickListener {

                cocuksayi2 = (cocuksayi.text.toString()).toInt()

                do {
                    if (cocuksayi2 < 5) {
                        cocuksayi2 = cocuksayi2 + 1
                        if (cocuksayi2 == 4) {
                            IonAlert(this, IonAlert.WARNING_TYPE)
                                .setTitleText("Dikkat!")
                                .setContentText("Bir Rezervasyonda en fazla 4 Çocuk Seçebilirsin.")
                                .setCancelClickListener(object : IonAlert.ClickListener {
                                    override fun onClick(sDialog: IonAlert) {
                                        sDialog.dismissWithAnimation()
                                    }
                                })
                                .show()
                        }
                    }
                } while (cocuksayi2 == 5)

                cocuksayi.setText(cocuksayi2.toString())

            }
            onayla.setOnClickListener {
                mydialog.dismiss()
                binding.kisisayisi.text =
                    (yetiskinsayi.text.toString() + " Yetişkin," + cocuksayi.text.toString() + " Çocuk")
                binding.kisisayisi.visibility = View.VISIBLE

            }

        }
        val mycalender = Calendar.getInstance()
        val datePicker = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
            mycalender.set(Calendar.YEAR, year)
            mycalender.set(Calendar.MONTH, month)
            mycalender.set(Calendar.DAY_OF_MONTH, dayOfMonth)
            updateLable(mycalender)
        }
        binding.cardgiristarihi.setOnClickListener {
            DatePickerDialog(
                this, datePicker, mycalender.get(Calendar.YEAR), mycalender.get(Calendar.MONTH),
                mycalender.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
        val mycalender2 = Calendar.getInstance()
        val datePicker2 = DatePickerDialog.OnDateSetListener { view, year, month, dayOfMonth ->
            mycalender2.set(Calendar.YEAR, year)
            mycalender2.set(Calendar.MONTH, month)
            mycalender2.set(Calendar.DAY_OF_MONTH, dayOfMonth)
            updateLable2(mycalender2)

        }
        binding.cardcikistarihi.setOnClickListener {
            DatePickerDialog(
                this, datePicker2, mycalender2.get(Calendar.YEAR), mycalender2.get(Calendar.MONTH),
                mycalender2.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
        val rezId = intent.getStringExtra(REZ_ID_EXRTRA)
        val rezervasyon = rezID(rezId.toString())

        if(rezervasyon!=null)
        {
            runBlocking {
                hizmetListesi.clear()
                val db= DbServices()
                val deferred = async {
                    db.getHizmet(rezervasyon.Hizmet_idHizmet.toString())
                }
                val yenihizmetListesi = deferred.await()
                hizmetListesi.addAll(yenihizmetListesi)
            }
            if (hizmetListesi[0].hizmetTabloAdi=="yurtdisitur")
            {
                for (ydt in yurtdisiviewListesi)
                {
                    if (hizmetListesi[0].hizmetTabloId.toString()== ydt.idYurtdisiTur.toString())
                    {
                                binding.turadi.text=ydt.adi.toString()
                                binding.rezkisisayisi.text="${rezervasyon.yetiskinSayisi.toString()} Yetişkin,${rezervasyon.cocukSayisi.toString()} Çocuk"

                                binding.guzergah.text="${ydt.baslangicKonumu}-->${ydt.guzergah}"
                                if (ydt.vizeDurumu=="Evet")
                                    binding.vize.text="Vizeli"
                                else
                                    binding.vize.text="Vizesiz"

                                val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                                val giristarihi = LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)

                                val gelecekTarih = giristarihi.plusDays(5)
                                val cikistarihiFormatter = DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
                                val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

                                val reztarihi = LocalDate.parse(rezervasyon.tarihi.toString(), formatter)
                                val dateFormatter = DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))
                                val tarihString = reztarihi.format(dateFormatter)

                                val giristarihi2 = LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)
                                val giristring = giristarihi2.format(dateFormatter)
                                binding.reztarihi.text=tarihString.toString()
                                binding.giristarih.text=giristring.toString()
                                binding.cikistarih.text=cikistarihi.toString()
                                Picasso.get().load(ydt.resimUrl).into(binding.turfoto)
                                val yetiskinSayisi = rezervasyon.yetiskinSayisi.toInt()
                                val cocukSayisi = rezervasyon.cocukSayisi.toInt()
                                val fiyat = ydt.fiyat
                                val yetiskinFiyat = yetiskinSayisi * fiyat
                                var cocukFiyat = (cocukSayisi / 2) * fiyat

                                if (cocukSayisi==0)
                                {
                                    val toplamFiyat = yetiskinFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==1)
                                {
                                    cocukFiyat = (0.5 * fiyat).toInt()
                                    val toplamFiyat = yetiskinFiyat + cocukFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==2){
                                    cocukFiyat=fiyat
                                    val toplamFiyat = yetiskinFiyat + cocukFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==3){
                                    cocukFiyat = (1.5 * fiyat).toInt()
                                    val toplamFiyat = yetiskinFiyat + cocukFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==4){
                                    cocukFiyat = (2 * fiyat).toInt()
                                    val toplamFiyat = yetiskinFiyat + cocukFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                    }
                }
                binding.duzenlebtn.setOnClickListener {

                    binding.layoutnormal.visibility=View.GONE
                    binding.layoutg.visibility=View.VISIBLE
                }
                binding.duzenlebtn2.setOnClickListener{
                    IonAlert(this, IonAlert.WARNING_TYPE)
                        .setTitleText("Rezervasyonu Güncellemek istediğine emin misin?")
                        .setConfirmText("Güncelle")
                        .setCancelText("İptal")
                        .setCancelClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                sDialog.dismissWithAnimation()
                            }
                        })
                        .setConfirmClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                updaterez(
                                    rezervasyon.idRezervasyon,
                                    yetiskinsayi2.toString(),
                                    cocuksayi2.toString(),
                                    "2023-07-10 09:00:00",
                                    "2023-07-15 09:00:00"
                                )
                                sDialog.dismissWithAnimation()
                                startActivity(Intent(applicationContext,MainActivity::class.java))
                            }
                        })
                        .show()
                }
                binding.iptaletbtn.setOnClickListener{
                    IonAlert(this, IonAlert.ERROR_TYPE)
                        .setTitleText("Rezervasyonu İptal etmek istediğine emin misin?")
                        .setConfirmText("İptal Et")
                        .setCancelText("Kapat")
                        .setCancelClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                sDialog.dismissWithAnimation()
                            }
                        })
                        .setConfirmClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                deleterez(rezervasyon.idRezervasyon)
                                sDialog.dismissWithAnimation()
                                startActivity(Intent(applicationContext,MainActivity::class.java))
                            }
                        })
                        .show()
                }
                binding.iptaletbtn2.setOnClickListener {
                    binding.layoutnormal.visibility=View.VISIBLE
                    binding.layoutg.visibility=View.GONE
                }
                binding.cardgiristarihi.visibility=View.GONE
                binding.cardcikistarihi.visibility=View.GONE
            }
            else if(hizmetListesi[0].hizmetTabloAdi=="teknetur")
            {
                for (teknetur in tekneturviewListesi)
                {
                    if (hizmetListesi[0].hizmetTabloId.toString()== teknetur.idTekneTur.toString())
                    {
                                binding.turadi.text=teknetur.adi.toString()
                                binding.reztarihi.text=rezervasyon.tarihi.toString()
                                binding.rezkisisayisi.text="${rezervasyon.yetiskinSayisi.toString()} Yetişkin,${rezervasyon.cocukSayisi.toString()} Çocuk"

                                binding.guzergah.text="${teknetur.baslangicKonumu}-->${teknetur.guzergah}"
                                if (teknetur.vizeDurumu=="Evet")
                                    binding.vize.text="Vizeli"
                                else
                                    binding.vize.text="Vizesiz"

                                val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                                val giristarihi = LocalDate.parse(teknetur.baslangicTarihi.toString(), formatter)

                                val gelecekTarih = giristarihi.plusDays(5)
                                val cikistarihiFormatter = DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
                                val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

                                val reztarihi = LocalDate.parse(rezervasyon.tarihi.toString(), formatter)
                                val dateFormatter = DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))
                                val tarihString = reztarihi.format(dateFormatter)

                                val giristarihi2 = LocalDate.parse(teknetur.baslangicTarihi.toString(), formatter)
                                val giristring = giristarihi2.format(dateFormatter)
                                binding.reztarihi.text=tarihString.toString()
                                binding.giristarih.text=giristring.toString()
                                binding.cikistarih.text=cikistarihi.toString()

                                Picasso.get().load(teknetur.resimUrl).into(binding.turfoto)
                                val yetiskinSayisi = rezervasyon.yetiskinSayisi.toInt()
                                val cocukSayisi = rezervasyon.cocukSayisi.toInt()
                                val fiyat = teknetur.fiyat
                                val yetiskinFiyat = yetiskinSayisi * fiyat
                                var cocukFiyat = (cocukSayisi / 2) * fiyat

                                if (cocukSayisi==0)
                                {
                                    val toplamFiyat = yetiskinFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==1)
                                {
                                    cocukFiyat = (0.5 * fiyat).toInt()
                                    val toplamFiyat = yetiskinFiyat + cocukFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==2){
                                    cocukFiyat=fiyat
                                    val toplamFiyat = yetiskinFiyat + cocukFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==3){
                                    cocukFiyat = (1.5 * fiyat).toInt()
                                    val toplamFiyat = yetiskinFiyat + cocukFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==4){
                                    cocukFiyat = (2 * fiyat).toInt()
                                    val toplamFiyat = yetiskinFiyat + cocukFiyat
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                    }
                }
                binding.duzenlebtn.setOnClickListener {

                    binding.layoutnormal.visibility=View.GONE
                    binding.layoutg.visibility=View.VISIBLE
                }
                binding.duzenlebtn2.setOnClickListener {

                    IonAlert(this, IonAlert.WARNING_TYPE)
                        .setTitleText("Rezervasyonu Güncellemek istediğine emin misin?")
                        .setConfirmText("Güncelle")
                        .setCancelText("İptal")
                        .setCancelClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                sDialog.dismissWithAnimation()
                            }
                        })
                        .setConfirmClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                updaterez(
                                    rezervasyon.idRezervasyon,
                                    yetiskinsayi2.toString(),
                                    cocuksayi2.toString(),
                                    "2023-07-10 09:00:00",
                                    "2023-07-15 09:00:00"
                                )
                                sDialog.dismissWithAnimation()
                                startActivity(Intent(applicationContext,MainActivity::class.java))
                            }
                        })
                        .show()
                }
                binding.iptaletbtn.setOnClickListener {
                    IonAlert(this, IonAlert.ERROR_TYPE)
                        .setTitleText("Rezervasyonu İptal etmek istediğine emin misin?")
                        .setConfirmText("İptal Et")
                        .setCancelText("Kapat")
                        .setCancelClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                sDialog.dismissWithAnimation()
                            }
                        })
                        .setConfirmClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                deleterez(rezervasyon.idRezervasyon)
                                sDialog.dismissWithAnimation()
                                startActivity(Intent(applicationContext,MainActivity::class.java))
                            }
                        })
                        .show()
                }
                binding.iptaletbtn2.setOnClickListener {
                    binding.layoutnormal.visibility=View.VISIBLE
                    binding.layoutg.visibility=View.GONE
                }
                binding.cardgiristarihi.visibility=View.GONE
                binding.cardcikistarihi.visibility=View.GONE
            }
            else if(hizmetListesi[0].hizmetTabloAdi=="otel")
            {
                for (otel in otelviewListesi)
                {
                    if (hizmetListesi[0].hizmetTabloId.toString()== otel.idOtel.toString())
                    {

                                binding.turadi.text=otel.adi.toString() +" Otel"
                                binding.reztarihi.text=rezervasyon.tarihi.toString()

                                binding.rezkisisayisi.text="${rezervasyon.yetiskinSayisi.toString()} Yetişkin,${rezervasyon.cocukSayisi.toString()} Çocuk"

                                binding.guzergahtext.text="Adres : "
                                binding.guzergah.text=otel.adres.toString()

                                binding.vizetext.text="Otel Teması : "
                                binding.vize.text=otel.tema.toString()

                                binding.turgiristarihtext.text="Otel Giriş Tarihi : "

                                binding.turcikistarihtext.text="Otel Çıkış Tarihi : "

                                val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")

                                val dateTime = LocalDateTime.parse(rezervasyon.tarihi.toString(), formatter)
                                val dateTime2 = LocalDateTime.parse(rezervasyon.girisTarihi.toString(), formatter)
                                val dateTime3 = LocalDateTime.parse(rezervasyon.cikisTarihi, formatter)

                                val reztarihi = dateTime.format(DateTimeFormatter.ofPattern("dd MMMM yyyy"))
                                val otelgiristarihi = dateTime2.format(DateTimeFormatter.ofPattern("dd MMMM yyyy"))
                                val otelcikistarihi = dateTime3.format(DateTimeFormatter.ofPattern("dd MMMM yyyy"))

                                binding.reztarihi.text=reztarihi.toString()
                                binding.giristarih.text=otelgiristarihi.toString()
                                binding.cikistarih.text=otelcikistarihi.toString()

                                Picasso.get().load(otel.resimUrl).into(binding.turfoto)

                                val formatter2 = DateTimeFormatter.ofPattern("dd MMMM yyyy")


                                val girisTarihi = LocalDate.parse(otelgiristarihi, formatter2)
                                val cikisTarihi = LocalDate.parse(otelcikistarihi, formatter2)

                                val gunSayisi = ChronoUnit.DAYS.between(girisTarihi, cikisTarihi)
                                val yetiskinSayisi = rezervasyon.yetiskinSayisi.toInt()
                                val cocukSayisi = rezervasyon.cocukSayisi.toInt()
                                val fiyat = otel.fiyat
                                val yetiskinFiyat = yetiskinSayisi * fiyat
                                var cocukFiyat = (cocukSayisi / 2) * fiyat

                                if (cocukSayisi==0)
                                {
                                    val toplamFiyat = yetiskinFiyat *gunSayisi
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==1)
                                {
                                    cocukFiyat = (0.5 * fiyat).toInt()
                                    val toplamFiyat = (yetiskinFiyat + cocukFiyat)*gunSayisi
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==2){
                                    cocukFiyat=fiyat
                                    val toplamFiyat = (yetiskinFiyat + cocukFiyat)*gunSayisi
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==3){
                                    cocukFiyat = (1.5 * fiyat).toInt()
                                    val toplamFiyat = (yetiskinFiyat + cocukFiyat)*gunSayisi
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }
                                else if(cocukSayisi==4){
                                    cocukFiyat = (2 * fiyat).toInt()
                                    val toplamFiyat = (yetiskinFiyat + cocukFiyat)*gunSayisi
                                    binding.rezfiyat.text=toplamFiyat.toString()+" TL"
                                }

                    }
                }
                binding.duzenlebtn.setOnClickListener {

                    binding.layoutnormal.visibility=View.GONE
                    binding.layoutg.visibility=View.VISIBLE

                }
                binding.duzenlebtn2.setOnClickListener {
                    val sdf = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                    val giristarihi = sdf.format(mycalender.time)
                    val cikistarihi = sdf.format(mycalender2.time)

                    IonAlert(this, IonAlert.WARNING_TYPE)
                        .setTitleText("Rezervasyonu Güncellemek istediğine emin misin?")
                        .setConfirmText("Güncelle")
                        .setCancelText("İptal")
                        .setCancelClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                sDialog.dismissWithAnimation()
                            }
                        })
                        .setConfirmClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                updaterez(
                                    rezervasyon.idRezervasyon,
                                    yetiskinsayi2.toString(),
                                    cocuksayi2.toString(),
                                    giristarihi.toString(),
                                    cikistarihi.toString()
                                )
                                sDialog.dismissWithAnimation()
                                startActivity(Intent(applicationContext,MainActivity::class.java))
                            }
                        })
                        .show()

                }
                binding.iptaletbtn.setOnClickListener {
                    IonAlert(this, IonAlert.ERROR_TYPE)
                        .setTitleText("Rezervasyonu İptal etmek istediğine emin misin?")
                        .setConfirmText("İptal Et")
                        .setCancelText("Kapat")
                        .setCancelClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                sDialog.dismissWithAnimation()
                            }
                        })
                        .setConfirmClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                deleterez(rezervasyon.idRezervasyon)
                                sDialog.dismissWithAnimation()
                                startActivity(Intent(applicationContext,MainActivity::class.java))
                            }
                        })
                        .show()
                }
                binding.iptaletbtn2.setOnClickListener {
                    binding.layoutnormal.visibility=View.VISIBLE
                    binding.layoutg.visibility=View.GONE
                }
                binding.cardgiristarihi.visibility=View.VISIBLE
                binding.cardcikistarihi.visibility=View.VISIBLE
            }

        }
    }
    private fun rezID(rezid: String): Rezervasyon? {
        for (REZ in rezervasyonListesi) {
            if (REZ.idRezervasyon.toString() == rezid.toString())
                return REZ
        }
        return null
    }
    private fun updateLable(mycalender: Calendar) {
        val sdf = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        binding.giristarihi.text = sdf.format(mycalender.time)
        binding.giristarihi.visibility = View.VISIBLE
    }
    private fun updateLable2(mycalender2: Calendar) {
        val sdf2 = SimpleDateFormat("dd MMMM yyyy", Locale("tr"))
        binding.cikistarihi.text = sdf2.format(mycalender2.time)
        binding.cikistarihi.visibility = View.VISIBLE
    }
    private fun deleterez(
        id: String
    ) {
        GlobalScope.launch {
            val client = OkHttpClient()
            val formBody = FormBody.Builder()
                .add("id", id.toString())
                .build()
            val request = Request.Builder()
                .url(url + "deleteRezervasyon")
                .post(formBody)
                .build()
            val response = client.newCall(request).execute()
            Log.d("response", response.toString())
        }
    }
    private fun updaterez(
        id: String,
        yetiskinsayi: String,
        cocuksayi: String,
        giristarihi: String,
        cikistarihi: String,
    )
    {
        GlobalScope.launch {
            val client = OkHttpClient()
            val formBody = FormBody.Builder()
                .add("id",id )
                .add("yetiskinSayisi",yetiskinsayi)
                .add("cocukSayisi", cocuksayi)
                .add("girisTarihi",giristarihi)
                .add("cikisTarihi",cikistarihi)
                .build()
            val request = Request.Builder()
                .url(url + "updateRezervasyon")
                .post(formBody)
                .build()
            val response = client.newCall(request).execute()
            Log.d("response", response.toString())
        }
    }
}
package com.muhammetcakir.turizmacentasi.Views

import android.content.Intent
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import androidx.annotation.RequiresApi
import com.muhammetcakir.turizmacentasi.*

import com.muhammetcakir.turizmacentasi.Models.TekneTurView
import com.muhammetcakir.turizmacentasi.databinding.ActivityTekneTurlariBinding

import com.squareup.picasso.Picasso
import id.ionbit.ionalert.IonAlert
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.*


class TekneTurlariActivity : AppCompatActivity() {
    private lateinit var binding: ActivityTekneTurlariBinding
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityTekneTurlariBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()


        val ttId = intent.getStringExtra(TT_ID_EXTRA)
        val teknetur = ttFromID(ttId.toString())

        if (teknetur != null) {


            binding.rezislemleri.setOnClickListener {
                if(kullanankisi.isEmpty())
                {
                    IonAlert(this, IonAlert.WARNING_TYPE)
                        .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                        .setConfirmText("Giriş Yap")
                        .setCancelText("Kapat")
                        .setConfirmClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {
                                startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                sDialog.dismissWithAnimation()
                            }
                        })
                        .setCancelClickListener(object : IonAlert.ClickListener {
                            override fun onClick(sDialog: IonAlert) {

                                sDialog.dismissWithAnimation()
                            }
                        })
                        .show()
                }
                else{
                    val intent = Intent(this, RezervasyonActivity::class.java)
                    intent.putExtra(TP_ID_EXTRA, "Tekne")
                    intent.putExtra(TT_ID_EXTRA, teknetur.idTekneTur.toString())
                    startActivity(intent)
                    finish()
                }
            }
                binding.turadi.text = teknetur.adi.toString()
                binding.guzergah.text =
                    teknetur.baslangicKonumu.toString() + " -->" + teknetur.guzergah.toString()
                binding.fiyat.text = "Kişi Başı " + teknetur.fiyat.toString() + " TL"
                val formatter =
                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                val giristarihi = LocalDate.parse(teknetur.baslangicTarihi.toString(), formatter)

                val gelecekTarih = giristarihi.plusDays(5)
                val cikistarihiFormatter =
                    DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
                val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

                val dateFormatter =
                    DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))

                val giristarihi2 =
                    LocalDate.parse(teknetur.baslangicTarihi.toString(), formatter)
                val giristring = giristarihi2.format(dateFormatter)
                binding.tarih.text=giristring.toString()+" - "+cikistarihi.toString()
                Picasso.get().load(teknetur.resimUrl).into(binding.cover)


                val gunbir = teknetur.gunBir.toString()
                val birincigunbaslik =
                    gunbir.substring(gunbir.indexOf("(") + 1, gunbir.indexOf(")"))
                val birincigunparagraf = gunbir.substring(gunbir.indexOf(")") + 2)
                binding.birincigunparagraf.text = birincigunparagraf.toString()
                binding.birincigunbaslik.text = birincigunbaslik

                val guniki = teknetur.gunIki.toString()
                val ikincigunbaslik = guniki.substring(guniki.indexOf("(") + 1, guniki.indexOf(")"))
                val ikincigunparagraf = guniki.substring(guniki.indexOf(")") + 2)
                binding.ikincigunbaslikparagraf.text = ikincigunparagraf
                binding.ikincigunbaslik.text = ikincigunbaslik

                val gunuc = teknetur.gunUc.toString()
                val ucuncugunbaslik = gunuc.substring(gunuc.indexOf("(") + 1, gunuc.indexOf(")"))
                val ucuncugunparagraf = gunuc.substring(gunuc.indexOf(")") + 2)
                binding.ucuncugunparagraf.text = ucuncugunparagraf
                binding.ucuncugunbaslik.text = ucuncugunbaslik

                val gundort = teknetur.gunDort.toString()
                val dorduncugunbaslik =
                    gundort.substring(gundort.indexOf("(") + 1, gundort.indexOf(")"))
                val dorduncugunparagraf = gundort.substring(gundort.indexOf(")") + 2)
                binding.dorduncugunparagraf.text = dorduncugunparagraf
                binding.dorduncugunbaslik.text = dorduncugunbaslik

                val gunbes = teknetur.gunBes.toString()
                val besincigunbaslik =
                    gunbes.substring(gunbes.indexOf("(") + 1, gunbes.indexOf(")"))
                val besincigunparagraf = gunbes.substring(gunbes.indexOf(")") + 2)
                binding.besincigunparagraf.text = besincigunparagraf
                binding.besincigunbaslik.text = besincigunbaslik



        }
    }

    private fun ttFromID(ttId: String): TekneTurView? {
        for (tt in tekneturviewListesi) {
            if (tt.idTekneTur == ttId)
                return tt
        }
        return null
    }
}
package com.muhammetcakir.turizmacentasi.Views

import android.content.Intent
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.transition.AutoTransition
import android.transition.TransitionManager
import android.view.View
import androidx.annotation.RequiresApi
import com.muhammetcakir.turizmacentasi.*
import com.muhammetcakir.turizmacentasi.Database.DbServices
import com.muhammetcakir.turizmacentasi.Models.YurtDisiTurView
import com.muhammetcakir.turizmacentasi.Models.YurtdisiTur
import com.muhammetcakir.turizmacentasi.databinding.ActivityYurtdisidetayBinding
import com.squareup.picasso.Picasso
import id.ionbit.ionalert.IonAlert
import kotlinx.coroutines.async
import kotlinx.coroutines.runBlocking
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.*

class YurtdisidetayActivity : AppCompatActivity() {
    private lateinit var binding: ActivityYurtdisidetayBinding
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding= ActivityYurtdisidetayBinding.inflate(layoutInflater)
        setContentView(binding.root)
        supportActionBar!!.hide()

        binding.turprogramibtn.setOnClickListener {
            if (binding.layoutturprogrami.visibility == View.GONE) {
                TransitionManager.beginDelayedTransition(binding.genelturlayout, AutoTransition())
                binding.layoutturprogrami.visibility = View.VISIBLE
            } else {
                TransitionManager.beginDelayedTransition(binding.genelturlayout, AutoTransition())
                binding.layoutturprogrami.visibility = View.GONE
            }
        }

        val ydtId = intent.getStringExtra(YDT_ID_EXTRA)
        val ydt = ydtFromID(ydtId.toString())

        if (ydt!=null)
        {
                binding.rezislemleri.setOnClickListener {
                    if(kullanankisi.isEmpty())
                    {
                        IonAlert(this, IonAlert.WARNING_TYPE)
                            .setTitleText("Rezervasyon Yapmak için Lütfen Giriş Yapın.")
                            .setConfirmText("Giriş Yap")
                            .setCancelText("Kapat")
                            .setConfirmClickListener(object : IonAlert.ClickListener {
                                override fun onClick(sDialog: IonAlert) {
                                    startActivity(Intent(applicationContext, GirisYapActivity::class.java))
                                    sDialog.dismissWithAnimation()
                                }
                            })
                            .setCancelClickListener(object : IonAlert.ClickListener {
                                override fun onClick(sDialog: IonAlert) {

                                    sDialog.dismissWithAnimation()
                                }
                            })
                            .show()
                    }
                    else
                    {
                        val intent = Intent(this, RezervasyonActivity::class.java)
                        intent.putExtra(TP_ID_EXTRA,"YurtDisi")
                        intent.putExtra(YDT_ID_EXTRA, ydt.idYurtdisiTur.toString())
                        startActivity(intent)
                        finish()
                    }

                }
                    binding.turadi.text=ydt.adi.toString()
                    binding.Turbaslangic.text= ydt.baslangicKonumu.toString()+" -->"
                    binding.Turguzergah.text=ydt.guzergah.toString()
                    binding.turfiyat.text="Kişi Başı "+ydt.fiyat.toString()+" TL"

                val formatter =
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                val giristarihi = LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)

                val gelecekTarih = giristarihi.plusDays(5)
                val cikistarihiFormatter =
                DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
                val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

                val dateFormatter =
                DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))

                val giristarihi2 =
                LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)
                val giristring = giristarihi2.format(dateFormatter)
                    binding.turtarih.text=giristring.toString()+" - "+cikistarihi.toString()
                    Picasso.get().load(ydt.resimUrl).into(binding.yurtdisifoto)


                    val gunbir =  ydt.gunBir.toString()
                    val birincigunbaslik = gunbir.substring(gunbir.indexOf("(") + 1, gunbir.indexOf(")"))
                    val birincigunparagraf= gunbir.substring(gunbir.indexOf(")") + 2)
                    binding.birincigunparagraf.text= birincigunparagraf.toString()
                    binding.birincigunbaslik.text= birincigunbaslik

                    val guniki =  ydt.gunIki.toString()
                    val ikincigunbaslik = guniki.substring(guniki.indexOf("(") + 1, guniki.indexOf(")"))
                    val ikincigunparagraf= guniki.substring(guniki.indexOf(")") + 2)
                    binding.ikincigunbaslikparagraf.text= ikincigunparagraf
                    binding.ikincigunbaslik.text= ikincigunbaslik

                    val gunuc =  ydt.gunUc.toString()
                    val ucuncugunbaslik = gunuc.substring(gunuc.indexOf("(") + 1, gunuc.indexOf(")"))
                    val ucuncugunparagraf= gunuc.substring(gunuc.indexOf(")") + 2)
                    binding.ucuncugunparagraf.text= ucuncugunparagraf
                    binding.ucuncugunbaslik.text= ucuncugunbaslik

                    val gundort =  ydt.gunDort.toString()
                    val dorduncugunbaslik = gundort.substring(gundort.indexOf("(") + 1, gundort.indexOf(")"))
                    val dorduncugunparagraf= gundort.substring(gundort.indexOf(")") + 2)
                    binding.dorduncugunparagraf.text= dorduncugunparagraf
                    binding.dorduncugunbaslik.text= dorduncugunbaslik

                    val gunbes = ydt.gunBes.toString()
                    val besincigunbaslik = gunbes.substring(gunbes.indexOf("(") + 1, gunbes.indexOf(")"))
                    val besincigunparagraf= gunbes.substring(gunbes.indexOf(")") + 2)
                    binding.besincigunparagraf.text= besincigunparagraf
                    binding.besincigunbaslik.text= besincigunbaslik
        }

    }
    private fun ydtFromID(ydtId: String): YurtDisiTurView? {
        for (ydt in yurtdisiviewListesi) {
            if (ydt.idYurtdisiTur == ydtId)
                return ydt
        }
        return null
    }

}
package com.muhammetcakir.turizmacentasi.Adapters





import android.content.Context
import android.view.LayoutInflater
import android.view.ViewGroup

import androidx.recyclerview.widget.RecyclerView

import com.muhammetcakir.turizmacentasi.ClickListener.Clicktotel


import com.muhammetcakir.turizmacentasi.Models.*
import com.muhammetcakir.turizmacentasi.R
import com.muhammetcakir.turizmacentasi.databinding.OtelKutucaklariBinding

import com.squareup.picasso.Picasso




class OtellerAdapter(
    var otellist:ArrayList<OtelView>,
    var context: Context,
    var clickotel: Clicktotel
): RecyclerView.Adapter<OtellerAdapter.CardViewHolder>()
{
    class CardViewHolder(private val cardCellBinding: OtelKutucaklariBinding, var otellist:ArrayList<OtelView>, var context: Context,var clickotel: Clicktotel): RecyclerView.ViewHolder(cardCellBinding.root)
    {
        fun find(otel: OtelView)
        {
                    cardCellBinding.otelad.text=otel.adi.toString()
                    cardCellBinding.otelfiyat.text=otel.fiyat.toString()+ " TL"
                    Picasso.get().load(otel.resimUrl).into(cardCellBinding.otelfoto)
                    cardCellBinding.otelkonum.text= otel.adres.toString()
                    cardCellBinding.otelpuan.text=otel.puan.toString()
                    if (otel.tema.toString()=="Tatil Köyü")
                    {
                        cardCellBinding.tema.text=otel.tema.toString()
                    }
                    else{
                        cardCellBinding.tema.text=otel.tema.toString()+"i"
                    }
                    cardCellBinding.btndetay.setOnClickListener {
                        clickotel.onclickotel(otel)
                    }
        }
    }
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CardViewHolder {
        val from = LayoutInflater.from(parent.context)
        val binding = OtelKutucaklariBinding.inflate(from, parent, false)
        return CardViewHolder(binding,otellist,context,clickotel)
    }
    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {
        holder.find(otellist[position])
    }
    override fun getItemCount(): Int = otellist.size
}
package com.muhammetcakir.turizmacentasi.Adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.muhammetcakir.turizmacentasi.ClickListener.Clickpopulerbolgeler
import com.muhammetcakir.turizmacentasi.Models.PopulerBolgeler
import com.muhammetcakir.turizmacentasi.databinding.PopulerKutucuklariBinding


class PopulerBolgeAdapters(
    var populerbolgelerlist:ArrayList<PopulerBolgeler>,
    var clickpop:Clickpopulerbolgeler
): RecyclerView.Adapter<PopulerBolgeAdapters.CardViewHolder>()
{
    class CardViewHolder(private val cardCellBinding: PopulerKutucuklariBinding,var clickpop:Clickpopulerbolgeler):RecyclerView.ViewHolder(cardCellBinding.root)
    {

        fun find(sehir: PopulerBolgeler)
        {
            cardCellBinding.populerbolgefotosu.setImageResource(sehir.sehirfotosu)
            cardCellBinding.populerbolgeadi.text=sehir.sehiradi
            cardCellBinding.cardpopbolge.setOnClickListener {
                clickpop.onclickpopuler(sehir)
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CardViewHolder {
        val from = LayoutInflater.from(parent.context)
        val binding = PopulerKutucuklariBinding.inflate(from, parent, false)
        return CardViewHolder(binding,clickpop)
    }

    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {
        holder.find(populerbolgelerlist[position])
    }

    override fun getItemCount(): Int = populerbolgelerlist.size
}
package com.muhammetcakir.turizmacentasi.Adapters

import android.content.Context
import android.os.Build
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.annotation.RequiresApi
import androidx.recyclerview.widget.RecyclerView
import com.muhammetcakir.turizmacentasi.*
import com.muhammetcakir.turizmacentasi.ClickListener.Clickrezervasyon
import com.muhammetcakir.turizmacentasi.ClickListener.Clicktotel
import com.muhammetcakir.turizmacentasi.Database.*
import com.muhammetcakir.turizmacentasi.Models.HizmetBilgisi
import com.muhammetcakir.turizmacentasi.Models.Otel
import com.muhammetcakir.turizmacentasi.Models.Rezervasyon
import com.muhammetcakir.turizmacentasi.databinding.OtelKutucaklariBinding
import com.muhammetcakir.turizmacentasi.databinding.RezervasyonKutucuklariBinding
import com.squareup.picasso.Picasso
import kotlinx.coroutines.async
import kotlinx.coroutines.runBlocking
import java.text.SimpleDateFormat
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import java.util.*
import kotlin.collections.ArrayList


class RezervasyonlarimAdapter(
    var rezervasyonlarimlist: ArrayList<Rezervasyon>,
    var clickrez: Clickrezervasyon
) : RecyclerView.Adapter<RezervasyonlarimAdapter.CardViewHolder>() {
    class CardViewHolder(
        private val cardCellBinding: RezervasyonKutucuklariBinding,
        var rezervasyonlarimlist: ArrayList<Rezervasyon>,
        var clickrez: Clickrezervasyon
    ) : RecyclerView.ViewHolder(cardCellBinding.root) {
        @RequiresApi(Build.VERSION_CODES.O)
        fun find(rezervasyon: Rezervasyon) {
            runBlocking {
                hizmetListesi.clear()
                val db = DbServices()
                val deferred = async {
                    db.getHizmet(rezervasyon.Hizmet_idHizmet.toString())
                }
                val yenihizmetListesi = deferred.await()
                hizmetListesi.addAll(yenihizmetListesi)
            }
            if (hizmetListesi[0].hizmetTabloAdi == "yurtdisitur")
            {
                for (ydt in yurtdisiviewListesi) {
                    if (hizmetListesi[0].hizmetTabloId.toString() == ydt.idYurtdisiTur.toString()) {
                        cardCellBinding.duzenlebtn.setOnClickListener {
                            clickrez.onclickrezervasyon(rezervasyon)
                        }
                        cardCellBinding.turadi.text = ydt.adi.toString()
                        cardCellBinding.rezkisisayisi.text =
                            "${rezervasyon.yetiskinSayisi.toString()} Yetişkin,${rezervasyon.cocukSayisi.toString()} Çocuk"
                        cardCellBinding.musteriadsoyad.text =
                            kullanankisi[0].adi.toString() + " " + kullanankisi[0].soyadi.toString()
                        cardCellBinding.telno.text = kullanankisi[0].telefonNumarasi.toString()
                        cardCellBinding.guzergah.text = "${ydt.baslangicKonumu}-->${ydt.guzergah}"
                        if (ydt.vizeDurumu == "Evet")
                            cardCellBinding.vize.text = "Vizeli"
                        else
                            cardCellBinding.vize.text = "Vizesiz"

                        val formatter =
                            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                        val giristarihi = LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)

                        val gelecekTarih = giristarihi.plusDays(5)
                        val cikistarihiFormatter =
                            DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
                        val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

                        val reztarihi = LocalDate.parse(rezervasyon.tarihi.toString(), formatter)
                        val dateFormatter =
                            DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))
                        val tarihString = reztarihi.format(dateFormatter)

                        val giristarihi2 =
                            LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)
                        val giristring = giristarihi2.format(dateFormatter)
                        cardCellBinding.reztarihi.text = tarihString.toString()
                        cardCellBinding.giristarih.text = giristring.toString()
                        cardCellBinding.cikistarih.text = cikistarihi.toString()
                        Picasso.get().load(ydt.resimUrl).into(cardCellBinding.turfoto)

                        var yetiskinSayisi = rezervasyon.yetiskinSayisi
                        var cocukSayisi = rezervasyon.cocukSayisi
                        val fiyat = ydt.fiyat
                        val yetiskinFiyat = yetiskinSayisi * fiyat
                        var cocukFiyat = (cocukSayisi / 2) * fiyat

                        if (cocukSayisi == 0) {
                            val toplamFiyat = yetiskinFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 1) {
                            cocukFiyat = (0.5 * fiyat).toInt()
                            val toplamFiyat = yetiskinFiyat + cocukFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 2) {
                            cocukFiyat = fiyat
                            val toplamFiyat = yetiskinFiyat + cocukFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 3) {
                            cocukFiyat = (1.5 * fiyat).toInt()
                            val toplamFiyat = yetiskinFiyat + cocukFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 4) {
                            cocukFiyat = (2 * fiyat).toInt()
                            val toplamFiyat = yetiskinFiyat + cocukFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        }
                    }
                }
            }
            else if (hizmetListesi[0].hizmetTabloAdi == "teknetur")
            {
                for (teknetur in tekneturviewListesi) {
                    if (hizmetListesi[0].hizmetTabloId.toString() == teknetur.idTekneTur.toString()) {
                        cardCellBinding.duzenlebtn.setOnClickListener {
                            clickrez.onclickrezervasyon(rezervasyon)
                        }
                        cardCellBinding.turadi.text = teknetur.adi.toString()
                        cardCellBinding.reztarihi.text = rezervasyon.tarihi.toString()
                        cardCellBinding.rezkisisayisi.text =
                            "${rezervasyon.yetiskinSayisi.toString()} Yetişkin,${rezervasyon.cocukSayisi.toString()} Çocuk"

                        cardCellBinding.musteriadsoyad.text =
                            kullanankisi[0].adi.toString() + " " + kullanankisi[0].soyadi.toString()
                        cardCellBinding.telno.text = kullanankisi[0].telefonNumarasi.toString()
                        cardCellBinding.guzergah.text =
                            "${teknetur.baslangicKonumu}-->${teknetur.guzergah}"
                        if (teknetur.vizeDurumu == "Evet")
                            cardCellBinding.vize.text = "Vizeli"
                        else
                            cardCellBinding.vize.text = "Vizesiz"

                        val formatter =
                            DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
                        val giristarihi =
                            LocalDate.parse(teknetur.baslangicTarihi.toString(), formatter)

                        val gelecekTarih = giristarihi.plusDays(5)
                        val cikistarihiFormatter =
                            DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
                        val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

                        val reztarihi = LocalDate.parse(rezervasyon.tarihi.toString(), formatter)
                        val dateFormatter =
                            DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))
                        val tarihString = reztarihi.format(dateFormatter)

                        val giristarihi2 =
                            LocalDate.parse(teknetur.baslangicTarihi.toString(), formatter)
                        val giristring = giristarihi2.format(dateFormatter)
                        cardCellBinding.reztarihi.text = tarihString.toString()
                        cardCellBinding.giristarih.text = giristring.toString()
                        cardCellBinding.cikistarih.text = cikistarihi.toString()

                        Picasso.get().load(teknetur.resimUrl).into(cardCellBinding.turfoto)
                        val yetiskinSayisi = rezervasyon.yetiskinSayisi.toInt()
                        val cocukSayisi = rezervasyon.cocukSayisi.toInt()
                        val fiyat = teknetur.fiyat
                        val yetiskinFiyat = yetiskinSayisi * fiyat
                        var cocukFiyat = (cocukSayisi / 2) * fiyat

                        if (cocukSayisi == 0) {
                            val toplamFiyat = yetiskinFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 1) {
                            cocukFiyat = (0.5 * fiyat).toInt()
                            val toplamFiyat = yetiskinFiyat + cocukFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 2) {
                            cocukFiyat = fiyat
                            val toplamFiyat = yetiskinFiyat + cocukFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 3) {
                            cocukFiyat = (1.5 * fiyat).toInt()
                            val toplamFiyat = yetiskinFiyat + cocukFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 4) {
                            cocukFiyat = (2 * fiyat).toInt()
                            val toplamFiyat = yetiskinFiyat + cocukFiyat
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        }

                    }
                }
            }
            else if (hizmetListesi[0].hizmetTabloAdi == "otel")
            {
                for (otel in otelviewListesi) {
                    if (hizmetListesi[0].hizmetTabloId.toString() == otel.idOtel.toString()) {
                        cardCellBinding.duzenlebtn.setOnClickListener {
                            clickrez.onclickrezervasyon(rezervasyon)
                        }
                        cardCellBinding.turadi.text = otel.adi.toString() + " Otel"
                        cardCellBinding.reztarihi.text = rezervasyon.tarihi.toString()

                        cardCellBinding.rezkisisayisi.text =
                            "${rezervasyon.yetiskinSayisi.toString()} Yetişkin,${rezervasyon.cocukSayisi.toString()} Çocuk"

                        cardCellBinding.musteriadsoyad.text =
                            kullanankisi[0].adi.toString() + " " + kullanankisi[0].soyadi.toString()
                        cardCellBinding.telno.text = kullanankisi[0].telefonNumarasi.toString()

                        cardCellBinding.guzergahtext.text = "Adres : "
                        cardCellBinding.guzergah.text = otel.adres.toString()

                        cardCellBinding.vizetext.text = "Otel Teması : "
                        cardCellBinding.vize.text = otel.tema.toString()

                        cardCellBinding.turgiristarihtext.text = "Otel Giriş Tarihi : "

                        cardCellBinding.turcikistarihtext.text = "Otel Çıkış Tarihi : "

                        val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")

                        val dateTime = LocalDateTime.parse(rezervasyon.tarihi.toString(), formatter)
                        val dateTime2 =
                            LocalDateTime.parse(rezervasyon.girisTarihi.toString(), formatter)
                        val dateTime3 = LocalDateTime.parse(rezervasyon.cikisTarihi, formatter)

                        val reztarihi = dateTime.format(DateTimeFormatter.ofPattern("dd MMMM yyyy"))
                        val otelgiristarihi =
                            dateTime2.format(DateTimeFormatter.ofPattern("dd MMMM yyyy"))
                        val otelcikistarihi =
                            dateTime3.format(DateTimeFormatter.ofPattern("dd MMMM yyyy"))

                        cardCellBinding.reztarihi.text = reztarihi.toString()
                        cardCellBinding.giristarih.text = otelgiristarihi.toString()
                        cardCellBinding.cikistarih.text = otelcikistarihi.toString()

                        Picasso.get().load(otel.resimUrl).into(cardCellBinding.turfoto)

                        val formatter2 = DateTimeFormatter.ofPattern("dd MMMM yyyy")


                        val girisTarihi = LocalDate.parse(otelgiristarihi, formatter2)
                        val cikisTarihi = LocalDate.parse(otelcikistarihi, formatter2)

                        val gunSayisi = ChronoUnit.DAYS.between(girisTarihi, cikisTarihi)
                        val yetiskinSayisi = rezervasyon.yetiskinSayisi.toInt()
                        val cocukSayisi = rezervasyon.cocukSayisi.toInt()
                        val fiyat = otel.fiyat
                        val yetiskinFiyat = yetiskinSayisi * fiyat
                        var cocukFiyat = (cocukSayisi / 2) * fiyat

                        if (cocukSayisi == 0) {
                            val toplamFiyat = yetiskinFiyat * gunSayisi
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 1) {
                            cocukFiyat = (0.5 * fiyat).toInt()
                            val toplamFiyat = (yetiskinFiyat + cocukFiyat) * gunSayisi
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 2) {
                            cocukFiyat = fiyat
                            val toplamFiyat = (yetiskinFiyat + cocukFiyat) * gunSayisi
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 3) {
                            cocukFiyat = (1.5 * fiyat).toInt()
                            val toplamFiyat = (yetiskinFiyat + cocukFiyat) * gunSayisi
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        } else if (cocukSayisi == 4) {
                            cocukFiyat = (2 * fiyat).toInt()
                            val toplamFiyat = (yetiskinFiyat + cocukFiyat) * gunSayisi
                            cardCellBinding.rezfiyat.text = toplamFiyat.toString() + " TL"
                        }

                    }
                }
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CardViewHolder {
        val from = LayoutInflater.from(parent.context)
        val binding = RezervasyonKutucuklariBinding.inflate(from, parent, false)
        return CardViewHolder(binding, rezervasyonlarimlist, clickrez)
    }

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {
        holder.find(rezervasyonlarimlist[position])
    }

    override fun getItemCount(): Int = rezervasyonlarimlist.size
}
package com.muhammetcakir.turizmacentasi.Adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.RecyclerView
import com.muhammetcakir.turizmacentasi.ClickListener.Clicktema
import com.muhammetcakir.turizmacentasi.Models.PopulerBolgeler
import com.muhammetcakir.turizmacentasi.Models.TatilTemalari
import com.muhammetcakir.turizmacentasi.databinding.PopulerKutucuklariBinding
import com.muhammetcakir.turizmacentasi.databinding.TatiltemalariKutucuklariBinding


class TatilTemalariAdapters(
    var tatiltemalari:ArrayList<TatilTemalari>,
    var clicktema:Clicktema
): RecyclerView.Adapter<TatilTemalariAdapters.CardViewHolder>()
{
    class CardViewHolder(private val cardCellBinding: TatiltemalariKutucuklariBinding,var clicktema:Clicktema): RecyclerView.ViewHolder(cardCellBinding.root)
    {
        fun find(tema: TatilTemalari)
        {
            cardCellBinding.tatiltemasifotosu.setImageResource(tema.temafotosu)
            cardCellBinding.tatiltemasiadi.text=tema.temaadi
            cardCellBinding.cardtema.setOnClickListener {
                clicktema.onclicktema(tema)
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CardViewHolder {
        val from = LayoutInflater.from(parent.context)
        val binding = TatiltemalariKutucuklariBinding.inflate(from, parent, false)
        return CardViewHolder(binding,clicktema)
    }

    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {
        holder.find(tatiltemalari[position])
    }
    override fun getItemCount(): Int = tatiltemalari.size
}
package com.muhammetcakir.turizmacentasi.Adapters

import android.content.Context
import android.os.Build
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.annotation.RequiresApi
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.RecyclerView
import com.muhammetcakir.turizmacentasi.ClickListener.ClicktekneTur
import com.muhammetcakir.turizmacentasi.Models.TekneTurView
import com.muhammetcakir.turizmacentasi.R
import com.muhammetcakir.turizmacentasi.databinding.YurtdisiKutucuklariBinding
import com.squareup.picasso.Picasso
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.*
import kotlin.collections.ArrayList


class TekneTurAdapter(
    var teknetur: ArrayList<TekneTurView>,
    var context: Context,
    var clicktektur: ClicktekneTur
) : RecyclerView.Adapter<TekneTurAdapter.CardViewHolder>() {
    class CardViewHolder(
        private val cardCellBinding: YurtdisiKutucuklariBinding,
        var teknetur: ArrayList<TekneTurView>,
        var context: Context,
        var clicktektur: ClicktekneTur
    ) : RecyclerView.ViewHolder(cardCellBinding.root) {
        @RequiresApi(Build.VERSION_CODES.O)

        fun find(ttur: TekneTurView) {

            cardCellBinding.yurtdisituradi.text = ttur.adi.toString()
            cardCellBinding.yurtdisifiyat.text = ttur.fiyat.toString() + " TL"
            Picasso.get().load(ttur.resimUrl).into(cardCellBinding.yurtdisiulkefoto)
            cardCellBinding.yurtdisibaslangic.text = ttur.baslangicKonumu.toString() + "-->"
            cardCellBinding.yurtdisiguzergah.text = ttur.guzergah.toString()

            val formatter =
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
            val giristarihi = LocalDate.parse(ttur.baslangicTarihi.toString(), formatter)

            val gelecekTarih = giristarihi.plusDays(5)
            val cikistarihiFormatter =
                DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
            val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

            val dateFormatter =
                DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))

            val giristarihi2 =
                LocalDate.parse(ttur.baslangicTarihi.toString(), formatter)
            val giristring = giristarihi2.format(dateFormatter)

            cardCellBinding.yurtdisitarihler.text = giristring.toString()+" - "+cikistarihi.toString()
            if (ttur.vizeDurumu == "Evet") {
                cardCellBinding.yurtdisivizedurumu.text = "Vizeli"
                cardCellBinding.cardvize.setCardBackgroundColor(
                    ContextCompat.getColor(
                        context,
                        R.color.Teal_800
                    )
                )
            }

            cardCellBinding.btndetay.setOnClickListener {
                clicktektur.onclickteknetur(ttur)
            }

        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CardViewHolder {
        val from = LayoutInflater.from(parent.context)
        val binding = YurtdisiKutucuklariBinding.inflate(from, parent, false)
        return CardViewHolder(binding, teknetur, context, clicktektur)
    }

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {
        holder.find(teknetur[position])
    }

    override fun getItemCount(): Int = teknetur.size
}
package com.muhammetcakir.turizmacentasi.Adapters

import android.content.Context
import android.os.Build
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.annotation.RequiresApi
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.RecyclerView

import com.muhammetcakir.turizmacentasi.ClickListener.ClickyurtDisiTurView

import com.muhammetcakir.turizmacentasi.Models.YurtDisiTurView

import com.muhammetcakir.turizmacentasi.R
import com.muhammetcakir.turizmacentasi.databinding.YurtdisiKutucuklariBinding

import com.squareup.picasso.Picasso
import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.util.*
import kotlin.collections.ArrayList


class YurtDisiTurAdapter(
    var yurtdisitur:ArrayList<YurtDisiTurView>,
    var context: Context,
    var clickyurtDisiTur: ClickyurtDisiTurView
): RecyclerView.Adapter<YurtDisiTurAdapter.CardViewHolder>()
{
    class CardViewHolder(private val cardCellBinding: YurtdisiKutucuklariBinding, var yurtdisitur:ArrayList<YurtDisiTurView>,var clickyurtDisiTur: ClickyurtDisiTurView,var context: Context, ): RecyclerView.ViewHolder(cardCellBinding.root)
    {
        @RequiresApi(Build.VERSION_CODES.O)
        fun find(ydt: YurtDisiTurView)
        {
            cardCellBinding.yurtdisituradi.text=ydt.adi.toString()
            cardCellBinding.yurtdisifiyat.text=ydt.fiyat.toString()+ " TL"
            Picasso.get().load(ydt.resimUrl).into(cardCellBinding.yurtdisiulkefoto)
            cardCellBinding.yurtdisibaslangic.text=ydt.baslangicKonumu.toString()+ "-->"
            cardCellBinding.yurtdisiguzergah.text=ydt.guzergah.toString()
            val formatter =
                DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss", Locale("tr"))
            val giristarihi = LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)

            val gelecekTarih = giristarihi.plusDays(5)
            val cikistarihiFormatter =
                DateTimeFormatter.ofPattern("dd LLLL yyyy", Locale("tr"))
            val cikistarihi = gelecekTarih.format(cikistarihiFormatter)

            val dateFormatter =
                DateTimeFormatter.ofPattern("dd MMMM yyyy", Locale("tr"))

            val giristarihi2 =
                LocalDate.parse(ydt.baslangicTarihi.toString(), formatter)
            val giristring = giristarihi2.format(dateFormatter)

            cardCellBinding.yurtdisitarihler.text=giristring.toString()+" - "+cikistarihi.toString()
            if (ydt.vizeDurumu=="Hayır")
            {
                cardCellBinding.yurtdisivizedurumu.text="Vizesiz"
                cardCellBinding.cardvize.setCardBackgroundColor(ContextCompat.getColor(context,R.color.Teal_800))
            }
            else
            {
                cardCellBinding.yurtdisivizedurumu.text="Vizeli"
            }
            cardCellBinding.btndetay.setOnClickListener {
                clickyurtDisiTur.onclickydt(ydt)
            }

        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CardViewHolder {
        val from = LayoutInflater.from(parent.context)
        val binding = YurtdisiKutucuklariBinding.inflate(from, parent, false)
        return CardViewHolder(binding,yurtdisitur,clickyurtDisiTur,context)
    }

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onBindViewHolder(holder: CardViewHolder, position: Int) {
        holder.find(yurtdisitur[position])
    }
    override fun getItemCount(): Int = yurtdisitur.size
}
package com.muhammetcakir.turizmacentasi.ClickListener

import com.muhammetcakir.turizmacentasi.Models.PopulerBolgeler


interface Clickpopulerbolgeler
{
    fun onclickpopuler(populerBolgeler: PopulerBolgeler)
}
package com.muhammetcakir.turizmacentasi.ClickListener

import com.muhammetcakir.turizmacentasi.Models.Rezervasyon
import com.muhammetcakir.turizmacentasi.Models.TekneTur

interface Clickrezervasyon
{
    fun onclickrezervasyon(rezervasyon: Rezervasyon)
}
package com.muhammetcakir.turizmacentasi.ClickListener

import com.muhammetcakir.turizmacentasi.Models.TekneTur
import com.muhammetcakir.turizmacentasi.Models.TekneTurView
import com.muhammetcakir.turizmacentasi.Models.YurtdisiTur

interface ClicktekneTur {
    fun onclickteknetur(ttur: TekneTurView)
}
package com.muhammetcakir.turizmacentasi.ClickListener


import com.muhammetcakir.turizmacentasi.Models.TatilTemalari

interface Clicktema
{
    fun onclicktema(tatilTemalari: TatilTemalari)
}
package com.muhammetcakir.turizmacentasi.ClickListener

import com.muhammetcakir.turizmacentasi.Models.Otel
import com.muhammetcakir.turizmacentasi.Models.OtelView
import com.muhammetcakir.turizmacentasi.Models.YurtdisiTur

interface Clicktotel {
    fun onclickotel(otel: OtelView)
}
package com.muhammetcakir.turizmacentasi.ClickListener

import com.muhammetcakir.turizmacentasi.Models.YurtDisiTurView


interface ClickyurtDisiTurView {
    fun onclickydt(ydt: YurtDisiTurView)
}
package com.muhammetcakir.turizmacentasi.Models

data class Hizmet
    (
    val idHizmet: String,
    val hizmetTabloId:String,
    val hizmetTabloAdi:String,
      )

package com.muhammetcakir.turizmacentasi.Models

data class HizmetBilgisi (
        val idHizmetBilgisi: Int,
        val adi:String,
        val fiyat:Int,
        val resimUrl:String,
        )
package com.muhammetcakir.turizmacentasi.Models

data class Musteri
    (
    val idMusteri: String,
    val adi:String,
    val soyadi:String,
    val telefonNumarasi:String,
    val epostaAdresi:String,
    val sifre:String,
    val dogumTarihi:String
            )
package com.muhammetcakir.turizmacentasi.Models

data class Otel(
    val idOtel: Int,
    val adres: String,
    val HizmetBilgisi_idHizmetBilgisi: String,
    val puan:Double,
    val tema:String
)

data class ApiResponseOtel(
    val error: Boolean,
    val otel: List<Otel>
)

data class ApiResponseYurtD(
    val error: Boolean,
    val yurtdisitur: List<YurtdisiTur>
)
data class ApiResponseTekneT(
    val error: Boolean,
    val teknetur: List<TekneTur>
)

data class ApiResponseHizmetBilgisi(
    val error: Boolean,
    val hizmetbilgisi: List<HizmetBilgisi>
)
data class ApiResponseTurProgrami(
    val error: Boolean,
    val turprogrami: List<TurProgrami>
)
data class ApiResponseHizmet(
    val error: Boolean,
    val hizmet: List<Hizmet>
)
data class ApiResponseMusteri(
    val error: Boolean,
    val musteri: List<Musteri>
)
data class ApiResponseRezervasyon(
    val error: Boolean,
    val rezervasyon: List<Rezervasyon>
)
data class ApiResponseOtelView(
    val error: Boolean,
    val otel: List<OtelView>
)
data class ApiResponseYurtDisiTurView(
    val error: Boolean,
    val yurtdisitur: List<YurtDisiTurView>
)
data class ApiResponseTekneTurView(
    val error: Boolean,
    val teknetur: List<TekneTurView>
)
package com.muhammetcakir.turizmacentasi.Models

data class OtelView
    (
    val idOtel:String,
    val adres:String,
    val puan:Double,
    val tema:String,
    val adi:String,
    val fiyat:Int,
    val resimUrl:String
            )
package com.muhammetcakir.turizmacentasi.Models

class PopulerBolgeler
    (
     var sehiradi:String,
     var sehirfotosu:Int
     )
package com.muhammetcakir.turizmacentasi.Models

data class Rezervasyon (
    val idRezervasyon: String,
    val tarihi:String,
    val yetiskinSayisi:Int,
    val cocukSayisi:Int,
    val Musteri_idMusteri:String,
    val Hizmet_idHizmet:String,
    val girisTarihi:String,
    val cikisTarihi:String
     )
package com.muhammetcakir.turizmacentasi.Models

class TatilTemalari
    (
    var temaadi:String,
    var temafotosu:Int
    )
package com.muhammetcakir.turizmacentasi.Models

class TekneTur
    (
    val idTekneTur: String,
    val TurProgrami_idTurProgrami:String,
    val HizmetBilgisi_idHizmetBilgisi: String
        )
package com.muhammetcakir.turizmacentasi.Models

data class TekneTurView
    (
    val idTekneTur:String,
    val adi:String,
    val fiyat:Int,
    val resimUrl:String,
    val baslangicTarihi:String,
    val baslangicKonumu:String,
    val guzergah:String,
    val vizeDurumu:String,
    val gunBir:String,
    val gunIki:String,
    val gunUc:String,
    val gunDort:String,
    val gunBes:String
)
package com.muhammetcakir.turizmacentasi.Models

import java.util.Date

data class TurProgrami
    (
    val idTurProgrami: String,
    val baslangicTarihi:String,
    val baslangicKonumu:String,
    val guzergah:String,
    val vizeDurumu:String,
    val gunBir:String,
    val gunIki:String,
    val gunUc:String,
    val gunDort:String,
    val gunBes:String
      )package com.muhammetcakir.turizmacentasi.Models

data class YurtdisiTur
    (
        val idYurtdisiTur: String,
        val TurProgrami_idTurProgrami:String,
        val HizmetBilgisi_idHizmetBilgisi: String
     )
package com.muhammetcakir.turizmacentasi.Models

data class YurtDisiTurView
    (
    val idYurtdisiTur:String,
    val adi:String,
    val fiyat:Int,
    val resimUrl:String,
    val baslangicTarihi:String,
    val baslangicKonumu:String,
    val guzergah:String,
    val vizeDurumu:String,
    val gunBir:String,
    val gunIki:String,
    val gunUc:String,
    val gunDort:String,
    val gunBes:String
            )



                                                        WEB KISMI
using Google.Protobuf.WellKnownTypes;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Conventions;
using Org.BouncyCastle.Ocsp;
using Org.BouncyCastle.Utilities;
using System.Data.Entity;
using webVTYSvize.Data;
using static System.Collections.Specialized.BitVector32;

namespace webVTYSvize.Controllers
{
    public class AnasayfaController : Controller
    {
        private readonly ILogger<AnasayfaController> _logger;
        private readonly MyDbContext _context;
        public AnasayfaController(ILogger<AnasayfaController> logger, MyDbContext context)
        {
            _logger = logger;
            _context = context;
        }

        public IActionResult Anasayfa()
        {
            var otel = _context.Otel.OrderByDescending(o => o.puan).FirstOrDefault();
            var yurtdisiTur = _context.YurtdisiTur.OrderByDescending(y => y.idYurtdisiTur).FirstOrDefault();
            var tekneTur = _context.TekneTur.OrderByDescending(y => y.idTekneTur).FirstOrDefault();
            List<HizmetBilgisi> hizmetBilgisi = _context.HizmetBilgisi.ToList();
            foreach (HizmetBilgisi bilgisi in hizmetBilgisi)
            {
                if (otel.HizmetBilgisi_idHizmetBilgisi == bilgisi.idHizmetBilgisi)
                {
                    otel.hizmetBilgisi = bilgisi;
                }
                if (yurtdisiTur.HizmetBilgisi_idHizmetBilgisi == bilgisi.idHizmetBilgisi)
                {
                    yurtdisiTur.hizmetBilgisi = bilgisi;
                }
                if (yurtdisiTur.HizmetBilgisi_idHizmetBilgisi == bilgisi.idHizmetBilgisi)
                {
                    yurtdisiTur.hizmetBilgisi = bilgisi;
                }
            }

            ViewBag.Otel = otel;
            ViewBag.TekneTur = tekneTur;
            ViewBag.YurtdisiTur = yurtdisiTur;

            return View();
        }

        public IActionResult Hizmetler()
        {
            return View();
        }
        [HttpGet]
        public IActionResult Oteller()
        {
            ViewBag.girisTarihi = DateTime.Now.ToString("yyyy-MM-dd");
            ViewBag.cikisTarihi = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd");
            TimeSpan gunSayisi = DateTime.Now.AddDays(1) - DateTime.Now;
            ViewBag.gunSayisi = (gunSayisi.Days > 1 ? gunSayisi.Days - 1 : 1) + " gece " + 1 + " gün ";
            ViewBag.fiyatCarpan = 1;

            List<OtelView> oteller = _context.OtelView.ToList();

            return View(oteller);
        }

        [HttpPost]
        public IActionResult Oteller(string yıldız, string aralıkMin, string aralıkMax, string[] tatilTemaları, string[] adresler, string sırala, DateTime girisTarihi, DateTime cikisTarihi)
        {

            List<OtelView> oteller = _context.OtelView.ToList();
            if (girisTarihi!= DateTime.MinValue)
            {
                ViewBag.girisTarihi = girisTarihi.ToString("yyyy-MM-dd");
                ViewBag.cikisTarihi = cikisTarihi.ToString("yyyy-MM-dd");
                TimeSpan gunSayisi = cikisTarihi - girisTarihi;
                ViewBag.gunSayisi = (gunSayisi.Days != 1 ? gunSayisi.Days - 1 : gunSayisi.Days) + " gece " + gunSayisi.Days + " gün ";
                ViewBag.fiyatCarpan = gunSayisi.Days;
            }
            else
            {
                ViewBag.girisTarihi = DateTime.Now.ToString("yyyy-MM-dd");
                ViewBag.cikisTarihi = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd");
                TimeSpan gunSayisi = DateTime.Now.AddDays(1) - DateTime.Now;
                ViewBag.gunSayisi = (gunSayisi.Days > 1 ? gunSayisi.Days - 1 : 1) + " gece " + 1 + " gün ";
                ViewBag.fiyatCarpan = 1;
            }
           




            //Yıldız değerine göre arama işlemi
            if (yıldız != null)
            {

                Console.WriteLine("yıldız=" + yıldız);
                switch (yıldız)
                {
                    case "9":
                        oteller = oteller.Where(o => o.puan >= 9).ToList();
                        break;
                    case "8":
                        oteller = oteller.Where(o => o.puan >= 8).ToList();
                        break;
                    case "7":
                        oteller = oteller.Where(o => o.puan >= 7).ToList();
                        break;
                    case "6":
                        oteller = oteller.Where(o => o.puan >= 6).ToList();
                        break;
                    default:
                        break;
                }
            }

            //Fiyat aralığı belirterek arama işlemi
            if (aralıkMin != null)
            {
                oteller = oteller.Where(t => int.Parse(aralıkMin) <= t.fiyat).ToList();
            }
            if (aralıkMax != null)
            {
                oteller = oteller.Where(t => t.fiyat <= int.Parse(aralıkMax)).ToList();
            }

            //Tatil temasına göer işlemler
            if (tatilTemaları != null && tatilTemaları.Count() > 0)
            {
                List<OtelView> temaOtel = new List<OtelView>();
                foreach (string tatiltema in tatilTemaları)
                {
                    temaOtel.AddRange(oteller.Where(t => t.tema == tatiltema).ToList());
                }
                oteller = temaOtel;
            }
            // adrese göre filtreleem
            if (adresler != null && adresler.Count() > 0)
            {
                List<OtelView> bölgeTekneTurları = new List<OtelView>();
                foreach (string bölge in adresler)
                {
                    bölgeTekneTurları.AddRange(oteller.Where(t => t.adres.Contains(bölge)).ToList());
                }
                oteller = bölgeTekneTurları;
            }
            //Sıralama işlemi
            if (sırala != null)
            {
                switch (sırala)
                {
                    case "fiyat_azdan_coka":
                        // Fiyat Az'dan Çok'a sıralama işlemleri burada yapılır.
                        oteller = oteller.OrderBy(p => p.fiyat).ToList();
                        break;
                    case "fiyat_coktan_aza":
                        // Fiyat Çok'tan Az'a sıralama işlemleri burada yapılır.
                        oteller = oteller.OrderByDescending(p => p.fiyat).ToList();
                        break;
                    case "puan_azdan_coka":
                        // Puan Az'dan Çok'a sıralama işlemleri burada yapılır.
                        oteller = oteller.OrderBy(p => p.puan).ToList();
                        break;
                    case "puan_coktan_aza":
                        // Puan Çok'tan Az'a sıralama işlemleri burada yapılır.
                        oteller = oteller.OrderByDescending(p => p.puan).ToList();
                        break;
                    default:
                        // Geçersiz bir sıralama seçeneği gönderildiğinde, varsayılan olarak fiyat_azdan_coka sıralama yapılır.
                        oteller = oteller.OrderBy(p => p.fiyat).ToList();
                        break;
                }

            }


            return View(oteller);
        }
        [HttpGet]
        public IActionResult TekneTurları()
        {
            //List<TekneTur> tekneTurları = _context.TekneTur.ToList();
            //List<HizmetBilgisi> hizmetBilgisi = _context.HizmetBilgisi.ToList();
            //List<TurProgrami> turProgramları = _context.TurProgrami.ToList();
            //foreach (TekneTur tekneTur in tekneTurları)
            //{
            //    foreach (HizmetBilgisi bilgisi in hizmetBilgisi)
            //    {
            //        if (tekneTur.HizmetBilgisi_idHizmetBilgisi == bilgisi.idHizmetBilgisi)
            //        {
            //            tekneTur.hizmetBilgisi = bilgisi;
            //        }
            //    }

            //}
            //foreach (TekneTur tekneTur in tekneTurları)
            //{
            //    foreach (TurProgrami turProgrami in turProgramları)
            //    {
            //        if (tekneTur.TurProgrami_idTurProgrami == turProgrami.idTurProgrami)
            //        {
            //            tekneTur.turProgrami = turProgrami;
            //        }
            //    }

            //}
            List<TekneTurView> tekneTurları=_context.TekneTurView.ToList();
            return View(tekneTurları);
        }
        [HttpPost]
        public IActionResult TekneTurları(string sırala, string minFiyat ,string maxFiyat, string vizeDurumu , string[] bölgeler)
        {
            
            List<TekneTurView> tekneTurları = _context.TekneTurView.ToList();

            if (minFiyat!=null)
            {
                tekneTurları = tekneTurları.Where(t => int.Parse(minFiyat) <= t.fiyat).ToList();
            }
            if (maxFiyat!=null)
            {
                tekneTurları = tekneTurları.Where(t =>  t.fiyat <=int.Parse(maxFiyat)).ToList();
            }
            if (vizeDurumu!=null)
            {
                tekneTurları = tekneTurları.Where(t => t.vizeDurumu == vizeDurumu).ToList();
            }
            if (bölgeler!=null && bölgeler.Count()>0)
            {
                List<TekneTurView> bölgeTekneTurları = new List<TekneTurView>();
                foreach(string bölge in bölgeler)
                {
                    bölgeTekneTurları.AddRange(tekneTurları.Where(t => t.baslangicKonumu == bölge).ToList());
                }
                tekneTurları = bölgeTekneTurları;
            }

            //Sıralama işlemi
            if (sırala != null)
            {
                switch (sırala)
                {
                    case "fiyat_azdan_coka":
                        // Fiyat Az'dan Çok'a sıralama işlemleri burada yapılır.
                        tekneTurları = tekneTurları.OrderBy(t => t.fiyat).ToList();
                        break;
                    case "fiyat_coktan_aza":
                        // Fiyat Çok'tan Az'a sıralama işlemleri burada yapılır.
                        tekneTurları = tekneTurları.OrderByDescending(t => t.fiyat).ToList();
                        break;
                    default:
                        // Geçersiz bir sıralama seçeneği gönderildiğinde, varsayılan olarak fiyat_azdan_coka sıralama yapılır.
                        tekneTurları = tekneTurları.OrderBy(t => t.fiyat).ToList();
                        break;
                }

            }
            return View(tekneTurları);
        }

        [HttpGet]
        public IActionResult YurtdisiTurlar()
        {
            //List<YurtdisiTur> yurtdisiTurlar = _context.YurtdisiTur.ToList();
            //List<HizmetBilgisi> hizmetBilgisi = _context.HizmetBilgisi.ToList();
            //List<TurProgrami> turProgramları = _context.TurProgrami.ToList();
            //foreach (YurtdisiTur yurtdisiTur in yurtdisiTurlar)
            //{
            //    foreach (HizmetBilgisi bilgisi in hizmetBilgisi)
            //    {
            //        if (yurtdisiTur.HizmetBilgisi_idHizmetBilgisi == bilgisi.idHizmetBilgisi)
            //        {
            //            yurtdisiTur.hizmetBilgisi = bilgisi;
            //        }
            //    }

            //}
            //foreach (YurtdisiTur yurtdisiTur in yurtdisiTurlar)
            //{
            //    foreach (TurProgrami turProgrami in turProgramları)
            //    {
            //        if (yurtdisiTur.TurProgrami_idTurProgrami == turProgrami.idTurProgrami)
            //        {
            //            yurtdisiTur.turProgrami = turProgrami;
            //        }
            //    }

            //}
            List<YurtdisiTurView> yurtdisiTurlar = _context.YurtdisiTurView.ToList();
            return View(yurtdisiTurlar);
        }
        [HttpPost]
        public IActionResult YurtdisiTurlar(string sırala, string minFiyat, string maxFiyat, string vizeDurumu, string[] bölgeler)
        {
            
            List<YurtdisiTurView> yurtdisiTurlar = _context.YurtdisiTurView.ToList();

            if (minFiyat != null)
            {
                yurtdisiTurlar = yurtdisiTurlar.Where(t => int.Parse(minFiyat) <= t.fiyat).ToList();
            }
            if (maxFiyat != null)
            {
                yurtdisiTurlar = yurtdisiTurlar.Where(t => t.fiyat <= int.Parse(maxFiyat)).ToList();
            }
            if (vizeDurumu != null)
            {
                yurtdisiTurlar = yurtdisiTurlar.Where(t => t.vizeDurumu == vizeDurumu).ToList();
            }
            if (bölgeler != null && bölgeler.Count() > 0)
            {
                List<YurtdisiTurView> bölgeTekneTurları = new List<YurtdisiTurView>();
                foreach (string bölge in bölgeler)
                {
                    bölgeTekneTurları.AddRange(yurtdisiTurlar.Where(t => t.baslangicKonumu == bölge).ToList());
                }
                yurtdisiTurlar = bölgeTekneTurları;
            }
            //Sıralama işlemi
            if (sırala != null)
            {
                switch (sırala)
                {
                    case "fiyat_azdan_coka":
                        // Fiyat Az'dan Çok'a sıralama işlemleri burada yapılır.
                        yurtdisiTurlar = yurtdisiTurlar.OrderBy(y => y.fiyat).ToList();
                        break;
                    case "fiyat_coktan_aza":
                        // Fiyat Çok'tan Az'a sıralama işlemleri burada yapılır.
                        yurtdisiTurlar = yurtdisiTurlar.OrderByDescending(y => y.fiyat).ToList();
                        break;
                    default:
                        // Geçersiz bir sıralama seçeneği gönderildiğinde, varsayılan olarak fiyat_azdan_coka sıralama yapılır.
                        yurtdisiTurlar = yurtdisiTurlar.OrderBy(y => y.fiyat).ToList();
                        break;
                }

            }
            return View(yurtdisiTurlar);
        }
        public IActionResult İletişim()
        {
            return View();
        }
    }
}
using Microsoft.AspNetCore.Mvc;
using System.Data.Entity;
using System.Text.RegularExpressions;
using webVTYSvize.Data;

namespace webVTYSvize.Controllers
{
    public class HizmetController : Controller
    {
        private readonly ILogger<HizmetController> _logger;
        private readonly MyDbContext _context;
        public HizmetController(ILogger<HizmetController> logger, MyDbContext context)
        {
            _logger = logger;
            _context = context;
        }


        public ActionResult OtelDetay(string bilgiler)
        {
            string[] veriler = bilgiler.Split('?');
            // 0 id 1 giristarihi 2 cikistarihi 
            Console.WriteLine(veriler[0] + "?" + veriler[1]+"?"+ veriler[2]);
            OtelView otel = _context.OtelView.Where(o => o.idOtel == int.Parse(veriler[0])).FirstOrDefault();

            string dateString = "2023-05-05";
            DateTime girisTarihi = DateTime.ParseExact(veriler[1], "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
            DateTime cikisTarihi = DateTime.ParseExact(veriler[2], "yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture);
            TimeSpan gunSayisi = cikisTarihi - girisTarihi;
            ViewBag.id = veriler[0];
            ViewBag.girisTarihi = veriler[1];
            ViewBag.cikisTarihi = veriler[2];
            ViewBag.fiyatCarpan = gunSayisi.Days;
            return View(otel);
        }
        public ActionResult TekneTurDetay(int id)
        {

            TekneTurView tekneTur = _context.TekneTurView.Where(t => t.idTekneTur == id).FirstOrDefault();
            ViewBag.gunBir = ParantezIceriginiAyir(tekneTur.gunBir);
            ViewBag.gunIki = ParantezIceriginiAyir(tekneTur.gunIki);
            ViewBag.gunUc = ParantezIceriginiAyir(tekneTur.gunUc);
            ViewBag.gunDort = ParantezIceriginiAyir(tekneTur.gunDort);
            ViewBag.gunBes = ParantezIceriginiAyir(tekneTur.gunBes);
            return View(tekneTur);
        }

        public ActionResult YurtdisiTurDetay(int id)
        {

            YurtdisiTurView yurtdisiTur = _context.YurtdisiTurView.Where(y => y.idYurtdisiTur == id).FirstOrDefault();
            ViewBag.gunBir = ParantezIceriginiAyir(yurtdisiTur.gunBir);
            ViewBag.gunIki = ParantezIceriginiAyir(yurtdisiTur.gunIki);
            ViewBag.gunUc = ParantezIceriginiAyir(yurtdisiTur.gunUc);
            ViewBag.gunDort = ParantezIceriginiAyir(yurtdisiTur.gunDort);
            ViewBag.gunBes = ParantezIceriginiAyir(yurtdisiTur.gunBes);
            return View(yurtdisiTur);
        }
        static string ParantezIceriginiAyir(string deger)
        {
            // Parantez içindeki ifadeyi bulmak için bir düzenli ifade kullanın
            Regex regex = new Regex(@"\((.*?)\)");
            Match match = regex.Match(deger);

            // Eğer parantez içindeki ifade bulunursa, bu ifadeyi döndürün
            if (match.Success)
            {
                return match.Groups[1].Value;
            }
            else
            {
                // Eğer parantez içinde bir ifade yoksa, null döndürün
                return null;
            }
        }


    }
}
using Google.Protobuf.WellKnownTypes;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Primitives;
using webVTYSvize.Data;
using webVTYSvize.Models;

namespace webVTYSvize.Controllers
{
    public class KullanıcıİşlemleriController : Controller
    {
        private readonly ILogger<KullanıcıİşlemleriController> _logger; 
        private readonly MyDbContext _context;
        public static bool isLogin=false;
        public static bool isSign = false;
        public static Musteri _musteri;
        public KullanıcıİşlemleriController(ILogger<KullanıcıİşlemleriController> logger, MyDbContext context)
        {
            _logger = logger;
            _context = context;
        }
        [HttpGet]
        public IActionResult Kayıt()
        {
            if (isLogin)
            {
                return RedirectToAction("Anasayfa", "Anasayfa");
            }
            return View();
        }
        [HttpPost]
        public IActionResult Kayıt(string name, string surname, string email, string phone, string password, DateTime date,string loginEmail,string loginPassword)
        {
            if (!isLogin)
            {
                if (name != null)
                {
                    var id = _context.Musteri.Count();
                    _context.Musteri.Add(new Musteri(id, name, surname, password, phone, email, date));
                    _context.SaveChanges();
                    _musteri = _context.Musteri.FirstOrDefault(m=>m.idMusteri==id);
                    isSign = true;
                    return View();
                }
                if (loginEmail != null)
                {
                    Musteri musteri = _context.Musteri.FirstOrDefault(m => m.epostaAdresi == loginEmail && m.sifre == loginPassword);
                    if (musteri != null)
                    {
                        isLogin = true;
                        _musteri = new Musteri(musteri.idMusteri,musteri.adi,musteri.soyadi,musteri.sifre,musteri.telefonNumarasi,musteri.epostaAdresi,musteri.dogumTarihi);
                        return RedirectToAction("Anasayfa", "Anasayfa");
                    }
                    else
                    {
                        return View();
                    }
                }
            }
            else
            {
                return RedirectToAction("Anasayfa", "Anasayfa");
            }
           

            return View();

        }
        [HttpGet]
        public IActionResult Ayarlar()
        {
            if (isLogin)
            {
                
                List<RezervasyonView> rezervasyonlar = _context.RezervasyonView.Where(r => r.idMusteri==_musteri.idMusteri).ToList();
                List<RezervasyonViewModel> rezervasyonlarView = new List<RezervasyonViewModel>();
                foreach (var rezervasyon in rezervasyonlar)
                {
                    if (rezervasyon.hizmetTabloAdi=="otel")
                    {
                        OtelView otel = _context.OtelView.Where(r => r.idOtel==rezervasyon.hizmetTabloId).FirstOrDefault();
                        rezervasyonlarView.Add(new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = otel });
                    }
                    else if (rezervasyon.hizmetTabloAdi == "teknetur")
                    {
                        TekneTurView tekneTur = _context.TekneTurView.Where(r => r.idTekneTur == rezervasyon.hizmetTabloId).FirstOrDefault();
                        rezervasyonlarView.Add(new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = tekneTur });
                    }
                    else
                    {
                        YurtdisiTurView yurtdisiTur = _context.YurtdisiTurView.Where(r => r.idYurtdisiTur == rezervasyon.hizmetTabloId).FirstOrDefault();
                        rezervasyonlarView.Add(new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = yurtdisiTur });
                    }
                    
                }
                ViewBag.Message = "Merhabalar  " + _musteri.adi;
                ViewBag.sifre = _musteri.sifre;
                ViewBag.dogumTarihi = _musteri.dogumTarihi;
                 return View(rezervasyonlarView);
              

            }
            return RedirectToAction("Kayıt");
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Ayarlar(string hesap,string adi,string soyadi, string eposta, string telefonNumarasi,string sifre,DateTime dogumTarihi) 
        {
            if (hesap!=null && adi==null)
            {
                if (hesap=="cikisYap")
                {
                    _musteri = null;
                    isLogin = false;
                    return RedirectToAction("Kayıt");
                }
                else if (hesap=="hesabiSil")
                {
                    var musteri = _context.Musteri.FirstOrDefault(m => m.idMusteri == _musteri.idMusteri);
                    if (musteri != null)
                    {
                        _context.Musteri.Remove(musteri);
                        _context.SaveChanges();
                        _musteri = null;
                        isLogin = false;
                        return RedirectToAction("Kayıt");
                    }  
                }

            }
            else
            {
                var musteri = _context.Musteri.FirstOrDefault(m => m.idMusteri == _musteri.idMusteri);

                if (musteri != null)
                {
                    musteri.idMusteri = musteri.idMusteri;
                    musteri.adi = adi;
                    musteri.soyadi = soyadi;
                    musteri.sifre = sifre;
                    musteri.telefonNumarasi = telefonNumarasi;
                    musteri.epostaAdresi = eposta;
                    musteri.dogumTarihi = dogumTarihi;

                    _context.SaveChanges();
                    _musteri = musteri;
                    
                    List<RezervasyonView> rezervasyonlar = _context.RezervasyonView.Where(r => r.idMusteri == _musteri.idMusteri).ToList();
                    List<RezervasyonViewModel> rezervasyonlarView = new List<RezervasyonViewModel>();
                    foreach (var rezervasyon in rezervasyonlar)
                    {
                        if (rezervasyon.hizmetTabloAdi == "otel")
                        {
                            OtelView otel = _context.OtelView.Where(r => r.idOtel == rezervasyon.hizmetTabloId).FirstOrDefault();
                            rezervasyonlarView.Add(new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = otel });
                        }
                        else if (rezervasyon.hizmetTabloAdi == "teknetur")
                        {
                            TekneTurView tekneTur = _context.TekneTurView.Where(r => r.idTekneTur == rezervasyon.hizmetTabloId).FirstOrDefault();
                            rezervasyonlarView.Add(new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = tekneTur });
                        }
                        else
                        {
                            YurtdisiTurView yurtdisiTur = _context.YurtdisiTurView.Where(r => r.idYurtdisiTur == rezervasyon.hizmetTabloId).FirstOrDefault();
                            rezervasyonlarView.Add(new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = yurtdisiTur });
                        }
                    }
                    ViewBag.Message = "Hesabınız Güncellendi";
                    ViewBag.dogumTarihi = _musteri.dogumTarihi;
                    ViewBag.sifre = _musteri.sifre;
                    return View(rezervasyonlarView);
                }
                
            }
            return RedirectToAction("Kayıt");
        }
       
        
        [HttpGet]
        public IActionResult Rezervasyon(string otel, string teknetur, string yurtdisitur)
        {
            if (isLogin)
            {
                if (otel != null)
                {
                    var otelBilgiler = otel.Split('?');
                    // 0  oda tipi çarpanı 1 id 2 giristarihi 3 cikistarihi
                    //Console.WriteLine(otelBilgiler[0]+ otelBilgiler[1] + otelBilgiler[2] + otelBilgiler[3]);
                    var oteldb = _context.Otel.Where(o => o.idOtel == int.Parse(otelBilgiler[1])).FirstOrDefault();
                    ViewBag.id = int.Parse(otelBilgiler[1]);
                    ViewBag.hizmetTuru = "otel";
                    ViewBag.girisTarihi = otelBilgiler[2];
                    ViewBag.cikisTarihi = otelBilgiler[3];
                }
                else if (teknetur != null)
                {
                    ViewBag.id = int.Parse(teknetur);
                    var tekneturverisi = _context.TekneTur.Where(t => t.idTekneTur == int.Parse(teknetur)).FirstOrDefault();
                    var turProgrami = _context.TurProgrami.Where(t => t.idTurProgrami == tekneturverisi.TurProgrami_idTurProgrami).FirstOrDefault();
                    var hizmetBilgisi = _context.HizmetBilgisi.Where(o => o.idHizmetBilgisi == tekneturverisi.HizmetBilgisi_idHizmetBilgisi).FirstOrDefault();
                    ViewBag.hizmetTuru = "teknetur";
                    ViewBag.girisTarihi = turProgrami.baslangicTarihi.ToString("yyyy-MM-dd");
                    ViewBag.cikisTarihi = turProgrami.baslangicTarihi.AddDays(5).ToString("yyyy-MM-dd");

                }
                else if (yurtdisitur != null)
                {
                    ViewBag.id = int.Parse(yurtdisitur);
                    var yurtdisiTur = _context.YurtdisiTur.Where(t => t.idYurtdisiTur == int.Parse(yurtdisitur)).FirstOrDefault();
                    var turProgrami = _context.TurProgrami.Where(t => t.idTurProgrami == yurtdisiTur.TurProgrami_idTurProgrami).FirstOrDefault();
                    var hizmetBilgisi = _context.HizmetBilgisi.Where(o => o.idHizmetBilgisi == yurtdisiTur.HizmetBilgisi_idHizmetBilgisi).FirstOrDefault();
                    ViewBag.hizmetTuru = "yurtdisitur";
                    ViewBag.girisTarihi = turProgrami.baslangicTarihi.ToString("yyyy-MM-dd");
                    ViewBag.cikisTarihi = turProgrami.baslangicTarihi.AddDays(5).ToString("yyyy-MM-dd");
                }
            }
            else
            {
                return RedirectToAction("Kayıt");
            }
            return View();
        }

        [HttpPost]
        public IActionResult Rezervasyon(string bilgiler, string yetiskinSayisi , string cocukSayisi,string empty )
        {
            if (isLogin)
            {
                //   0 id  1 hizmetTuru  2  girisTarihi 3 cikisTarihi
                string[] veriler = bilgiler.Split('?');
                int countHizmet = _context.Hizmet.OrderByDescending(h=>h.idHizmet).FirstOrDefault().idHizmet+1;
                Hizmet newhizmet = new Hizmet(countHizmet, int.Parse(veriler[0]), veriler[1]);
                _context.Hizmet.Add(newhizmet);
                _context.SaveChanges();
                int countRervasyon = _context.Rezervasyon.OrderByDescending(h => h.idRezervasyon).FirstOrDefault().idRezervasyon + 1;
                _context.Rezervasyon.Add(new Rezervasyon(
                     countRervasyon,
                      DateTime.Now,
                      int.Parse(yetiskinSayisi),
                      int.Parse(cocukSayisi),
                      newhizmet.idHizmet,
                      _musteri.idMusteri,
                      DateTime.Parse(veriler[2]),
                      DateTime.Parse(veriler[3])
                      ));
                _context.SaveChanges();
                Console.WriteLine(bilgiler + "?" + yetiskinSayisi + "?" + cocukSayisi);
                return RedirectToAction("Ayarlar");
            }
           
            return View();
        }

        [HttpGet]
        public IActionResult RezervasyonDüzenle(string rezervasyonDetay) 
        {
            if (rezervasyonDetay != null)
            {
                RezervasyonView rezervasyon = _context.RezervasyonView.Where(r => r.idRezervasyon == int.Parse(rezervasyonDetay)).FirstOrDefault();
                RezervasyonViewModel rezervasyonlarView = new RezervasyonViewModel();
                if (rezervasyon.hizmetTabloAdi == "otel")
                {
                    OtelView otel = _context.OtelView.Where(r => r.idOtel == rezervasyon.hizmetTabloId).FirstOrDefault();
                    rezervasyonlarView = new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = otel };
                }
                else if (rezervasyon.hizmetTabloAdi == "teknetur")
                {
                    TekneTurView tekneTur = _context.TekneTurView.Where(r => r.idTekneTur == rezervasyon.hizmetTabloId).FirstOrDefault();
                    rezervasyonlarView = new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = tekneTur };
                }
                else
                {
                    YurtdisiTurView yurtdisiTur = _context.YurtdisiTurView.Where(r => r.idYurtdisiTur == rezervasyon.hizmetTabloId).FirstOrDefault();
                    rezervasyonlarView = new RezervasyonViewModel() { Rezervasyon = rezervasyon, HizmetBase = yurtdisiTur };
                }

                return View(rezervasyonlarView);
            }
            return RedirectToAction("Ayarlar");
           
        }
        [HttpPost]
        public IActionResult RezervasyonDüzenle(string rezervasyonBilgisi, int yetiskinSayisi, int cocukSayisi, DateTime girisTarihi, DateTime cikisTarihi) 
        {
            if (rezervasyonBilgisi != null)
            {
                string[] rezer = rezervasyonBilgisi.Split('?');
                if (rezer[0] =="sil")
                {
                    int id = int.Parse(rezer[1]);
                    var rezervasyon = _context.Rezervasyon.FirstOrDefault(rezer => rezer.idRezervasyon == id);
                    var hizmet = _context.Hizmet.FirstOrDefault(h => h.idHizmet == rezervasyon.Hizmet_idHizmet);
                    _context.Rezervasyon.Remove(rezervasyon);
                    _context.SaveChanges();
                    _context.Hizmet.Remove(hizmet);
                    _context.SaveChanges();

                    var rezervasyonlar = _context.Rezervasyon.Where(r => r.Musteri_idMusteri == _musteri.idMusteri).ToList();
                    ViewBag.Message = "Rezervasyonunuz İptal Edildi";
                    return RedirectToAction("Ayarlar");
                }
                else if (rezer[0]=="güncelle")
                {
                    int id = int.Parse(rezer[1]);
                    var rezervasyon = _context.Rezervasyon.FirstOrDefault(rezer => rezer.idRezervasyon == id);
                    var hizmet = _context.Hizmet.FirstOrDefault(h => h.idHizmet == rezervasyon.Hizmet_idHizmet);
                    if (rezervasyon!=null)
                    {
                        rezervasyon.yetiskinSayisi = yetiskinSayisi;
                        rezervasyon.cocukSayisi = cocukSayisi;
                        rezervasyon.girisTarihi = girisTarihi;
                        rezervasyon.cikisTarihi = cikisTarihi;
                        _context.SaveChanges();
                        return RedirectToAction("Ayarlar");
                    }
                    
                    
                }

            }

            return RedirectToAction("Ayarlar");
        }
    }
}
using Microsoft.EntityFrameworkCore;

namespace webVTYSvize.Data
{
    public class MyDbContext : DbContext
    {

        public MyDbContext(DbContextOptions<MyDbContext> options) : base(options)
        {

        }

        public DbSet<Hizmet> Hizmet { get; set; }
        public DbSet<HizmetBilgisi> HizmetBilgisi { get; set; }
        public DbSet<Musteri> Musteri { get; set; }
        public DbSet<Otel> Otel { get; set; }
        public DbSet<Rezervasyon> Rezervasyon { get; set; }
        public DbSet<TekneTur> TekneTur { get; set; }
        public DbSet<TurProgrami> TurProgrami { get; set; }
        public DbSet<YurtdisiTur> YurtdisiTur { get; set; }
        public DbSet<OtelView> OtelView { get; set; }
        public DbSet<YurtdisiTurView> YurtdisiTurView { get; set; }
        public DbSet<TekneTurView> TekneTurView { get; set; }
        public DbSet<RezervasyonView> RezervasyonView { get; set; }



        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Hizmet>(e => e.HasKey(x => x.idHizmet));
            modelBuilder.Entity<HizmetBilgisi>(e => e.HasKey(x => x.idHizmetBilgisi));
            modelBuilder.Entity<Musteri>(e => e.HasKey(x => x.idMusteri));
            modelBuilder.Entity<Otel>(e => e.HasKey(x => x.idOtel));
            modelBuilder.Entity<Rezervasyon>(e => e.HasKey(x => x.idRezervasyon));
            modelBuilder.Entity<TekneTur>(e => e.HasKey(x => x.idTekneTur));
            modelBuilder.Entity<TurProgrami>(e => e.HasKey(x => x.idTurProgrami));
            modelBuilder.Entity<YurtdisiTur>(e => e.HasKey(x => x.idYurtdisiTur));


            modelBuilder.Entity<Rezervasyon>()
               .HasOne(x => x.hizmet)
               .WithOne(x => x.rezervasyon)
               .HasForeignKey<Hizmet>(x => x.idHizmet);

            modelBuilder.Entity<Musteri>()
               .HasMany(x => x.Rezervasyonlar)
               .WithOne(x => x.Musteri)
               .HasForeignKey(x => x.Musteri_idMusteri);


            modelBuilder.Entity<Otel>()
                .HasOne(x => x.hizmetBilgisi)
                .WithMany()
                .HasForeignKey(x => x.HizmetBilgisi_idHizmetBilgisi);

            modelBuilder.Entity<TekneTur>()
                .HasOne(x => x.hizmetBilgisi)
                .WithMany()
                .HasForeignKey(x => x.HizmetBilgisi_idHizmetBilgisi);

            modelBuilder.Entity<YurtdisiTur>()
                .HasOne(x => x.hizmetBilgisi)
                .WithMany()
                .HasForeignKey(x => x.HizmetBilgisi_idHizmetBilgisi);
            modelBuilder.Entity<TekneTur>()
                .HasOne(x => x.turProgrami)
                .WithMany()
                .HasForeignKey(x => x.TurProgrami_idTurProgrami);

            modelBuilder.Entity<YurtdisiTur>()
                .HasOne(x => x.turProgrami)
                .WithMany()
                .HasForeignKey(x => x.TurProgrami_idTurProgrami);

        }
    }
}
using Microsoft.EntityFrameworkCore;
using System.Configuration;
using webVTYSvize.Data;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddDbContext<MyDbContext>(options =>
{
    options.UseMySQL(builder.Configuration.GetConnectionString("Default"));
});
builder.Services.AddControllersWithViews();

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Anasayfa}/{action=Anasayfa}/{id?}");

app.Run();
function UI() {
    this.btn_hesabim = document.querySelector(".btn_hesabim"),
        this.btn_rezervasyon = document.querySelector(".btn_rezervasyon"),
        this.btn_cikisYap = document.querySelector(".btn_cikisYap"),
        this.btn_hesabiSil = document.querySelector(".btn_hesabiSil"),
        this.formisim = document.querySelector(".formisim"),
        this.formsoyad = document.querySelector(".formsoyad"),
        this.formemail = document.querySelector(".formemail"),
        this.formtelefon = document.querySelector(".formtelefon"),
        this.formsifre = document.querySelector(".formsifre"),
        this.formdogumTarihi = document.querySelector(".formdogumTarihi")
}
const ui = new UI();

document.getElementById("divRezervasyon").style.visibility = "hidden";
document.getElementById("divHesabim").style.visibility = "visible";

document.querySelector('#hesabim').classList.add('active-hesabim');
document.querySelector('#rezervasyon').classList.remove('active-rezervasyon');
document.querySelector('#cikisYap').classList.remove('active-cikisYap');
document.querySelector('#hesabiSil').classList.remove('active-hesabiSil');

ui.btn_hesabim.addEventListener("click", function () {
    document.getElementById("divHesabim").style.visibility = "visible";
    document.getElementById("divRezervasyon").style.visibility = "hidden";

    document.querySelector('#divHesabim').classList.remove('position-absolute');
    document.querySelector('#divHesabim').classList.remove('top-50');
    document.querySelector('#divHesabim').classList.remove('start-50');
    document.querySelector('#divHesabim').classList.remove('translate-middle');
    document.querySelector('#divRezervasyon').classList.add('position-absolute');
    document.querySelector('#divRezervasyon').classList.add('top-50');
    document.querySelector('#divRezervasyon').classList.add('start-50');
    document.querySelector('#divRezervasyon').classList.add('translate-middle');

    document.querySelector('#hesabim').classList.add('active-hesabim');
    document.querySelector('#rezervasyon').classList.remove('active-rezervasyon');
    document.querySelector('#cikisYap').classList.remove('active-cikisYap');
    document.querySelector('#hesabiSil').classList.remove('active-hesabiSil');
})

ui.btn_rezervasyon.addEventListener("click", function () {
    document.getElementById("divHesabim").style.visibility = "hidden";
    document.getElementById("divRezervasyon").style.visibility = "visible";

    document.querySelector('#divHesabim').classList.add('position-absolute');
    document.querySelector('#divHesabim').classList.add('top-50');
    document.querySelector('#divHesabim').classList.add('start-50');
    document.querySelector('#divHesabim').classList.add('translate-middle');
    document.querySelector('#divRezervasyon').classList.remove('position-absolute');
    document.querySelector('#divRezervasyon').classList.remove('top-50');
    document.querySelector('#divRezervasyon').classList.remove('start-50');
    document.querySelector('#divRezervasyon').classList.remove('translate-middle');

    document.querySelector('#hesabim').classList.remove('active-hesabim');
    document.querySelector('#rezervasyon').classList.add('active-rezervasyon');
    document.querySelector('#cikisYap').classList.remove('active-cikisYap');
    document.querySelector('#hesabiSil').classList.remove('active-hesabiSil');
})

ui.btn_cikisYap.addEventListener("click", function () {
    document.querySelector('#hesabim').classList.remove('active-hesabim');
    document.querySelector('#rezervasyon').classList.remove('active-rezervasyon');
    document.querySelector('#cikisYap').classList.add('active-cikisYap');
    document.querySelector('#hesabiSil').classList.remove('active-hesabiSil');

    document.getElementById("divRezervasyon").style.visibility = "hidden";
    document.getElementById("divHesabim").style.visibility = "hidden";
})

ui.btn_hesabiSil.addEventListener("click", function () {
    document.querySelector('#hesabim').classList.remove('active-hesabim');
    document.querySelector('#rezervasyon').classList.remove('active-rezervasyon');
    document.querySelector('#cikisYap').classList.remove('active-cikisYap');
    document.querySelector('#hesabiSil').classList.add('active-hesabiSil');

    document.getElementById("divRezervasyon").style.visibility = "hidden";
    document.getElementById("divHesabim").style.visibility = "hidden";
})


//const myForm = document.getElementById('myForm');
//const myElement = document.getElementById('myElement');

//myForm.addEventListener('submit', (event) => {
//    event.preventDefault();

//    const formData = new FormData(myForm);
//    const adi = formData.get('adi');
//    const soyadi = formData.get('soyadi');
//    const eposta = formData.get('eposta');
//    const telefonNumarasi = formData.get('telefonNumarasi');
//    const sifre = formData.get('sifre');
//    const dogumTarihi = formData.get('dogumTarihi');
//    const myValue = myElement.dataset.myValue;

//    const xhr = new XMLHttpRequest();

//    xhr.open('POST', '/my-server-url');
//    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

//    xhr.onreadystatechange = function () {
//        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
//            console.log('Response received:', this.responseText);
//        }
//    };

//    xhr.send(`adi=${adi}&soyadi=${soyadi}}&eposta=${eposta}}&telefonNumarasi=${telefonNumarasi}}&sifre=${sifre}}&dogumTarihi=${dogumTarihi}&myValue=${myValue}`);
//});









//const params = new URLSearchParams(window.location.search);
//const ad = params.get("name");
//const soyad = params.get("surname");
//const eposta = params.get("email");
//const telefon = params.get("phone");
//const sifre = params.get("password");
//const dogumTarihi = params.get("date");

//console.log(`Ad: ${ad}, Soyad: ${soyad}, E-posta: ${eposta}, Telefon: ${telefon}, Şifre: ${sifre}, Doğum Tarihi: ${dogumTarihi}`);
//ui.formisim.value = ad;
//ui.formsoyad.value = soyad;
//ui.formemail.value = eposta;
//ui.formtelefon.value = telefon;
//ui.formsifre.value = sifre;
//ui.formdogumTarihi.value = dogumTarihi;
function UI() {
    this.btn_yetiskinArti = document.querySelector(".btn_yetiskinArti"),
    this.btn_yetiskinEksi = document.querySelector(".btn_yetiskinEksi"),
    this.btn_cocukArti = document.querySelector(".btn_cocukArti"),
    this.btn_cocukEksi = document.querySelector(".btn_cocukEksi"),
    this.btn_drop = document.querySelector(".btn_drop")
}
const ui = new UI();

let yetiskinSayisi2 = 1
let cocukSayisi2 = 0

let yetiskinSayisi = document.getElementById("yetiskinSayisi")
let cocukSayisi = document.getElementById("cocukSayisi")

let formlarYetiskin = document.querySelector(".formlarYetiskin");
let adetYetiskin = 1;
let formlarCocuk = document.querySelector(".formlarCocuk");
let adetCocuk = 1;

function formYetiskinArti(adetYetiskin) {
    formlarYetiskin.innerHTML = "";
    for (let i = 1; i < adetYetiskin; i++) {
        let form = document.createElement("form");
        form.id = "form-" + i;
        form.innerHTML = `
        <div class="bg-light p-4 mb-3 rounded mx-auto">
        <h4 class="text-center"><span>${i}</span>.Yetişkin</h4>
        <input type="name" class="form-control mb-3" id="name" placeholder="İsim">
        <input type="surname" class="form-control mb-3" id="surname" placeholder="Soyisim">
        <input type="date" class="form-control mb-3" name="date" id="date" placeholder="Doğum Tarihi" min="1923-01-01" max="2030-12-31">
        <input type="phone" class="form-control mb-3" id="phone" placeholder="Telefon Numarası">
        <input type="email" class="form-control mb-3" id="email" placeholder="E-Posta">
        </div>
      `;
        formlarYetiskin.appendChild(form);
    }
}

function formYetiskinEksi() {
    if (adetYetiskin > 1) {
        let formId = "form-" + (adetYetiskin - 1); // son oluşturulan formun id'si
        let form = document.getElementById(formId);
        formlarYetiskin.removeChild(form); // form elemanı silinir
        adetYetiskin--;
    }
}

function formCocukArti(adetCocuk) {
    formlarCocuk.innerHTML = "";
    for (let i = 1; i < adetCocuk; i++) {
        let form = document.createElement("form");
        form.id = "form-" + i;
        form.innerHTML = `
        <div class="bg-light p-4 mb-3 rounded mx-auto">
        <h4 class="text-center"><span>${i}</span>.Çocuk</h4>
        <input type="name" class="form-control mb-3" id="name" placeholder="İsim">
        <input type="surname" class="form-control mb-3" id="surname" placeholder="Soyisim">
        <input type="date" class="form-control mb-3" name="date" id="date" placeholder="Doğum Tarihi" min="1923-01-01" max="2030-12-31">
        </div>
      `;
        formlarCocuk.appendChild(form);
    }
}

function formCocukEksi() {
    if (adetCocuk > 1) {
        let formId = "form-" + (adetCocuk - 1); // son oluşturulan formun id'si
        let form = document.getElementById(formId);
        formlarCocuk.removeChild(form); // form elemanı silinir
        adetCocuk--;
    }
}

ui.btn_yetiskinArti.addEventListener("click", function () {
    yetiskinSayisi2 = parseInt(yetiskinSayisi.value.toString())
    yetiskinSayisi2 = yetiskinSayisi2 + 1;
    yetiskinSayisi.value = yetiskinSayisi2.toString();
    ui.btn_drop.textContent = yetiskinSayisi2 + " Yetişkin, " + cocukSayisi2 + " Çocuk"
    console.log(yetiskinSayisi2.toString())

    adetYetiskin++;
    formYetiskinArti(adetYetiskin);
});

ui.btn_yetiskinEksi.addEventListener("click", function () {
    yetiskinSayisi2 = parseInt(yetiskinSayisi.value.toString())
    yetiskinSayisi2 = yetiskinSayisi2 - 1;
    yetiskinSayisi.value = yetiskinSayisi2.toString();
    ui.btn_drop.textContent = yetiskinSayisi2 + " Yetişkin, " + cocukSayisi2 + " Çocuk"
    console.log(yetiskinSayisi2.toString())

    formYetiskinEksi();
});

ui.btn_cocukArti.addEventListener("click", function () {
    cocukSayisi2 = parseInt(cocukSayisi.value.toString())
    cocukSayisi2 = cocukSayisi2 + 1;
    cocukSayisi.value = cocukSayisi2.toString();
    ui.btn_drop.textContent = yetiskinSayisi2 + " Yetişkin, " + cocukSayisi2 + " Çocuk"
    console.log(cocukSayisi2.toString())

    adetCocuk++;
    formCocukArti(adetCocuk);
});

ui.btn_cocukEksi.addEventListener("click", function () {
    cocukSayisi2 = parseInt(cocukSayisi.value.toString())
    cocukSayisi2 = cocukSayisi2 - 1;
    cocukSayisi.value = cocukSayisi2.toString();
    ui.btn_drop.textContent = yetiskinSayisi2 + " Yetişkin, " + cocukSayisi2 + " Çocuk"
    console.log(cocukSayisi2.toString())

    formCocukEksi();
});

const form = document.querySelector('form');



<?php 

	define('DB_HOST','localhost');

	define('DB_USERNAME','root');

	define('DB_PASSWORD','');

	define('DB_NAME', 'turizmacentasi');


<?php
 
class DbConnect
{
    private $con;
 
    function __construct()
    {
 
    }
 
    function connect()
    {
        include_once dirname(__FILE__) . '/Constants.php';
     
        $this->con = new mysqli(DB_HOST, DB_USERNAME, DB_PASSWORD, DB_NAME);
     
        if (mysqli_connect_errno()) {
            echo "Failed to connect to MySQL: " . mysqli_connect_error();
            return null;
        }
  
        return $this->con;
    }
 
}<?php 
class DbOperation
{
    private $con;
 
    function __construct()
    {
        require_once dirname(__FILE__) . '/DbConnect.php';
        $db = new DbConnect();
        $this->con = $db->connect();
    }
	public function getYurtdisiTurView(){
		$stmt = $this->con->prepare("SELECT * FROM yurtdisiturview");
		$stmt->execute();
		$stmt->bind_result($idYurtdisiTur,$adi,$fiyat,$resimUrl,$baslangicTarihi,$baslangicKonumu,$guzergah,$vizeDurumu,$gunBir,$gunIki,$gunUc,$gunDort,$gunBes);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idYurtdisiTur'] = $idYurtdisiTur; 
			$temp['adi'] = $adi; 
			$temp['fiyat'] = $fiyat; 
			$temp['resimUrl'] = $resimUrl; 
			$temp['baslangicTarihi'] = $baslangicTarihi; 
			$temp['baslangicKonumu'] = $baslangicKonumu; 
			$temp['guzergah'] = $guzergah; 
			$temp['vizeDurumu'] = $vizeDurumu;
			$temp['gunBir'] = $gunBir; 
			$temp['gunIki'] = $gunIki; 
			$temp['gunUc'] = $gunUc; 
			$temp['gunDort'] = $gunDort;
			$temp['gunBes'] = $gunBes;
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getTekneTurView(){
		$stmt = $this->con->prepare("SELECT * FROM tekneturview");
		$stmt->execute();
		$stmt->bind_result($idTekneTur,$adi,$fiyat,$resimUrl,$baslangicTarihi,$baslangicKonumu,$guzergah,$vizeDurumu,$gunBir,$gunIki,$gunUc,$gunDort,$gunBes);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idTekneTur'] = $idTekneTur; 
			$temp['adi'] = $adi; 
			$temp['fiyat'] = $fiyat; 
			$temp['resimUrl'] = $resimUrl; 
			$temp['baslangicTarihi'] = $baslangicTarihi; 
			$temp['baslangicKonumu'] = $baslangicKonumu; 
			$temp['guzergah'] = $guzergah; 
			$temp['vizeDurumu'] = $vizeDurumu;
			$temp['gunBir'] = $gunBir; 
			$temp['gunIki'] = $gunIki; 
			$temp['gunUc'] = $gunUc; 
			$temp['gunDort'] = $gunDort;
			$temp['gunBes'] = $gunBes;
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
    public function getOtelView(){
		$stmt = $this->con->prepare("SELECT * FROM otelview");
		$stmt->execute();
		$stmt->bind_result($idOtel, $adres,$puan,$tema,$adi,$fiyat,$resimUrl);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idOtel'] = $idOtel; 
			$temp['adres'] = $adres; 
			$temp['puan'] = $puan; 
			$temp['tema'] = $tema; 
			$temp['adi'] = $adi; 
			$temp['fiyat'] = $fiyat; 
			$temp['resimUrl'] = $resimUrl; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function updateByIdRezervasyon($id, $yetiskinSayisi,$cocukSayisi,$girisTarihi,$cikisTarihi){
		$stmt = $this->con->prepare("UPDATE rezervasyon SET yetiskinSayisi=?, cocukSayisi=?, girisTarihi=?, cikisTarihi=? WHERE idRezervasyon = ?");
		$stmt->bind_param("ssssi", $yetiskinSayisi,$cocukSayisi,$girisTarihi,$cikisTarihi, $id);
		if($stmt->execute()) {
			return true; 
		} else {
			return false;
		}
	}
	public function updateByIdMusteri($id,$adi, $soyadi,$sifre,$telefonNumarasi,$epostaAdresi,$dogumTarihi){
		$stmt = $this->con->prepare("UPDATE musteri SET adi=?, soyadi=?, sifre=?, telefonNumarasi=?, epostaAdresi=?, dogumTarihi=? WHERE idMusteri = ?");
		$stmt->bind_param("ssssssi", $adi, $soyadi, $sifre, $telefonNumarasi, $epostaAdresi, $dogumTarihi, $id);
		if($stmt->execute()) {
			return true; 
		} else {
			return false;
		}
	}
	public function deleteByIdMusteri($id){
		$stmt = $this->con->prepare("DELETE FROM musteri WHERE idMusteri = $id");
		if($stmt->execute()) {
			return true; 
		} else {
			return false;
		}
	}
	public function deleteByIdRezervasyon($id){
		$stmt = $this->con->prepare("DELETE FROM rezervasyon WHERE idMusteri = $id");
		if($stmt->execute()) {
			return true; 
		} else {
			return false;
		}
	}
    public function getHizmetCount(){
		$sql = "SELECT COUNT(*) as count FROM hizmet";
		$result = $this->con->query($sql);
        $row = $result->fetch_assoc();
		$count = $row['count'];
		return $count;

	}
    public function createHizmet($hizmetTabloId,$hizmetTabloAdi){
		$sql = "SELECT COUNT(*) as count FROM hizmet";
		$result = $this->con->query($sql);
        $row = $result->fetch_assoc();
		$count = $row['count'];
		if ($count > 0) {
			$stmt = $this->con->prepare("INSERT INTO hizmet (`idHizmet`, `hizmetTabloId`, `hizmetTabloAdi`) VALUES ($count+1, ?, ?)");
			$stmt->bind_param("is", $hizmetTabloId, $hizmetTabloAdi);
			if($stmt->execute()) {
				return true; 
			} else {
				return false;
			}
		} else {
			$stmt = $this->con->prepare("INSERT INTO hizmet (`idHizmet`, `hizmetTabloId`, `hizmetTabloAdi`) VALUES (1, ?, ?)");
			$stmt->bind_param("is", $hizmetTabloId, $hizmetTabloAdi);
			if($stmt->execute()) {
				return true; 
			} else {
				return false;
			}
		}
		return false;

	}
    public function createRezervasyon($tarihi, $yetiskinSayisi,$cocukSayisi,$Musteri_idMusteri,$girisTarihi,$cikisTarihi){

		$result = $this->con->query("SELECT COUNT(*) as count FROM hizmet");
		$row = $result->fetch_assoc();
		$idHizmet = $row['count'];
		$sql = "SELECT COUNT(*) as count FROM rezervasyon";
		$result = $this->con->query($sql);
		$row = $result->fetch_assoc();
		$count = $row['count'];
		if ($result->num_rows > 0) {
			$stmt = $this->con->prepare("INSERT INTO rezervasyon (`idRezervasyon`, `tarihi`, `yetiskinSayisi`,`cocukSayisi`,`Musteri_idMusteri`,`Hizmet_idHizmet`,`girisTarihi`,`cikisTarihi`) VALUES ($count+1, ?, ?, ?, ?, ?, ?, ?)");
			$stmt->bind_param("siiiiss", $tarihi, $yetiskinSayisi, $cocukSayisi, $Musteri_idMusteri, $idHizmet,$girisTarihi,$cikisTarihi);
			if($stmt->execute()) {
				return true; 
			} else {
				return false;
			}
		} else {
			$stmt = $this->con->prepare("INSERT INTO rezervasyon (`idRezervasyon`, `tarihi`, `yetiskinSayisi`,`cocukSayisi`,`Musteri_idMusteri`,`Hizmet_idHizmet`,`girisTarihi`,`cikisTarihi`) VALUES (1, ?, ?, ?, ?, ?, ?, ?)");
			$stmt->bind_param("siiiiss", $tarihi, $yetiskinSayisi, $cocukSayisi, $Musteri_idMusteri, $idHizmet,$girisTarihi,$cikisTarihi);
			if($stmt->execute()) {
				return true; 
			} else {
				return false;
			}
		}
		
		return false;
	}
	public function createMusteri($adi, $soyadi,$sifre,$telefonNumarasi,$epostaAdresi,$dogumTarihi){
		$sql = "SELECT COUNT(*) as count FROM musteri";
		$result = $this->con->query($sql);
        $row = $result->fetch_assoc();
		$count = $row['count'];
		if ($result->num_rows > 0) {
			$stmt = $this->con->prepare("INSERT INTO musteri (`idMusteri`, `adi`, `soyadi`,`sifre`,`telefonNumarasi`,`epostaAdresi`,`dogumTarihi`) VALUES ($count+1, ?, ?,?, ?, ?, ?)");
			$stmt->bind_param("ssssss", $adi, $soyadi,$sifre, $telefonNumarasi, $epostaAdresi, $dogumTarihi);
			if($stmt->execute()) {
				return true; 
			} else {
				return false;
			}
		} else {
			$stmt = $this->con->prepare("INSERT INTO musteri (`idMusteri`, `adi`, `soyadi`,`sifre`,`telefonNumarasi`,`epostaAdresi`,`dogumTarihi`) VALUES (1, ?,?, ?, ?, ?, ?)");
			$stmt->bind_param("ssssss", $adi, $soyadi,$sifre, $telefonNumarasi, $epostaAdresi, $dogumTarihi);
			if($stmt->execute()) {
				return true; 
			} else {
				return false;
			} 
		}
		return false;
		
	}
	public function getOtel(){
		$stmt = $this->con->prepare("SELECT * FROM otel");
		$stmt->execute();
		$stmt->bind_result($idOtel, $adres,$HizmetBilgisi_idHizmetBilgisi,$puan,$tema);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idOtel'] = $idOtel; 
			$temp['adres'] = $adres; 
			$temp['HizmetBilgisi_idHizmetBilgisi'] = $HizmetBilgisi_idHizmetBilgisi; 
			$temp['puan'] = $puan; 
			$temp['tema'] = $tema; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getByIdOtel($id){
		$stmt = $this->con->prepare("SELECT * FROM otel WHERE idOtel = ?");
		$stmt->bind_param("i", $id);
		$stmt->execute();
		$stmt->bind_result($idOtel, $adres,$HizmetBilgisi_idHizmetBilgisi,$puan,$tema);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idOtel'] = $idOtel; 
			$temp['adres'] = $adres; 
			$temp['HizmetBilgisi_idHizmetBilgisi'] = $HizmetBilgisi_idHizmetBilgisi; 
			$temp['puan'] = $puan; 
			$temp['tema'] = $tema; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getByIdHizmet($id){
		$stmt = $this->con->prepare("SELECT * FROM hizmet WHERE idHizmet = ?");
		$stmt->bind_param("i", $id);
		$stmt->execute();
		$stmt->bind_result($idHizmet, $hizmetTabloId, $hizmetTabloAdi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idHizmet'] = $idHizmet; 
			$temp['hizmetTabloId'] = $hizmetTabloId; 
			$temp['hizmetTabloAdi'] = $hizmetTabloAdi; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getMusteri(){
		$stmt = $this->con->prepare("SELECT * FROM musteri ");
		$stmt->execute();
		$stmt->bind_result($idMusteri, $adi, $soyadi,$sifre,$telefonNumarasi,$epostaAdresi,$dogumTarihi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idMusteri'] = $idMusteri; 
			$temp['adi'] = $adi; 
			$temp['soyadi'] = $soyadi; 
			$temp['sifre'] = $sifre; 
			$temp['telefonNumarasi'] = $telefonNumarasi; 
			$temp['epostaAdresi'] = $epostaAdresi; 
			$temp['dogumTarihi'] = $dogumTarihi; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getByIdMusteri($id){
		$stmt = $this->con->prepare("SELECT * FROM musteri WHERE idMusteri = ?");
		$stmt->bind_param("i", $id);
		$stmt->execute();
		$stmt->bind_result($idMusteri, $adi, $soyadi,$sifre,$telefonNumarasi,$epostaAdresi,$dogumTarihi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idMusteri'] = $idMusteri; 
			$temp['adi'] = $adi; 
			$temp['soyadi'] = $soyadi; 
			$temp['sifre'] = $sifre; 
			$temp['telefonNumarasi'] = $telefonNumarasi; 
			$temp['epostaAdresi'] = $epostaAdresi; 
			$temp['dogumTarihi'] = $dogumTarihi; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getRezervasyon(){
		$stmt = $this->con->prepare("SELECT * FROM rezervasyon");
		$stmt->execute();
		$stmt->bind_result($idRezervasyon, $tarihi, $yetiskinSayısı,$cocukSayisi,$Musteri_idMusteri,$Hizmet_idHizmet,$girisTarihi,$cikisTarihi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idRezervasyon'] = $idRezervasyon; 
			$temp['tarihi'] = $tarihi; 
			$temp['yetiskinSayısı'] = $yetiskinSayısı; 
			$temp['cocukSayisi'] = $cocukSayisi; 
			$temp['Musteri_idMusteri'] = $Musteri_idMusteri; 
			$temp['Hizmet_idHizmet'] = $Hizmet_idHizmet; 
			$temp['girisTarihi'] = $girisTarihi; 
			$temp['cikisTarihi'] = $cikisTarihi; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getByIdRezervasyon($id){
		$stmt = $this->con->prepare("SELECT * FROM rezervasyon WHERE idRezervasyon = ?");
		$stmt->bind_param("i", $id);
		$stmt->execute();
		$stmt->bind_result($idRezervasyon, $tarihi, $yetiskinSayısı,$cocukSayisi,$Musteri_idMusteri,$Hizmet_idHizmet,$girisTarihi,$cikisTarihi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idRezervasyon'] = $idRezervasyon; 
			$temp['tarihi'] = $tarihi; 
			$temp['yetiskinSayısı'] = $yetiskinSayısı; 
			$temp['cocukSayisi'] = $cocukSayisi; 
			$temp['Musteri_idMusteri'] = $Musteri_idMusteri; 
			$temp['Hizmet_idHizmet'] = $Hizmet_idHizmet;
			$temp['girisTarihi'] = $girisTarihi; 
			$temp['cikisTarihi'] = $cikisTarihi;  
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getByIdHizmetBilgisi($id){
		$stmt = $this->con->prepare("SELECT * FROM hizmetBilgisi WHERE idHizmetBilgisi = ?");
		$stmt->bind_param("i", $id);
		$stmt->execute();
		$stmt->bind_result($idHizmetBilgisi, $adi, $fiyat,$resimUrl);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idHizmetBilgisi'] = $idHizmetBilgisi; 
			$temp['adi'] = $adi; 
			$temp['fiyat'] = $fiyat; 
			$temp['resimUrl'] = $resimUrl;  
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getByIdTurProgrami($id){
		$stmt = $this->con->prepare("SELECT * FROM turprogrami WHERE idTurProgrami = ?");
		$stmt->bind_param("s", $id);
		$stmt->execute();
		$stmt->bind_result($idTurProgrami, $baslangicTarihi, $baslangicKonumu,$guzergah,$vizeDurumu,$gunBir,$gunIki,$gunUc,$gunDort,$gunBes);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idTurProgrami'] = $idTurProgrami; 
			$temp['baslangicTarihi'] = $baslangicTarihi; 
			$temp['baslangicKonumu'] = $baslangicKonumu; 
			$temp['guzergah'] = $guzergah; 
			$temp['vizeDurumu'] = $vizeDurumu; 
			$temp['gunBir'] = $gunBir; 
			$temp['gunIki'] = $gunIki; 
			$temp['gunUc'] = $gunUc; 
			$temp['gunDort'] = $gunDort; 
			$temp['gunBes'] = $gunBes; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getTekneTur(){
		$stmt = $this->con->prepare("SELECT * FROM teknetur");
		$stmt->execute();
		$stmt->bind_result($idTekneTur, $TurProgrami_idTurProgrami, $HizmetBilgisi_idHizmetBilgisi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idTekneTur'] = $idTekneTur; 
			$temp['TurProgrami_idTurProgrami'] = $TurProgrami_idTurProgrami; 
			$temp['HizmetBilgisi_idHizmetBilgisi'] = $HizmetBilgisi_idHizmetBilgisi; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getByIdTekneTur($id){
		$stmt = $this->con->prepare("SELECT * FROM teknetur WHERE idTekneTur = ?");
		$stmt->bind_param("i", $id);
		$stmt->execute();
		$stmt->bind_result($idTekneTur, $TurProgrami_idTurProgrami, $HizmetBilgisi_idHizmetBilgisi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idTekneTur'] = $idTekneTur; 
			$temp['TurProgrami_idTurProgrami'] = $TurProgrami_idTurProgrami; 
			$temp['HizmetBilgisi_idHizmetBilgisi'] = $HizmetBilgisi_idHizmetBilgisi; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getYurtdisiTur(){
		$stmt = $this->con->prepare("SELECT * FROM yurtdisitur");
		$stmt->execute();
		$stmt->bind_result($idYurtdisiTur, $TurProgrami_idTurProgrami, $HizmetBilgisi_idHizmetBilgisi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idYurtdisiTur'] = $idYurtdisiTur; 
			$temp['TurProgrami_idTurProgrami'] = $TurProgrami_idTurProgrami; 
			$temp['HizmetBilgisi_idHizmetBilgisi'] = $HizmetBilgisi_idHizmetBilgisi; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
	public function getByIdYurtdisiTur($id){
		$stmt = $this->con->prepare("SELECT * FROM yurtdisitur WHERE idYurtdisiTur = ?");
		$stmt->bind_param("i", $id);
		$stmt->execute();
		$stmt->bind_result($idYurtdisiTur, $TurProgrami_idTurProgrami, $HizmetBilgisi_idHizmetBilgisi);
		$artists = array();
		
		while($stmt->fetch()){
			$temp = array(); 
			$temp['idYurtdisiTur'] = $idYurtdisiTur; 
			$temp['TurProgrami_idTurProgrami'] = $TurProgrami_idTurProgrami; 
			$temp['HizmetBilgisi_idHizmetBilgisi'] = $HizmetBilgisi_idHizmetBilgisi; 
			array_push($artists, $temp);
		}
		$stmt->close();
		return $artists; 
	}
}



<?php 

	require_once '../includes/DbOperation.php';
	
	$response = array(); 

	if(isset($_GET['op'])){
		
		switch($_GET['op']){
			case 'getYurtdisiTurView':
				$db = new DbOperation();
			    $yurtdisitur = $db->getYurtdisiTurView();
				if(count($yurtdisitur)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['yurtdisitur'] = $yurtdisitur;
				}
			break;
			case 'getTekneTurView':
				$db = new DbOperation();
			    $teknetur = $db->getTekneTurView();
				if(count($teknetur)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['teknetur'] = $teknetur;
				}
			break;
			case 'getOtelView':
				$db = new DbOperation();
			    $otel = $db->getOtelView();
				if(count($otel)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['otel'] = $otel;
				}
			break;
			case 'updateMusteri':
			    if(isset($_POST['id']) && isset ($_POST['adi']) && isset ($_POST['soyadi']) && isset ($_POST['sifre']) && isset($_POST['telefonNumarasi']) && isset ($_POST['epostaAdresi']) && isset ($_POST['dogumTarihi'])) {

					$db = new DbOperation(); 
					if($db->updateByIdMusteri($_POST['id'],$_POST['adi'],$_POST['soyadi'],$_POST['sifre'],$_POST['telefonNumarasi'],$_POST['epostaAdresi'],$_POST['dogumTarihi'])){
						$response['error'] = false;
						$response['message'] = 'Musteri güncellendi';
					}else{
						$response['error'] = true;
						$response['message'] = 'Musteri güncellenemedi';
					}
				}
			break;
			
			case 'updateRezervasyon':
			    if(isset($_POST['id']) && isset($_POST['yetiskinSayisi']) && isset($_POST['cocukSayisi']) && isset($_POST['girisTarihi']) && isset($_POST['cikisTarihi'])){
					$db = new DbOperation(); 
					if($db->updateByIdRezervasyon($_POST['id'],$_POST['yetiskinSayisi'],$_POST['cocukSayisi'],$_POST['girisTarihi'],$_POST['cikisTarihi'])){
						$response['error'] = false;
						$response['message'] = 'Rezervasyon güncellendi';
					}else{
						$response['error'] = true;
						$response['message'] = 'Rezervasyon güncellenemedi';
					}
				}
			break;
            
			case 'deleteMusteri':
				if(isset($_POST['id'])){
					$db = new DbOperation(); 
					if($db->deleteByIdMusteri($_POST['id'])){
						$response['error'] = false;
						$response['message'] = 'Musteri silindi';
					}else{
						$response['error'] = true;
							$response['message'] = 'Musteri silinemedi';
					}
				}
			break;
			
			case 'deleteRezervasyon':
				if(isset($_POST['id'])){
					$db = new DbOperation(); 
					if($db->deleteByIdRezervasyon($_POST['id'])){
						$response['error'] = false;
						$response['message'] = 'Rezervasyon silindi';
					}else{
						$response['error'] = true;
						$response['message'] = 'Rezervasyon silinemedi';
					}
				}
			break;
			
			case 'createRezervasyon':
				if(isset($_POST['tarihi']) && isset($_POST['yetiskinSayısı']) && isset ($_POST['cocukSayisi'])&&isset($_POST['Musteri_idMusteri']) && isset($_POST['hizmetTabloId']) && isset($_POST['hizmetTabloAdi'])  && isset($_POST['girisTarihi']) && isset($_POST['cikisTarihi'])){
					$db = new DbOperation(); 
					if($db->createHizmet($_POST['hizmetTabloId'],$_POST['hizmetTabloAdi'])){
						if($db->createRezervasyon($_POST['tarihi'] , $_POST['yetiskinSayısı'], $_POST['cocukSayisi'],$_POST['Musteri_idMusteri'],$_POST['girisTarihi'], $_POST['cikisTarihi'])){
							$response['error'] = false;
							$response['message'] = 'Rezervasyon eklendi';
						}else{
							$response['error'] = true;
							$response['message'] = 'Rezervasyon eklenemedi';
						}
					}				
				}else{
					$response['error'] = true; 
					$response['message'] = 'Parametreler doğru şekilde girilmedi';
				}
			break; 
			
			case 'createMusteri':
				if( isset($_POST['adi']) && isset ($_POST['soyadi'])&& isset ($_POST['sifre'])&& isset($_POST['telefonNumarasi']) && isset ($_POST['epostaAdresi']) && isset ($_POST['dogumTarihi'])){
					$db = new DbOperation(); 
					if($db->createMusteri($_POST['adi'], $_POST['soyadi'],$_POST['sifre'],$_POST['telefonNumarasi'],$_POST['epostaAdresi'],$_POST['dogumTarihi'])){
						$response['error'] = false;
						$response['message'] = 'Musteri eklendi';
					}else{
						$response['error'] = true;
						$response['message'] = 'Musteri eklenemedi';
					}
				}else{
					$response['error'] = true; 
					$response['message'] = 'Parametreler doğru şekilde girilmedi';
				}
			break;

			case 'getOtel':
				$db = new DbOperation();
				if(isset($_GET['id']) || !empty($_GET['id'])) {
					$id = $_GET['id'];
					$otel = $db->getByIdOtel($id);
				} else {
					$otel = $db->getOtel();
				}
				if(count($otel)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['otel'] = $otel;
				}
			break; 

			case 'getHizmet':
				$db = new DbOperation();
				
				if(isset($_GET['id']) || !empty($_GET['id'])){
					$id = $_GET['id'];
					$hizmet = $db->getByIdHizmet($id);
				}else{
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}
				if(count($hizmet)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['hizmet'] = $hizmet;
				}
			break;

			case 'getMusteri':
				$db = new DbOperation();	
				if(isset($_GET['id']) || !empty($_GET['id'])){
					$id = $_GET['id'];
					$musteri = $db->getByIdMusteri($id);
				}else{
					$musteri= $db->getMusteri();
				}
				if(count($musteri)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['musteri'] = $musteri;
				}
			break;

			case 'getRezervasyon':
				$db = new DbOperation();
				
				if(isset($_GET['id']) || !empty($_GET['id'])){
					$id = $_GET['id'];
					$rezervasyon = $db->getByIdRezervasyon($id);
				}else{
					$rezervasyon = $db->getRezervasyon();
				}
				if(count($rezervasyon)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['rezervasyon'] = $rezervasyon;
				}
			break; 

			case 'getHizmetBilgisi':
				$db = new DbOperation();
				if(isset($_GET['id']) || !empty($_GET['id'])){
					$id = $_GET['id'];
					$hizmetbilgisi = $db->getByIdHizmetBilgisi($id);
				}else{
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}
				if(count($hizmetbilgisi)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['hizmetbilgisi'] = $hizmetbilgisi;
				}
			break;

			case 'getTurProgrami':
				$db = new DbOperation();
				if(isset($_GET['id']) || !empty($_GET['id'])){
					$id = $_GET['id'];
					$turprogrami = $db->getByIdTurProgrami($id);
				}else{
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}
				if(count($turprogrami)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['turprogrami'] = $turprogrami;
				}
			break;
			case 'getTekneTur':
				$db = new DbOperation();
				if(isset($_GET['id']) || !empty($_GET['id'])){
					$id = $_GET['id'];
					$teknetur = $db->getByIdTekneTur($id);
				}else{
					$teknetur = $db->getTekneTur();
				}
				if(count($teknetur)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['teknetur'] = $teknetur;
				}
			break; 
			
			case 'getYurtdisiTur':
				$db = new DbOperation();
				if(isset($_GET['id']) || !empty($_GET['id'])){
					$id = $_GET['id'];
					$yurtdisitur = $db->getByIdYurtdisiTur($id);
				}else{

					$yurtdisitur = $db->getYurtdisiTur();
				}
				if(count($yurtdisitur)<=0){
					$response['error'] = true; 
					$response['message'] = 'Veritabanı bulunamadı';
				}else{
					$response['error'] = false; 
					$response['yurtdisitur'] = $yurtdisitur;
				}
			break; 
			
			default:
				$response['error'] = true;
				$response['message'] = 'Gerçekleştirilecek işlem yok';
			
		}
		
	}else{
		$response['error'] = false; 
		$response['message'] = 'Geçersiz istek';
	}
	
	echo json_encode($response);
CREATE INDEX idx_eposta ON musteri (epostaAdresi);
CREATE INDEX idx_sifre ON musteri (sifre);
select epostaAdresi from musteri where epostaAdresi="musticane@gmail.com";
select sifre from musteri where sifre ="123";
DELIMITER $$
create trigger after_rezervasyon_update after update on 
musteri
FOR EACH ROW
BEGIN
  INSERT INTO newmusteri (adi,soyadi,sifre,telefonNumarasi,epostaAdresi,dogumTarihi,idMusteri)
  VALUES (old.adi,old.soyadi,old.sifre,old.telefonNumarasi,old.epostaAdresi,old.dogumTarihi,old.idMusteri);
END$$
DELIMITER ;

-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Anamakine: 127.0.0.1
-- Üretim Zamanı: 15 May 2023, 14:01:57
-- Sunucu sürümü: 10.4.28-MariaDB
-- PHP Sürümü: 8.1.17

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Veritabanı: `turizmacentasi`
--

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `hizmet`
--

CREATE TABLE `hizmet` (
  `idHizmet` int(11) NOT NULL,
  `hizmetTabloId` int(11) NOT NULL,
  `hizmetTabloAdi` varchar(45) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `hizmet`
--

INSERT INTO `hizmet` (`idHizmet`, `hizmetTabloId`, `hizmetTabloAdi`) VALUES
(1, 1, 'otel'),
(2, 3, 'otel'),
(3, 3, 'otel'),
(4, 2, 'otel'),
(5, 1, 'otel'),
(6, 2, 'otel'),
(7, 2, 'otel'),
(8, 4, 'otel'),
(9, 3, 'otel'),
(13, 10, 'yurtdisitur'),
(14, 10, 'yurtdisitur'),
(15, 10, 'yurtdisitur'),
(17, 2, 'otel'),
(18, 1, 'otel'),
(19, 1, 'teknetur'),
(21, 1, 'otel'),
(22, 5, 'otel');

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `hizmetbilgisi`
--

CREATE TABLE `hizmetbilgisi` (
  `idHizmetBilgisi` int(11) NOT NULL,
  `adi` varchar(100) NOT NULL,
  `fiyat` int(11) NOT NULL,
  `resimUrl` varchar(300) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `hizmetbilgisi`
--

INSERT INTO `hizmetbilgisi` (`idHizmetBilgisi`, `adi`, `fiyat`, `resimUrl`) VALUES
(1, 'Arnavutluk:Keşfedilmeyi Bekleyen Balkan Turu', 14000, 'https://media.istockphoto.com/id/529358575/tr/foto%C4%9Fraf/sarandas-port-at-ionian-sea-albania.jpg?s=612x612&w=0&k=20&c=FlLGKmJjhG1GgGbnSdJlJSav-s2D_N5-gt52zwUKkbA='),
(2, 'Dubai Turu:Lüks,Macera ve Modernitenin Buluştuğu Kültürel Cennet', 18000, 'https://cdnp.flypgs.com/files/Sehirler-long-tail/Dubai/dubai-palmiye-ada.jpg'),
(3, 'Italya:Tarihi, Lezzetli ve Sanat Dolu Bir Akdeniz Macerası', 24000, 'https://media.istockphoto.com/id/539115110/tr/foto%C4%9Fraf/colosseum-in-rome-and-morning-sun-italy.jpg?s=612x612&w=0&k=20&c=wjC8WZlGQBv9tbPLZy5AOp98br-F8f92g_9zOO24eAE='),
(4, 'Bulgaristan: Tarihi ve Kültürel Zenginlikleriyle Dolu Balkan Turu', 8000, 'https://media.istockphoto.com/id/621112110/tr/foto%C4%9Fraf/the-cathedral-of-the-assumption-in-varna-aerial-view.jpg?s=612x612&w=0&k=20&c=RF1HmqypfGJ9gb_Yg-G6c2GgCWX32wtYc9D_GeLYslI='),
(5, 'İran: Doğunun Tarihi, Doğal Güzellikleri ve Kültürel Mirasıyla Dolu Bir Keşif', 25000, 'https://media.istockphoto.com/id/1134992307/tr/foto%C4%9Fraf/isfahan-da-naqsh-e-cihan-meydan%C4%B1-iran-januray-2019-%C3%A7ekilen-hdr.jpg?s=612x612&w=0&k=20&c=JBy9MFzRXK6epwU8L0u4gDCn6BKC33oCLhKOGFVA2iE='),
(6, 'İspanya: Lezzetli Mutfağı, Renkli Festivalleri ve Tarihi Mirasıyla Dolu Bir İber Yarımadası Deneyimi', 20000, 'https://cdn.ytur.net/fit-in/697x465/filters:quality(100)/filters:format(webp)/post/ispanya-ya-ne-zaman-gidilir-220420-112316-8021.jpg'),
(7, 'Sırbistan:Bir Balkan Kaçamağı', 10000, 'https://media.istockphoto.com/id/1326144217/tr/foto%C4%9Fraf/temple-saint-sava.jpg?s=612x612&w=0&k=20&c=cmQQFFc904AkJF1O4UDrXeg6WFBbnNbSLOr_XZiw8EY='),
(8, 'Yunanistan: Antik Harikaları, Güneşli Adaları ve Lezzetli Mutfağıyla Dolu Bir Akdeniz Turu', 30000, 'https://media.istockphoto.com/id/1145450965/tr/foto%C4%9Fraf/santorini-adas%C4%B1-yunanistan.jpg?s=612x612&w=0&k=20&c=L7huttq6zPJ0a_x2pp1VIj3F5QjEOH-p9eiuIKj8UqY='),
(9, 'Maldivler: Beyaz Kumlu Plajları, Mercan Resifleri ve Turkuaz Sularıyla Dolu Cennet Bir Ada Tatili', 50000, 'https://media.istockphoto.com/id/155139968/tr/foto%C4%9Fraf/island-of-maldives.jpg?s=612x612&w=0&k=20&c=257DND0NNnGuoP-4aLWPRAt4nq33ngO_MCVQrWtkQks='),
(10, 'Mısır: Antik Harikaları, Nil Nehri\'ni Keşif ve Kültürel Zenginlikleriyle Dolu Bir Orta Doğu Turu', 29000, 'https://blog.obilet.com/wp-content/uploads/2019/05/shutterstock_1169166295.jpg'),
(11, 'Bavyera\'nın Güzellikleri: Münih, Regensburg, Nürnberg ve Bamberg Tekne Turu', 44000, 'https://cdn2.setur.com.tr/image/tour/large/cruise-7af81746-4920-4043-be4a-8366b906ffb4.jpg'),
(12, 'Sırbistan\'ı Keşfedin: Sava Nehri, Đerdap Milli Parkı ve Kaleleri İle Tekne Turu', 21000, 'https://wp.oggusto.com/wp-content/uploads/2022/03/dunyanin-en-buyuk-10-superyati-1.jpg'),
(13, 'Hollanda\'nın Tarihi Kanallarında Geleneksel Köyleri Keşfedin: Rotterdam Tekne Turu', 27000, 'https://www.karavancruises.com/shipphotos/holland-america-line-rotterdam.jpg'),
(14, 'Panama Macerası: Kanal Keşfi, Adaların Keyfi ve Tarihi Casco Viejo Tekne Turu', 34000, 'https://images.gemiturlari.info/gemi/turlar/visionoftheseasgemituru-1172019121706.jpg'),
(15, 'Batı Amerika\'nın En İkonik Şehirleri: Los Angeles, Las Vegas ve San Francisco\'yu Tekne turu ile keşf', 57000, 'https://www.goldenbaytour.com/UserFiles/Images/odyssey-exterior-03_extendededge_200.jpg'),
(16, 'Ege Denizi\'nin İncileri: Santorini, Mykonos, Rodos ve Selanik Tekne Turu', 43000, 'https://ucdn.tatilbudur.net/tur/Tour-Category/780x446/539434.jpg'),
(17, 'Ege Adaları\'nın Tarihi ve Doğal Güzellikleri: Kuşadası, Samos, Patmos, Lipsi ve Leros Tekne Turu', 49000, 'https://library.coraltatil.com/resources/pageImages/1/original/93/1.jpg'),
(18, 'Baltık Denizi\'nin İncileri: Helsinki, St. Petersburg, Tallinn, Riga ve Stockholm Tekne Turu', 40000, 'https://www.karavancruises.com/uploads/baltik-baskentleri-gemi-turu.jpg'),
(19, 'Tropical Paradise: Bahamalar, Jamaika, Kaiman Adaları ve Meksika\'da Unutulmaz Bir Tekne Turu', 70000, 'https://images.gemiturlari.info/gemi/turlar/cococay-bahamalar-18102022170440.jpg'),
(20, 'Beş Günde Macaristan\'ın En Güzel Şehirleri: Budapeşte, Visegrád, Esztergom ve Komárom Tekne Turu', 56000, 'https://www.mngturizm.com/images/tour/12141_b.jpg'),
(21, 'Voyage Torba', 5000, 'https://images.etstur.com/files/images/hotelImages/TR/52480/l/Voyage-Torba-Genel-313740.jpg'),
(22, 'Asteria Kemer Resort', 3100, 'https://images.etstur.com/files/images/hotelImages/TR/97205/l/Selectum-Exclusive-Resort-Kemer-Genel-360477.jpg'),
(23, 'Sacred House Hotel', 6115, 'https://cdng.jollytur.com/files/cms/media/hotel/816d2e94-789d-4714-a0f2-d1e32537e506-600.jpg'),
(24, 'Nuhun Gemisi Deluxe Hotel & Spa', 2850, 'https://images.etstur.com/files/images/hotelImages/TR/52480/l/Voyage-Torba-Genel-313740.jpg'),
(25, 'Les Terrasses De Selimiye', 2162, 'https://cdng.jollytur.com/files/cms/media/hotel/0fd9e75c-5763-409c-ac50-51173cfcb2be-1024.jpg'),
(26, 'Melas Hotel Istanbul', 4232, 'https://cdng.jollytur.com/files/cms/media/hotel/82bf7c68-9ab3-46f7-855f-271114db114b-600.jpg'),
(27, 'Abant Lotus Otel', 2562, 'https://cdng.jollytur.com/files/cms/media/hotel/57856e54-04a8-40e8-b266-3d3120eb593f-600.jpg'),
(28, 'Grand Bursa Hotel', 1200, 'https://cdng.jollytur.com/files/cms/media/hotel/7bb7f6b8-c79d-4f27-a277-d33ffdcfcc41-600.JPG'),
(29, 'Villa Levante Hotel', 3203, 'https://cdng.jollytur.com/files/cms/media/hotel/a21bd9e7-9229-4a93-9080-19e7a14cf3f4-600.jpg'),
(30, 'Elite World Grand Sapanca Hotel', 3795, 'https://cdng.jollytur.com/files/cms/media/hotel/899c4015-6306-464d-bff0-85d487374b64-600.jpg');

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `musteri`
--

CREATE TABLE `musteri` (
  `idMusteri` int(11) NOT NULL,
  `adi` varchar(45) NOT NULL,
  `soyadi` varchar(45) NOT NULL,
  `sifre` varchar(45) NOT NULL,
  `telefonNumarasi` varchar(45) NOT NULL,
  `epostaAdresi` varchar(45) NOT NULL,
  `dogumTarihi` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `musteri`
--

INSERT INTO `musteri` (`idMusteri`, `adi`, `soyadi`, `sifre`, `telefonNumarasi`, `epostaAdresi`, `dogumTarihi`) VALUES
(1, 'Mustafa', 'Toprak', '3232', '05331327841', 'musttoprakk@gmail.com', '2003-07-29 00:00:00');

--
-- Tetikleyiciler `musteri`
--
DELIMITER $$
CREATE TRIGGER `after_rezervasyon_update` AFTER UPDATE ON `musteri` FOR EACH ROW BEGIN
  INSERT INTO newmusteri (adi,soyadi,sifre,telefonNumarasi,epostaAdresi,dogumTarihi,idMusteri)
  VALUES (old.adi,old.soyadi,old.sifre,old.telefonNumarasi,old.epostaAdresi,old.dogumTarihi,old.idMusteri);
END
$$
DELIMITER ;

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `newmusteri`
--

CREATE TABLE `newmusteri` (
  `idNewMusteri` int(11) NOT NULL,
  `adi` varchar(45) NOT NULL,
  `soyadi` varchar(45) NOT NULL,
  `sifre` varchar(45) NOT NULL,
  `telefonNumarasi` varchar(45) NOT NULL,
  `epostaAdresi` varchar(45) NOT NULL,
  `dogumTarihi` datetime NOT NULL,
  `idMusteri` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `newmusteri`
--

INSERT INTO `newmusteri` (`idNewMusteri`, `adi`, `soyadi`, `sifre`, `telefonNumarasi`, `epostaAdresi`, `dogumTarihi`, `idMusteri`) VALUES
(0, 'Musteeeee', 'Topraaak', '3131', '05331327841', 'musttoprakk@gmail.com', '2003-07-29 00:00:00', 1),
(0, 'Mustafa', 'Topraaak', '3131', '05331327841', 'musttoprakk@gmail.com', '2003-07-29 00:00:00', 1),
(0, 'Mustafa', 'Toprak', '3131', '05331327841', 'musttoprakk@gmail.com', '2003-07-29 00:00:00', 1),
(0, 'Mustafagfbgfgg', 'Toprak', '3131', '05331327841', 'musttoprakk@gmail.com', '2003-07-29 00:00:00', 1),
(0, 'Mustafagfbgfgg', 'Toprak', '3232', '05331327841', 'musttoprakk@gmail.com', '2003-07-29 00:00:00', 1);

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `otel`
--

CREATE TABLE `otel` (
  `idOtel` int(11) NOT NULL,
  `adres` varchar(45) NOT NULL,
  `HizmetBilgisi_idHizmetBilgisi` int(11) NOT NULL,
  `puan` double NOT NULL,
  `tema` varchar(45) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `otel`
--

INSERT INTO `otel` (`idOtel`, `adres`, `HizmetBilgisi_idHizmetBilgisi`, `puan`, `tema`) VALUES
(1, 'Torba, Bodrum, Muğla', 21, 7.5, 'Balayı Otel'),
(2, 'Çamyuva, Kemer, Antalya', 22, 8.6, 'Termal Otel'),
(3, 'Ürgüp, Kapadokya, Muğla', 23, 9.2, 'Butik Otel'),
(4, 'Bafra, Samsun', 24, 7.2, 'Balayı Otel'),
(5, 'Selimiye, Marmaris, Muğla', 25, 7.9, 'Termal Otel'),
(6, 'Gayrettepe, İstanbul', 26, 8.5, 'Şehir Otel'),
(7, 'Abant, Bolu', 27, 9.7, 'Tatil Köyü'),
(8, 'Osmangazi, Bursa', 28, 8.7, 'Tatil Köyü'),
(9, 'Bornava, İzmir', 29, 8.2, 'Şehir Otel'),
(10, 'Sapanca, Sakarya', 30, 6.5, 'Termal Otel');

-- --------------------------------------------------------

--
-- Görünüm yapısı durumu `otelview`
-- (Asıl görünüm için aşağıya bakın)
--
CREATE TABLE `otelview` (
`idOtel` int(11)
,`adres` varchar(45)
,`puan` double
,`tema` varchar(45)
,`adi` varchar(100)
,`fiyat` int(11)
,`resimUrl` varchar(300)
);

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `rezervasyon`
--

CREATE TABLE `rezervasyon` (
  `idRezervasyon` int(11) NOT NULL,
  `tarihi` datetime NOT NULL,
  `yetiskinSayisi` int(11) NOT NULL,
  `cocukSayisi` int(11) NOT NULL,
  `Musteri_idMusteri` int(11) NOT NULL,
  `Hizmet_idHizmet` int(11) NOT NULL,
  `girisTarihi` datetime DEFAULT NULL,
  `cikisTarihi` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `rezervasyon`
--

INSERT INTO `rezervasyon` (`idRezervasyon`, `tarihi`, `yetiskinSayisi`, `cocukSayisi`, `Musteri_idMusteri`, `Hizmet_idHizmet`, `girisTarihi`, `cikisTarihi`) VALUES
(2, '2023-05-14 19:27:37', 16, 9, 1, 22, '2023-05-14 00:00:00', '2023-05-15 00:00:00');

-- --------------------------------------------------------

--
-- Görünüm yapısı durumu `rezervasyonview`
-- (Asıl görünüm için aşağıya bakın)
--
CREATE TABLE `rezervasyonview` (
`idRezervasyon` int(11)
,`tarihi` datetime
,`yetiskinSayisi` int(11)
,`cocukSayisi` int(11)
,`girisTarihi` datetime
,`cikisTarihi` datetime
,`idMusteri` int(11)
,`adi` varchar(45)
,`soyadi` varchar(45)
,`telefonNumarasi` varchar(45)
,`epostaAdresi` varchar(45)
,`hizmetTabloAdi` varchar(45)
,`hizmettabloId` int(11)
);

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `teknetur`
--

CREATE TABLE `teknetur` (
  `idTekneTur` int(11) NOT NULL,
  `TurProgrami_idTurProgrami` varchar(20) NOT NULL,
  `HizmetBilgisi_idHizmetBilgisi` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `teknetur`
--

INSERT INTO `teknetur` (`idTekneTur`, `TurProgrami_idTurProgrami`, `HizmetBilgisi_idHizmetBilgisi`) VALUES
(1, 'ttistalmanya', 11),
(2, 'ttistsirbistan', 12),
(3, 'ttizmirhollanda', 13),
(4, 'ttizmirpanama', 14),
(5, 'ttistbatiabd', 15),
(6, 'ttcanakkaleyunan', 16),
(7, 'ttkusadasiege', 17),
(8, 'ttistbaltikbas', 18),
(9, 'ttizmirkarayip', 19),
(10, 'ttistmacaristan', 20);

-- --------------------------------------------------------

--
-- Görünüm yapısı durumu `tekneturview`
-- (Asıl görünüm için aşağıya bakın)
--
CREATE TABLE `tekneturview` (
`idTekneTur` int(11)
,`adi` varchar(100)
,`fiyat` int(11)
,`resimUrl` varchar(300)
,`baslangicTarihi` datetime
,`baslangicKonumu` varchar(45)
,`guzergah` varchar(150)
,`vizeDurumu` varchar(10)
,`gunBir` varchar(200)
,`gunIki` varchar(200)
,`gunUc` varchar(200)
,`gunDort` varchar(200)
,`gunBes` varchar(200)
);

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `turprogrami`
--

CREATE TABLE `turprogrami` (
  `idTurProgrami` varchar(20) NOT NULL,
  `baslangicTarihi` datetime NOT NULL,
  `baslangicKonumu` varchar(45) NOT NULL,
  `guzergah` varchar(150) NOT NULL,
  `vizeDurumu` varchar(10) NOT NULL,
  `gunBir` varchar(200) NOT NULL,
  `gunIki` varchar(200) NOT NULL,
  `gunUc` varchar(200) NOT NULL,
  `gunDort` varchar(200) NOT NULL,
  `gunBes` varchar(200) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `turprogrami`
--

INSERT INTO `turprogrami` (`idTurProgrami`, `baslangicTarihi`, `baslangicKonumu`, `guzergah`, `vizeDurumu`, `gunBir`, `gunIki`, `gunUc`, `gunDort`, `gunBes`) VALUES
('ttcanakkaleyunan', '2023-08-10 09:00:00', 'Çanakkale', 'Santorini Adası, Mykonos Adası, Rodos Adası, Selanik', 'Evet', '(1.Gün Yunanistan / 10 Ağustos) Atina\'da buluşma ve tekne turuna başlama. Sabah erken saatlerde, Ege Denizi\'nin kalbinde yer alan Santorini Adası\'na doğru yola çıkacağız. Burası, kendine özgü beyaz ev', '(2.Gün Yunanistan / 11 Ağustos) Mykonos Adası\'na doğru yola çıkacağız. Adanın kumlu plajları, turistik mağazaları, restoranları ve gece hayatı ile ünlüdür. Burada, plajda güneşlenebilir, yüzme molası ', '(3.Gün Yunanistan / 12 Ağustos) Rodos Adası\'na doğru yola çıkacağız. Burası, Antik Yunan döneminden kalma tarihi kalıntıları, muhteşem manzaraları ve doğal güzellikleri ile ünlüdür. Adada, tarihi kalı', '(4.Gün Yunanistan / 13 Ağustos) Selanik\'e doğru yola çıkacağız. Burası, Yunanistan\'ın ikinci büyük şehridir ve tarihi yapıları, müzeleri, alışveriş merkezleri ve restoranları ile ünlüdür. Şehirde serb', '(5.Gün Yunanistan / 14 Ağustos) Tekne turumuzun son gününe başlayacağız ve Atina\'ya geri döneceğiz. Yolda, Ege Denizi\'nin güzel manzaralarının keyfini çıkarabilirsiniz. Tur sonunda, Atina\'ya döneceğiz'),
('ttistalmanya', '2023-08-20 10:00:00', 'İstanbul', 'Münih, Regensburg, Nürnberg, Bamberg', 'Evet', '(1.Gün Almanya / 20 Ağustos) Turumuz kişiye özel aracın sizi adresinizden alması ile başlıyor. İstanbul Yeni Havalimanı, Dış Hatlar Terminali Türk Havayolları kontuarı önünde belirlenen saatte bulu', '(2.Gün Almanya / 21 Ağustos) Gemimiz Regensburg limanına saat 09:00’da yanaşacaktır. . Arzu eden misafirlerimiz Weltenburg manastırı & Kelheım yürüyüş turu & Regensburg yürüyüş turuna katılabilirler. ', '(3.Gün Almanya / 22 Ağustos) Gemimiz Nuremberg limanına saat 14:00’da yanaşacaktır. . Arzu eden misafirlerimiz Nuremberg şehir ve yürüyüş turuna katılabilirler. Buradan 19:00’da Bamberg limanına harek', '(4.Gün Almanya / 23 Ağustos) Gemimiz Bamberg limanına sabah saat 08:00’da yanaşacaktır. Arzu eden misafirlerimiz Bamberg şehir ve yürüyüş turuna katılabilirler. Buradan 11:00’da hareket edecektir. Gec', '(5.Gün Almanya / 24 Ağustos) Sabah erken saatlerde Köln limanına varış. Kahvaltı sonrası gemiden çıkış işlemlerinin ardından havalimanına transfer. Check-in ve Pasaport kontrolü sonrası Türk Havayolla'),
('ttistbaltikbas', '2023-08-01 09:00:00', 'İstanbul', 'Helsinki, St. Petersburg, Tallinn, Riga, Stockholm', 'Evet', '(1.Gün Baltık Başkentleri / 1 Ağustos) Tekne turumuza Stockholm\'den başlayacağız. Sabah saatlerinde tekneye binip, Baltık Denizi\'ne açılacağız. İlk durağımız, Finlandiya\'nın başkenti Helsinki olacak. ', '(2. Gün  Baltık Başkentleri / 2 Ağustos) Rusya\'nın güzel şehri St. Petersburg\'a doğru yola çıkacağız. St. Petersburg, tarihi sarayları, müzeleri ve kanallarıyla ünlüdür. Burada, Hermitage Müzesi\'ni zi', '(3. Gün  Baltık Başkentleri / 3 Ağustos) Estonya\'nın başkenti Tallinn\'e doğru yola çıkacağız. Tallinn, Orta Çağ\'dan kalma tarihi şehir merkezi ve modern alışveriş merkezleriyle ünlüdür. Burada, tarihi', '(4. Gün  Baltık Başkentleri / 4 Ağustos) Letonya\'nın başkenti Riga\'ya doğru yola çıkacağız. Riga, tarihi yapıları, sanat galerileri ve müzeleriyle ünlüdür. Burada, tarihi şehir merkezini ziyaret edebi', '(5. Gün  Baltık Başkentleri / 5 Ağustos) Daha sonra, Stockholm\'e geri dönüş yapacağız ve tekne turumuzu tamamlayacağız.'),
('ttistbatiabd', '2023-07-01 09:00:00', 'İstanbul', 'Los Angeles, Grand Canyon, Las Vegas, San Francisco', 'Hayır', '(1.Gün Batı Amerika / 1 Temmuz) Los Angeles\'dan başlayan turumuzda, Hollywood, Beverly Hills ve Santa Monica gibi turistik yerleri ziyaret edeceğiz. Daha sonra Grand Canyon\'a doğru yola çıkacağız ve m', '(2. Gün Batı Amerika / 2 Temmuz) Grand Canyon\'dan ayrılarak Las Vegas\'a doğru yola çıkacağız. Burada bir gece konaklayacağız ve şehrin ışıl ışıl gece hayatını deneyimleyeceğiz.', '(3. Gün Batı Amerika / 3 Temmuz) Las Vegas\'tan ayrılarak San Francisco\'ya doğru yola çıkacağız. Yolda, Death Valley ve Yosemite Milli Parkı gibi yerleri ziyaret edeceğiz. Yosemite, ABD\'nin en popüler ', '(4. Gün Batı Amerika / 4 Temmuz) San Francisco\'da bir tur yapacağız ve Golden Gate Köprüsü, Alcatraz Adası ve Chinatown gibi turistik yerleri ziyaret edeceğiz.', '(5. Gün Batı Amerika / 5 Temmuz) Turumuzun son gününde, serbest zamanınız olacak ve San Francisco\'nun turistik yerlerini keşfedebilirsiniz. Daha sonra, Los Angeles\'a dönüş yapacağız ve turumuzu tamaml'),
('ttistmacaristan', '2023-08-01 09:00:00', 'İstanbul', 'Budapeşte, Visegrád, Esztergom, Komárom', 'Hayır', '(1.Gün Macaristan / 1 Ağustos) Tuna Nehri\'nde tekne turumuza Budapeşte\'den başlayacağız. Tekne turumuzda Budapeşte\'nin ünlü Parlamento Binası, Buda Kalesi ve Fisherman\'s Bastion gibi önemli turistik y', '(2. Gün Macaristan / 2 Ağustos) Sabahleyin, Visegrád\'a doğru yola çıkacağız. Bu tarihi kasaba, 14. yüzyılda Macaristan Krallığı\'nın başkenti olarak hizmet vermiştir. Burada, Visegrád Kalesi\'ni ziyaret', '(3. Gün Macaristan / 3 Ağustos) Esztergom\'a doğru yola çıkacağız. Esztergom, Macaristan\'ın en eski ve en önemli şehirlerinden biridir ve ülkenin en büyük katedraline ev sahipliği yapar. Burada, katedr', '(4. Gün Macaristan / 4 Ağustos) Tekne turumuzda Komárom\'a doğru yola çıkacağız. Komárom, Macaristan\'ın kuzeybatısındaki Tuna Nehri\'nin kıyısında yer alan bir kasabadır. Burada, tarihi Komárom Kalesi\'n', '(5. Gün Macaristan / 5 Ağustos) Daha sonra, Budapeşte\'ye geri dönüş yapacağız ve tekne turumuzu tamamlayacağız. Budapeşte\'de serbest zamanınız olacak ve dilediğiniz gibi şehri keşfedebileceksiniz.'),
('ttistsirbistan', '2023-07-15 11:20:00', 'İstanbul', 'Sava Nehri, Đerdap Milli Parkı, Golubac Kalesi, Smederevo Kalesi, Ada Ciganlija', 'Hayır', '(1.Gün Sırbistan / 15 Temmuz) Belgrad\'da buluşma ve tekne turuna başlama. Sava Nehri boyunca ilerleyerek, tarihi Golubac Kalesi\'ne doğru yola çıkacağız. Kale, Tuna Nehri\'nin kanyon bölgesinde yer alma', '(2. Gün Sırbistan / 16 Temmuz) Đerdap Milli Parkı\'na doğru yola çıkacağız. Tuna Nehri\'nin en dar geçidi olan bu bölgede, yüksek kayalıklar arasında ilerleyeceğiz. Milli park, doğal güzelliği, flora ve', '(3. Gün Sırbistan / 17 Temmuz) Smederevo Kalesi\'ne doğru yola çıkacağız. Bu kale, Ortaçağ\'da inşa edilmiştir ve bugün hala ayakta olan en büyük Sırp kalesidir. Burada, tarihi bir tur yapabilir, Smeder', '(4. Gün Sırbistan / 18 Temmuz) Tekne turumuzun son gününe başlayacağız. Sabah kahvaltısı sonrası, Sava Nehri üzerinde bir tur yapacağız. Bu sırada, Belgrad\'ın muhteşem manzaralarını, tarihi yapılarını', '(5. Gün Sırbistan / 19 Temmuz) Belgrad\'da serbest zaman. Kahvaltı sonrası gemiden çıkış işlemlerinin ardından havalimanına transfer. Check-in ve Pasaport kontrolü sonrası Türk Havayolları’nın tarifeli'),
('ttizmirhollanda', '2023-08-10 09:00:00', 'İzmir', 'Rotterdam Kanalları, Kinderdijk Rüzgar Değirmenleri, Amsterdam Kanalları, Zaanse Schans, Volendam', 'Hayır', '(1.Gün Hollanda / 10 Ağustos) Rotterdam\'da buluşma ve tekne turuna başlama. Rotterdam Kanalları boyunca ilerleyerek, Kinderdijk Rüzgar Değirmenleri\'ne doğru yola çıkacağız. Burası, UNESCO Dünya Mirası', '(2. Gün  Hollanda / 11 Ağustos) Amsterdam Kanalları\'nda gezinti yapacağız. Bu kanallar, Amsterdam\'ın simgesi haline gelmiştir ve şehrin tarihi merkezinde yer almaktadır. Tur sırasında, şehrin ünlü yap', '(3. Gün  Hollanda / 12 Ağustos) Zaanse Schans\'a doğru yola çıkacağız. Burası, Hollanda\'nın ünlü peynirleri, ahşap ayakkabıları ve diğer geleneksel ürünleri ile ünlü bir açık hava müzesidir. Burada, Ho', '(4. Gün  Hollanda / 13 Ağustos) Volendam\'a doğru yola çıkacağız. Burası, Hollanda\'nın ünlü balıkçı köylerinden biridir ve geleneksel evleri, restoranları ve diğer turistik yerleri ile ünlüdür. Tur boy', '(5. Gün  Hollanda / 14 Ağustos) Tekne turumuzun son gününe başlayacağız. Sabah kahvaltısı sonrası, Rotterdam Kanalları üzerinde bir tur yapacağız. Bu sırada, Rotterdam\'ın muhteşem manzaralarını, tarih'),
('ttizmirkarayip', '2023-11-01 10:00:00', 'İzmir', 'Bahamalar, Jamaika, Kaiman Adaları, Meksika', 'Hayır', '(1.Gün Bahamalar / 1 Kasım) Tekne turumuz Miami\'den başlayacak. Bahamalar\'a doğru yola çıkacağız. Bahamalar, turkuaz suları, beyaz kumlu plajları ve doğal güzellikleriyle ünlüdür. Burada serbest zaman', '(2. Gün  Bahamalar / 2 Kasım) Jamaika\'ya doğru yola çıkacağız. Jamaika, Bob Marley ve reggae müziğiyle tanınır. Burada, ünlü müzisyenin evini ve stüdyosunu ziyaret edebilir ve yerel kültürü keşfedebil', '(3. Gün  Bahamalar / 3 Kasım) Kaiman Adaları\'na doğru yola çıkacağız. Kaiman Adaları, berrak suları ve mercan resifleriyle ünlüdür. Burada, şnorkelle dalış yapabilir ve deniz yaşamını keşfedebilirsini', '(4. Gün  Bahamalar / 4 Kasım) Son olarak, Meksika\'ya doğru yola çıkacağız. Meksika, tarihi yapıları, doğal güzellikleri ve lezzetli yemekleriyle ünlüdür. Burada, yerel pazarları ziyaret edebilir ve Me', '(5. Gün  Bahamalar / 5 Kasım) Tekne turumuzun son günü ve Meksika\'dan Miami\'ye geri dönüş yapacağız.'),
('ttizmirpanama', '2023-07-10 09:00:00', 'İzmir', 'Panama Kanalı, Casco Viejo, San Blas Adaları, Bocas del Toro', 'Evet', '(1.Gün Panama / 10 Temmuz) Turumuz kişiye özel aracın sizi adresinizden alması ile başlıyor. Check-in ve pasaport işlemleri sonrası Panama City\'de buluşma ve turumuza başlama. İlk durağımız, dünyanın ', '(2. Gün Panama / 11 Temmuz) San Blas Adaları\'na doğru yola çıkacağız. Bu adalar, kristal berraklığındaki sularda yüzmeniz, güneşlenmeniz ve rahatlamanız için mükemmel bir yerdir. Burada, yerel Kuna Ye', '(3. Gün Panama / 12 Temmuz) Bocas del Toro\'ya doğru yola çıkacağız. Bu bölge, zengin doğal yaşamı, renkli karayipler kültürü ve sıcak atmosferi ile ünlüdür. Burada, tekne turları, yüzme, sörf, dalış v', '(4. Gün Panama / 13 Temmuz) Sabah kahvaltısı sonrası, serbest zaman. Daha sonra, Panama City\'ye doğru yola çıkacağız. Şehir turu yaparken, modern ve tarihi yapıları, müzeleri, parkları ve diğer turist', '(5. Gün Panama / 14 Temmuz) Sabah erken saatlerde, havalimanına transfer için hazırlanacağız. Sonrasında, Panama\'dan ayrılacak ve turumuzu tamamlayacağız.'),
('ttkusadasiege', '2023-07-10 09:00:00', 'Kuşadası', 'Samos, Patmos, Lipsi, Leros', 'Hayır', '(1.Gün Ege / 10 Temmuz) Tekne turumuza Kuşadası\'nda başlayacağız. Sabah saatlerinde tekneye binip, Ege Denizi\'ne açılacağız. İlk durağımız, tarihi Samos adası olacak. Samos, antik dönemde filozof Pyth', '(2. Gün Ege / 11 Temmuz) Patmos adasına doğru yola çıkacağız. Patmos, Aziz Yuhanna\'nın Hristiyanlıkla ilgili vizyonlarını aldığı yer olarak bilinir ve bugün bu nedenle bir Hristiyan hac yeri olarak ka', '(3. Gün Ege / 12 Temmuz) Lipsi adasına doğru yola çıkacağız. Lipsi, sakin plajları ve doğal güzellikleriyle ünlüdür. Burada, güneşin tadını çıkarmak ve kumsallarda yüzmenin keyfini çıkarmak için serbe', '(4. Gün Ege / 13 Temmuz) Leros adasına doğru yola çıkacağız. Leros, tarihi kaleleri ve doğal limanlarıyla ünlüdür. Burada, tarihi yerleri ziyaret edebilir ve ada turu yapabilirsiniz.', '(5. Gün Ege / 14 Temmuz) Daha sonra, Kuşadası\'na geri dönüş yapacağız ve tekne turumuzu tamamlayacağız.'),
('ytankarnavutluk', '2023-08-15 09:00:00', 'Ankara', 'Tiran, Berat, Saranda, Gjirokastra', 'Hayır', '(1.Gün Arnavutluk / 15 Ağustos) Sabah saatlerinde Tiran\'a varış yapabilirsiniz. Tiran\'ın merkezinde bulunan Ethem Bey Camii\'ni ziyaret edebilirsiniz. 18. yüzyılda inşa edilmiş olan bu camii, Arnavutlu', '(2. Gün Arnavutluk / 16 Ağustos) Berat, \"bin pencereli şehir\" olarak bilinir. Burada Orta Çağ\'dan kalma bir kale ve geleneksel Osmanlı evleri bulunur. Sabah saatlerinde Tiran\'dan Berat\'a doğru yola çı', '(3. Gün Arnavutluk / 17 Ağustos) Saranda, Arnavutluk\'un güney kıyısındaki bir tatil beldesidir. Sabah saatlerinde Berat\'tan Saranda\'ya doğru yola çıkabilirsiniz. Saranda\'da plaj keyfi yapabilir ve Akd', '(4. Gün Arnavutluk / 18 Ağustos) Gjirokastra, Arnavutluk\'un güneyindeki bir şehirdir. UNESCO Dünya Mirası Listesi\'nde yer alan Gjirokastra Kalesi ve Osmanlı döneminden kalma evleriyle ünlüdür. Sabah s', '(5. Gün Arnavutluk / 19 Ağustos) Son gün serbest zaman. Saranda\'da denize girip güneşlenebilir veya Ksamil Plajı\'na gitmek için bir tekne turu yapabilirsiniz. Akşam saatlerinde İstanbul\'a dönüş.'),
('ytankdubai', '2023-06-15 08:30:00', 'Ankara', 'Abu Dhabi, Sharjah, Fujairah', 'Evet', '(1.Gün Dubai / 15 Haziran) Dubai\'ye varış ve otelinize transfer. Öğleden sonra Dubai şehir turuna başlayın. Burj Khalifa, Dubai Fountain, Dubai Mall ve Dubai Museum\'u ziyaret edebilirsiniz.Akşam yemeğ', '(2. Gün  Dubai / 16 Haziran) Sabah kahvaltısından sonra, çöl safari turu için hazırlanın.Safari turu sırasında, kum tepeleri üzerinde araba sürmek, deve gezintisi yapmak, kum kaydırağına binmek ve Bed', '(3. Gün  Dubai / 17 Haziran) Sabah Aquaventure Su Parkı\'na gidin. Burada, heyecan verici kaydıraklar, dalga havuzları ve hayvanlarla dolu bir akvaryum bulunmaktadır.Öğleden sonra, Atlantis The Palm\'de', '(4. Gün  Dubai / 18 Haziran) Sabah kahvaltısından sonra Dubai Miracle Garden\'ı ziyaret edin. Burada, dünyanın en büyük çiçek bahçelerinden birinde renkli çiçeklerin ve heykellerin keyfini çıkarabilirs', '(5. Gün  Dubai / 19 Haziran) Dubai\'de serbest zaman. Burada Dubai Mall, Burj Khalifa ve Dubai Fountain gibi popüler yerleri ziyaret edebilirsiniz.'),
('ytankitalya', '2023-06-07 09:45:00', 'Ankara', 'Venedik,Florence,Roma,Napoli', 'Hayır', '(1.Gün İtalya / 7 Haziran) Sabah erken saatlerde İstanbul\'dan Venedik\'e uçuş. Şehirde kanallar üzerindeki gezintileri ile ünlü San Marco Meydanı ve Kanal ile birbirine bağlanan birçok küçük köprüsü il', '(2.Gün  İtalya / 8 Haziran) Sabah erkenden Floransa\'ya gitmek için trenle hareket edin. Floransa\'nın en ünlü turistik yerleri arasında Galleria dell\'Accademia\'da Michelangelo\'nun Davut heykeli ve Uffi', '(3.Gün  İtalya / 9 Haziran) Sabah erkenden Roma\'ya gitmek için trenle hareket edin. Roma, tarihi ve mimari açıdan zengin bir şehir olduğu için Colosseum, Pantheon, Vatikan Müzeleri ve Roma Forumu gibi', '(4.Gün  İtalya / 10 Haziran) Sabah erkenden Napoli\'ye gitmek için trenle hareket edin. Napoli, tarihi ve kültürel açıdan önemli bir yer olduğu gibi, ünlü Napoli pizzası da burada doğmuştur. Şehirdeki ', '(5.Gün  İtalya / 11 Haziran) Gezinin son günü Napoli\'den İstanbul\'a uçuş. Otelde kahvaltı sonrası serbest zaman.'),
('ytistbulgaria', '2023-06-07 09:45:00', 'İstanbul', 'Plovdiv,Varna,Nessebar,Sofya', 'Evet', '(1.Gün Bulgaristan / 7 Haziran) Sabah erken saatlerde İstanbul\'dan otobüsle Plovdiv\'e hareket edin. Plovdiv, antik Roma kalıntıları, Osmanlı mimarisi ve modern sanat sahnesi ile ünlüdür. Güzel Evler v', '(2.Gün Bulgaristan / 8 Haziran) Sabah erkenden otobüsle Varna\'ya gitmek için hareket edin. Varna, Karadeniz kıyısında yer alan bir sahil şehridir. Burada, Varna Arkeoloji Müzesi ve Aziz Dimitar Katedr', '(3.Gün Bulgaristan / 9 Haziran) Sabah erkenden Nessebar\'a gitmek için otobüsle hareket edin. Nessebar, Karadeniz kıyısında yer alan küçük bir tarihi kasabadır ve UNESCO Dünya Mirası listesinde yer alm', '(4.Gün Bulgaristan / 10 Haziran) Sabah erkenden Plovdiv\'e geri dönün ve Plovdiv\'deki diğer tarihi ve kültürel yerleri ziyaret edin. Eski Plovdiv bölgesi, Plovdiv Roman Stadyumu ve Saat Kulesi gibi yer', '(5.Gün Bulgaristan / 11 Haziran) Gezinin son günü, Varna\'daki plajları ve sahil şeridini keşfedebilir veya Varna\'da alışveriş yapabilirsiniz. Dönüş yolculuğu için öğleden sonra İstanbul\'a geri dönün.'),
('ytistiran', '2023-05-06 09:45:00', 'İstanbul', 'Tebriz,Tahran,İsfahan,Şiraz', 'Evet', '(1.Gün İran / 6 Mayıs) Sabah erken saatlerde Tahran\'a varış.İlk önce Golestan Sarayı gibi kültürel mirasları ziyaret edin.Ardından, İran Ulusal Müzesi\'ne gidin ve İran\'ın tarihi hakkında daha fazla bi', '(2.Gün İran / 7 Mayıs) Sabah erkenden otobüsle İsfahan\'a gitmek için hareket edin.İsfahan\'ın tarihi merkezi Meydan-e Imam\'ı (İmam Meydanı) ziyaret edin ve Ali Kapısı ve İmam Camii gibi mimari harikala', '(3.Gün İran / 8 Mayıs) Sabah erkenden otobüsle Şiraz\'a gitmek için hareket edin. Şiraz\'daki ilk duraklarınız arasında Pers İmparatorluğu\'nun kalıntılarından oluşan Persepolis ve Naqsh-e Rustam kaya ka', '(4.Gün İran / 9 Mayıs) Sabah erkenden otobüsle Tebriz\'e gitmek için hareket edin. azd\'ın tarihi merkezi, UNESCO Dünya Mirası listesine dahil edilmiştir. Burada, Meydan-e Amir Chakhmaq, Jameh Camii ve ', '(5.Gün İran / 10 Mayıs) Gezinin son günü otelde alacağımız kahvaltı sonrası öğlen saatlerine kadar serbest zaman'),
('ytistispanya', '2023-07-15 10:00:00', 'İstanbul', 'Barselona,Valensiya,Madrid,Toledo', 'Evet', '(1.Gün İspanya / 15 Temmuz) Barselona\'ya varış ve turistik alanlara transfer. Casa Batlló, La Pedrera ve Park Güell gibi mimari harikaları görebilirsiniz.', '(2.Gün İspanya / 16 Temmuz) Şehrin tadını çıkarın ve tarihi La Rambla caddesi ve Boqueria pazarını ziyaret edin. Daha sonra Sagrada Familia\'yı ziyaret edin.', '(3.Gün İspanya / 17 Temmuz) Sabah erken kalkın ve Valensiya\'ya gitmek için hareket edin. City of Arts and Sciences\'i, özellikle de Oceanografik akvaryumunu ziyaret edin. Ayrıca Mercado Central\'da lezz', '(4.Gün İspanya / 18 Temmuz) Sabah Madrid\'e gitmek için hareket edin ve Prado Müzesi\'ni ziyaret edin. Daha sonra Plaza Mayor ve Retiro Parkı gibi diğer turistik yerleri ziyaret edin.', '(5.Gün İspanya / 19 Temmuz) Sabah Toledo\'ya gitmek için hareket edin ve Toledo Katedrali\'ni, Alcazar\'ı ve Toledo\'da dar sokakları keşfedin. Daha sonra İstanbul\'a dönüş için Madrid\'e geri dönün.'),
('ytistsrbstn', '2023-07-01 09:00:00', 'İstanbul', 'Belgrad, Novi Sad, Niş, Subotica', 'Evet', '(1.Gün Sırbistan / 1 Temmuz) Sabah saatlerinde İstanbul Havalimanı\'ndan Belgrad\'a hareket ediyoruz. Varışımızın ardından şehir turu yapıyoruz ve Kalemegdan Kalesi, Knez Mihailova Caddesi ve Ulusal Müz', '(2. Gün Sırbistan / 2 Temmuz) Sabah kahvaltısı sonrası Novi Sad\'a doğru yola çıkıyoruz. Varışımızın ardından Petrovaradin Kalesi ve Sava Nehri kıyısındaki yürüyüş yollarını keşfediyoruz. Daha sonra Sr', '(3. Gün Sırbistan / 3 Temmuz) Sabah erken kahvaltı sonrası Niş şehrine doğru yola çıkıyoruz. Varışımızın ardından Niş Kalesi, Mediana Arkeoloji Parkı ve Çele Kula Kalesi gibi yerleri ziyaret ediyoruz.', '(4. Gün Sırbistan / 4 Temmuz) Sabah kahvaltısının ardından Subotica şehrine doğru yola çıkıyoruz. Varışımızın ardından Subotica Sinagogu, Palić Gölü ve Raichle Sarayı gibi turistik yerleri ziyaret edi', '(5. Gün Sırbistan / 5 Temmuz) Kahvaltı sonrası Belgrad\'a geri dönüyoruz ve serbest zamanınızı geçirmek için öneriler sunuyoruz. Akşam saatlerinde İstanbul\'a geri dönüyoruz.'),
('ytistyunan', '2023-06-20 10:00:00', 'İstanbul', 'Selanik, Atina, Mykonos, Santorini', 'Evet', '(1.Gün Yunanistan / 20 Haziran) Selanik\'e varış ve otelde konaklama. Selanik\'te Beyaz Kule, Osmanlı Hamamı ve Aristoteles Meydanı gibi tarihi yerleri ziyaret edin.', '(2.Gün Yunanistan / 21 Haziran) Sabah erken saatlerde Atina\'ya gitmek için hareket edin. Atina\'da Olimpiyat Stadyumu, Akropolis ve Parthenon Tapınağı gibi tarihi yapıları görün. Ayrıca Plaka bölgesind', '(3.Gün Yunanistan / 22 Haziran) Sabah Mykonos\'a uçakla gitmek için hareket edin. Burada turkuaz renkli denizinde yüzme ve Platis Gialos plajında güneşlenme fırsatı yakalayın. Gece hayatı ile ünlü Litt', '(4.Gün Yunanistan / 23 Haziran) Sabah Santorini\'ye feribotla gitmek için hareket edin. Santorini\'de Kızıl Plaj ve Perissa Plajı gibi güzel plajları keşfedin. Eski Thira ve Fira\'daki tarihi kalıntıları', '(5.Gün Yunanistan / 24 Haziran) Sabah otelde alacağınız kahvaltının ardından Atina\'ya geri dönün ve Türkiye\'ye uçmak için havalimanına gitmek için hareket edin.'),
('ytizmirmaldivler', '2023-08-10 10:00:00', 'İzmir', 'Male, Kuzey Ari Atoll, Rasdhoo Atoll', 'Hayır', '(1.Gün Maldivler / 10 Ağustos) Male Havaalanı\'na varış ve otele transfer. Akşam yemeği ve serbest zaman.', '(2.Gün  Maldivler / 11 Ağustos) Sabah kahvaltısından sonra Kuzey Ari Atoll\'daki mavi sulara açılmak için teknede bir gün geçirin. Şnorkelle dalın ve renkli mercan resiflerinde yüzün.', '(3.Gün  Maldivler / 12 Ağustos) Sabah kahvaltısından sonra Rasdhoo Atoll\'una hareket edin ve günün geri kalanında rahatlayın veya adayı keşfetmek için serbest zaman geçirin.', '(4.Gün  Maldivler / 13 Ağustos) Sabah kahvaltısından sonra, Maldivler\'de ünlü bir plaj olan Bikini Beach\'e gitmek için tekneye binin. Akşam yemeği ve serbest zaman.', '(5.Gün  Maldivler / 14 Ağustos) Otelde alınacak kahvaltının ardından, Male Havaalanı\'na transfer ve İstanbul\'a uçuş'),
('ytizmirmisir', '2023-07-15 08:30:00', 'İzmir', 'Kahire, Giza Piramitleri', 'Hayır', '(1.Gün Mısır / 15 Temmuz) Sabah saatlerinde Kahire\'ye varış. Check-in işlemlerinin ardından ilk durağımız Mısır Müzesi olacak. Ardından Giza Piramitleri\'ni ve Sfenks\'i ziyaret edeceğiz. ', '(2. Gün Mısır / 16 Temmuz) Sabah erkenden kalkarak, Mısır\'ın en önemli turistik yerlerinden biri olan Luxor\'a gitmek için havalimanına transfer. Luxor\'da Karnak Tapınağı, Kral Vadisi ve Hatshepsut Tap', '(3. Gün Mısır / 17 Temmuz) Sabah Kahire\'deki otelimizde kahvaltı yaparak günümüze başlayacağız. Daha sonra Kahire\'nin en eski bölgesi olan İslam Mahallesi\'ni keşfedeceğiz ve El Muizz Caddesi\'nde yürüy', '(4. Gün Mısır / 18 Temmuz) Sabah kahvaltısının ardından Mısır\'ın en büyük antik kentlerinden biri olan Şarm El-Şeyh\'e gitmek için havalimanına transfer yapacağız. Şarm El-Şeyh\'de serbest zaman geçireb', '(5. Gün Mısır / 19 Temmuz) Gezinin son günü, Kahire\'deki otelimizde kahvaltı yaptıktan sonra alışveriş yapmak için El Moez Caddesi\'ne gidebilirsiniz. Sonrasında havalimanına transfer olacak ve İstanbu');

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `yurtdisitur`
--

CREATE TABLE `yurtdisitur` (
  `idYurtdisiTur` int(11) NOT NULL,
  `TurProgrami_idTurProgrami` varchar(20) NOT NULL,
  `HizmetBilgisi_idHizmetBilgisi` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Tablo döküm verisi `yurtdisitur`
--

INSERT INTO `yurtdisitur` (`idYurtdisiTur`, `TurProgrami_idTurProgrami`, `HizmetBilgisi_idHizmetBilgisi`) VALUES
(1, 'ytankarnavutluk', 1),
(2, 'ytankdubai', 2),
(3, 'ytankitalya', 3),
(4, 'ytistbulgaria', 4),
(5, 'ytistiran', 5),
(6, 'ytistispanya', 6),
(7, 'ytistsrbstn', 7),
(8, 'ytistyunan', 8),
(9, 'ytizmirmaldivler', 9),
(10, 'ytizmirmisir', 10);

-- --------------------------------------------------------

--
-- Görünüm yapısı durumu `yurtdisiturview`
-- (Asıl görünüm için aşağıya bakın)
--
CREATE TABLE `yurtdisiturview` (
`idYurtdisiTur` int(11)
,`adi` varchar(100)
,`fiyat` int(11)
,`resimUrl` varchar(300)
,`baslangicTarihi` datetime
,`baslangicKonumu` varchar(45)
,`guzergah` varchar(150)
,`vizeDurumu` varchar(10)
,`gunBir` varchar(200)
,`gunIki` varchar(200)
,`gunUc` varchar(200)
,`gunDort` varchar(200)
,`gunBes` varchar(200)
);

-- --------------------------------------------------------

--
-- Tablo için tablo yapısı `__efmigrationshistory`
--

CREATE TABLE `__efmigrationshistory` (
  `MigrationId` varchar(150) NOT NULL,
  `ProductVersion` varchar(32) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Görünüm yapısı `otelview`
--
DROP TABLE IF EXISTS `otelview`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `otelview`  AS SELECT `otel`.`idOtel` AS `idOtel`, `otel`.`adres` AS `adres`, `otel`.`puan` AS `puan`, `otel`.`tema` AS `tema`, `hizmetbilgisi`.`adi` AS `adi`, `hizmetbilgisi`.`fiyat` AS `fiyat`, `hizmetbilgisi`.`resimUrl` AS `resimUrl` FROM (`otel` join `hizmetbilgisi` on(`otel`.`HizmetBilgisi_idHizmetBilgisi` = `hizmetbilgisi`.`idHizmetBilgisi`)) ;

-- --------------------------------------------------------

--
-- Görünüm yapısı `rezervasyonview`
--
DROP TABLE IF EXISTS `rezervasyonview`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `rezervasyonview`  AS SELECT `rezervasyon`.`idRezervasyon` AS `idRezervasyon`, `rezervasyon`.`tarihi` AS `tarihi`, `rezervasyon`.`yetiskinSayisi` AS `yetiskinSayisi`, `rezervasyon`.`cocukSayisi` AS `cocukSayisi`, `rezervasyon`.`girisTarihi` AS `girisTarihi`, `rezervasyon`.`cikisTarihi` AS `cikisTarihi`, `musteri`.`idMusteri` AS `idMusteri`, `musteri`.`adi` AS `adi`, `musteri`.`soyadi` AS `soyadi`, `musteri`.`telefonNumarasi` AS `telefonNumarasi`, `musteri`.`epostaAdresi` AS `epostaAdresi`, `hizmet`.`hizmetTabloAdi` AS `hizmetTabloAdi`, `hizmet`.`hizmetTabloId` AS `hizmettabloId` FROM ((`rezervasyon` join `musteri` on(`rezervasyon`.`Musteri_idMusteri` = `musteri`.`idMusteri`)) join `hizmet` on(`rezervasyon`.`Hizmet_idHizmet` = `hizmet`.`idHizmet`)) ;

-- --------------------------------------------------------

--
-- Görünüm yapısı `tekneturview`
--
DROP TABLE IF EXISTS `tekneturview`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `tekneturview`  AS SELECT `teknetur`.`idTekneTur` AS `idTekneTur`, `hizmetbilgisi`.`adi` AS `adi`, `hizmetbilgisi`.`fiyat` AS `fiyat`, `hizmetbilgisi`.`resimUrl` AS `resimUrl`, `turprogrami`.`baslangicTarihi` AS `baslangicTarihi`, `turprogrami`.`baslangicKonumu` AS `baslangicKonumu`, `turprogrami`.`guzergah` AS `guzergah`, `turprogrami`.`vizeDurumu` AS `vizeDurumu`, `turprogrami`.`gunBir` AS `gunBir`, `turprogrami`.`gunIki` AS `gunIki`, `turprogrami`.`gunUc` AS `gunUc`, `turprogrami`.`gunDort` AS `gunDort`, `turprogrami`.`gunBes` AS `gunBes` FROM ((`teknetur` join `hizmetbilgisi` on(`teknetur`.`HizmetBilgisi_idHizmetBilgisi` = `hizmetbilgisi`.`idHizmetBilgisi`)) join `turprogrami` on(`teknetur`.`TurProgrami_idTurProgrami` = `turprogrami`.`idTurProgrami`)) ;

-- --------------------------------------------------------

--
-- Görünüm yapısı `yurtdisiturview`
--
DROP TABLE IF EXISTS `yurtdisiturview`;

CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `yurtdisiturview`  AS SELECT `yurtdisitur`.`idYurtdisiTur` AS `idYurtdisiTur`, `hizmetbilgisi`.`adi` AS `adi`, `hizmetbilgisi`.`fiyat` AS `fiyat`, `hizmetbilgisi`.`resimUrl` AS `resimUrl`, `turprogrami`.`baslangicTarihi` AS `baslangicTarihi`, `turprogrami`.`baslangicKonumu` AS `baslangicKonumu`, `turprogrami`.`guzergah` AS `guzergah`, `turprogrami`.`vizeDurumu` AS `vizeDurumu`, `turprogrami`.`gunBir` AS `gunBir`, `turprogrami`.`gunIki` AS `gunIki`, `turprogrami`.`gunUc` AS `gunUc`, `turprogrami`.`gunDort` AS `gunDort`, `turprogrami`.`gunBes` AS `gunBes` FROM ((`yurtdisitur` join `hizmetbilgisi` on(`yurtdisitur`.`HizmetBilgisi_idHizmetBilgisi` = `hizmetbilgisi`.`idHizmetBilgisi`)) join `turprogrami` on(`yurtdisitur`.`TurProgrami_idTurProgrami` = `turprogrami`.`idTurProgrami`)) ;

--
-- Dökümü yapılmış tablolar için indeksler
--

--
-- Tablo için indeksler `hizmet`
--
ALTER TABLE `hizmet`
  ADD PRIMARY KEY (`idHizmet`);

--
-- Tablo için indeksler `hizmetbilgisi`
--
ALTER TABLE `hizmetbilgisi`
  ADD PRIMARY KEY (`idHizmetBilgisi`);

--
-- Tablo için indeksler `musteri`
--
ALTER TABLE `musteri`
  ADD PRIMARY KEY (`idMusteri`),
  ADD KEY `idx_eposta` (`epostaAdresi`),
  ADD KEY `idx_sifre` (`sifre`);

--
-- Tablo için indeksler `newmusteri`
--
ALTER TABLE `newmusteri`
  ADD KEY `FK_musteri` (`idMusteri`);

--
-- Tablo için indeksler `otel`
--
ALTER TABLE `otel`
  ADD PRIMARY KEY (`idOtel`),
  ADD KEY `fk_Otel_HizmetBilgisi1_idx` (`HizmetBilgisi_idHizmetBilgisi`);

--
-- Tablo için indeksler `rezervasyon`
--
ALTER TABLE `rezervasyon`
  ADD PRIMARY KEY (`idRezervasyon`),
  ADD KEY `fk_Rezervasyon_Musteri1_idx` (`Musteri_idMusteri`),
  ADD KEY `fk_Rezervasyon_Hizmet1_idx` (`Hizmet_idHizmet`);

--
-- Tablo için indeksler `teknetur`
--
ALTER TABLE `teknetur`
  ADD PRIMARY KEY (`idTekneTur`),
  ADD KEY `fk_TekneTur_TurProgrami1_idx` (`TurProgrami_idTurProgrami`),
  ADD KEY `fk_TekneTur_HizmetBilgisi1_idx` (`HizmetBilgisi_idHizmetBilgisi`);

--
-- Tablo için indeksler `turprogrami`
--
ALTER TABLE `turprogrami`
  ADD PRIMARY KEY (`idTurProgrami`);

--
-- Tablo için indeksler `yurtdisitur`
--
ALTER TABLE `yurtdisitur`
  ADD PRIMARY KEY (`idYurtdisiTur`),
  ADD KEY `fk_YurtdisiTur_TurProgrami1_idx` (`TurProgrami_idTurProgrami`),
  ADD KEY `fk_YurtdisiTur_HizmetBilgisi1_idx` (`HizmetBilgisi_idHizmetBilgisi`);

--
-- Tablo için indeksler `__efmigrationshistory`
--
ALTER TABLE `__efmigrationshistory`
  ADD PRIMARY KEY (`MigrationId`);

--
-- Dökümü yapılmış tablolar için kısıtlamalar
--

--
-- Tablo kısıtlamaları `newmusteri`
--
ALTER TABLE `newmusteri`
  ADD CONSTRAINT `FK_musteri` FOREIGN KEY (`idMusteri`) REFERENCES `musteri` (`idMusteri`);

--
-- Tablo kısıtlamaları `otel`
--
ALTER TABLE `otel`
  ADD CONSTRAINT `fk_Otel_HizmetBilgisi1` FOREIGN KEY (`HizmetBilgisi_idHizmetBilgisi`) REFERENCES `hizmetbilgisi` (`idHizmetBilgisi`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Tablo kısıtlamaları `rezervasyon`
--
ALTER TABLE `rezervasyon`
  ADD CONSTRAINT `fk_Rezervasyon_Hizmet1` FOREIGN KEY (`Hizmet_idHizmet`) REFERENCES `hizmet` (`idHizmet`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  ADD CONSTRAINT `fk_Rezervasyon_Musteri1` FOREIGN KEY (`Musteri_idMusteri`) REFERENCES `musteri` (`idMusteri`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Tablo kısıtlamaları `teknetur`
--
ALTER TABLE `teknetur`
  ADD CONSTRAINT `fk_TekneTur_HizmetBilgisi1` FOREIGN KEY (`HizmetBilgisi_idHizmetBilgisi`) REFERENCES `hizmetbilgisi` (`idHizmetBilgisi`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  ADD CONSTRAINT `fk_TekneTur_TurProgrami1` FOREIGN KEY (`TurProgrami_idTurProgrami`) REFERENCES `turprogrami` (`idTurProgrami`) ON DELETE NO ACTION ON UPDATE NO ACTION;

--
-- Tablo kısıtlamaları `yurtdisitur`
--
ALTER TABLE `yurtdisitur`
  ADD CONSTRAINT `fk_YurtdisiTur_HizmetBilgisi1` FOREIGN KEY (`HizmetBilgisi_idHizmetBilgisi`) REFERENCES `hizmetbilgisi` (`idHizmetBilgisi`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  ADD CONSTRAINT `fk_YurtdisiTur_TurProgrami1` FOREIGN KEY (`TurProgrami_idTurProgrami`) REFERENCES `turprogrami` (`idTurProgrami`) ON DELETE NO ACTION ON UPDATE NO ACTION;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;




